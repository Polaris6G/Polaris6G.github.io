<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++学习</title>
    <url>/2022/01/12/C%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>分享一些C++实用技巧~</p>
<span id="more"></span>
<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="*修饰符"></a>*修饰符</h1><p>作用1：跳过</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*d %*d %d&quot;</span>,&amp;n);<span class="comment">//如输入2 3 4，n = 4;</span></span><br></pre></td></tr></table></figure>
<p>作用2：不定</p>
<img src="/2022/01/12/C%E7%9A%84%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/image-20220119195600323.png" class title="image-20220119195600323">
<h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p><code>sort（a+0,a+n)</code>a[0]~a[n-1]从小到大输出</p>
<p><code>sort(a+0,a+n-1,camp)</code>以camp函数的方式按序输出l</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">camp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a&lt;b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		sort(a+<span class="number">0</span>,a+<span class="number">10</span>,camp);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">&#125;a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">score_camp</span><span class="params">(<span class="keyword">const</span> student &amp;a,<span class="keyword">const</span> student &amp;b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a.score&gt;b.score)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(a.score&lt;b.score)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(a.name&lt;b.name)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i].name;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i].score;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(a+<span class="number">0</span>,a+n,score_camp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;a[i].name&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;a[i].score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h2><p>就像scanf();读字符数组一样，忽略开头的（制表符、换行符、空格）在此碰到空字符就停止（并不会读空字符）</p>
<h2 id="getline-cin-s"><a href="#getline-cin-s" class="headerlink" title="getline(cin,s)"></a>getline(cin,s)</h2><p>输入一行，可以包含空字符、空格等（s为string’类型，不能为字符数组），只会舍弃换行符 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;<span class="comment">//理解为读取单词 </span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;++tot&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;++tot&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">s.empty();判断是否为空</span><br><span class="line">s.size();返回s中字符个数</span><br><span class="line">s[n];</span><br><span class="line">s1+s2;连接</span><br><span class="line">s1=s2;替换</span><br><span class="line">v1==v2;比较</span><br><span class="line">!=,&lt;,&lt;=,&gt;,&gt;=</span><br></pre></td></tr></table></figure>
<p>注意：字符串数组类型和string（字符串）类型不一样：</p>
<p>两字符串数组不能直接相加；</p>
<p>两个字符串可相加；</p>
<p>一个字符串和一个字符串数组可以相加，结果为字符串。</p>
<p>如：</p>
<p><code>string s1= &quot;hello &quot;+&quot;world&quot;</code>非法</p>
<p><code>string s1= s1+&quot;,&quot;+&quot;world&quot;</code>合法，s1+”,”变为字符串类型，再与”world”相连。</p>
<p><code>s.insert(pos,s2)</code>在s下标为pos的元素前插入string类型s2</p>
<p><code>s.substr(pos,len)</code>返回一个string类型，包含s中下表为pos起的len个字符</p>
<p><code>s.replace(pos,len,s2)</code>删除pos起的len个字符，并在下标为pos处插入s2</p>
<p><code>s.find(s2,pos)</code>在s中以pos位置起查看s2第一次出现的位置，若查找不到返回string::nops</p>
<p><code>s.c_str()</code>返回一个与s字面值相同的C风格的字符串临时指针 </p>
<p>字符串类型相加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s1 = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> s2 = <span class="string">&quot;4321&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">sscanf</span>(s1.c_str(),<span class="string">&quot;%d&quot;</span>,&amp;a);<span class="comment">//sscanf()的作用将字符串s1以%d的形式读入变量a </span></span><br><span class="line">	<span class="built_in">sscanf</span>(s2.c_str(),<span class="string">&quot;%d&quot;</span>,&amp;b);<span class="comment">//s1.c_str()将传入一个C风格的字符串变量的起始地址，相当于字符数组的首地址 </span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//字符-&gt;数字相加 </span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;s1+s2&lt;&lt;<span class="built_in">endl</span>;<span class="comment">// 字符串拼接 </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h1 id="算法设计工具-STL"><a href="#算法设计工具-STL" class="headerlink" title="算法设计工具-STL"></a>算法设计工具-STL</h1><p><strong>STL主要由container、algorithm和iterator（迭代器）三部分组成。</strong></p>
<h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>STL也是一种数据结构，如链表、栈或队列等：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">数据结构</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">实现头文件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">向量</td>
<td style="text-align:left">连续存储元素。底层数据结构为数组，支持快速随机访问</td>
<td style="text-align:left"><code>&lt;vector&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">字符串</td>
<td style="text-align:left">字符串处理容器</td>
<td style="text-align:left"><code>&lt;string&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">双端队列</td>
<td style="text-align:left">连续存储的指向不同元素的指针所组成的数组。底层数据结构为一个中央控制器和多个缓存区，支持收尾元素（中间不能）快速增删，也支持随机访问</td>
<td style="text-align:left"><code>&lt;deque&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">链表</td>
<td style="text-align:left">有节点组成的链表，每个节点包含着一个元素，底层数据结构为双向链表，支持节点的快速增删</td>
<td style="text-align:left"><code>&lt;list&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">栈</td>
<td style="text-align:left">后进先出的序列</td>
<td style="text-align:left"><code>&lt;stack&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">队列</td>
<td style="text-align:left">先进先出的序列</td>
<td style="text-align:left"><code>&lt;queue&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">优先队列（priority_queue)</td>
<td style="text-align:left">元素的进出队顺序由某个谓词或者关系函数决定的一种队列</td>
<td style="text-align:left"><code>&lt;queue&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">集合（set）/多重结合（multiset)</td>
<td style="text-align:left">由节点组成的红黑树，每个节点都包含着一个元素，set中所有元素有序但不重复，multiset中所有关键字有序但不重复</td>
<td style="text-align:left"><code>&lt;set&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">映射(map)/多重映射（multimap）</td>
<td style="text-align:left">由（关键字，值）对组成的集合，map中所有关键字有序但不重复，multimap中所有关键字有序但可以重复</td>
<td style="text-align:left"><code>&lt;map&gt;</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h2><p>STL算法部分主要由头文件<code>&lt;algorithm&gt;</code>、<code>&lt;numeric&gt;</code>、和<code>&lt;functional&gt;</code>组成</p>
<h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><p>STL迭代器用于访问容器中的数据对象。每个容器都有自己的迭代器，只有容器自己才知道如何访问自己的元素</p>
<p>栗子：C/C++中的指针</p>
<p>常用迭代器：</p>
<ul>
<li><p><code>iterator</code>：正向遍历；</p>
</li>
<li><p><code>const_iterator</code>：常量迭代器，只能读取容器中元素；</p>
</li>
<li><p><code>reverse_iterator</code>：反向遍历；</p>
</li>
<li><p><code>const_reverse_iterator</code>：常量反向迭代器，只能读取容器中元素。</p>
</li>
</ul>
<h2 id="常用的STL容器"><a href="#常用的STL容器" class="headerlink" title="常用的STL容器"></a>常用的STL容器</h2><ul>
<li>顺序容器</li>
<li>适配器容器</li>
<li>关联容器</li>
</ul>
<p>顺序容器：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>容器类型</th>
<th>映射</th>
<th>插入/删除</th>
<th>访问</th>
<th>特性（优缺点）</th>
</tr>
</thead>
<tbody>
<tr>
<td>vector 向量容器</td>
<td>数组</td>
<td>从末尾插入删除快</td>
<td>快速随机访问</td>
<td>在序列中间插入删除需要移动元素，较慢</td>
</tr>
<tr>
<td>string 字符串容器</td>
<td>字符串</td>
<td>由内置函数完成</td>
<td>快速随机访问</td>
<td>常用操作包括增加、删除、修改、查找比较、链接、输入、输出</td>
</tr>
<tr>
<td>deque</td>
<td>双端队列</td>
<td>可从前面或后面快速快速插入删除</td>
<td>快速随机访问</td>
<td>每个块的地址连续，块之间的地址不连续</td>
</tr>
<tr>
<td>list</td>
<td>双向链表</td>
<td>可从任何地方快速插入删除</td>
<td>不能随机访问</td>
<td>通过指针连接，地址不连续</td>
</tr>
</tbody>
</table>
</div>
<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>向量容器</p>
<p>定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">10</span>, <span class="number">1.23</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v4</span><span class="params">(a, a+<span class="number">5</span>)</span> <span class="comment">//用数组a[0...4]5个元素初始化</span></span></span><br></pre></td></tr></table></figure>
<p>成员函数：</p>
<p><code>empty();</code></p>
<p><code>size();</code></p>
<p><code>[];</code></p>
<p><code>reserve(n);</code>：为当前向量容器预分配n个元素的存储空间</p>
<p><code>capacity();</code>：能放几个</p>
<p><code>resize(n);</code>：调整向量容器使其容纳n个元素</p>
<p><code>push_back();</code>：在当前向量容器尾部添加了一个元素</p>
<p><code>insert(pos, elem);</code>：将元素elem插到pos下标位置之前</p>
<p><code>front();</code>：获取当前容器的第一个元素</p>
<p><code>back();</code>：获取最后一个元素</p>
<p><code>substr(pos,n)</code>返回str中其实位置为pos，长度为n的字符串，n缺省则到结尾</p>
<p><code>erase();</code>：删除当前向量容器中某个迭代器或者迭代器区间指定的元素</p>
<p><code>clear();</code>：删除当前向量中所有元素;</p>
<p><code>begin()</code> <code>end()</code> <code>rbengin()</code> <code>rend()</code>：迭代器函数</p>
<p>栗子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myv;</span><br><span class="line">	myv.push_back(<span class="number">1</span>);</span><br><span class="line">	myv.push_back(<span class="number">2</span>);</span><br><span class="line">	myv.push_back(<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span>(it=myv.begin();it!=myv.end();++it)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*it);<span class="comment">//1 2 3</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator rit;</span><br><span class="line">	<span class="keyword">for</span>(rit=myv.rbegin();rit!=myv.rend();++rit)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*rit);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//3 2 1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> cstr[]=<span class="string">&quot;China!Great Wall&quot;</span>;<span class="comment">//C-字符串</span></span><br><span class="line"><span class="built_in">string</span> s1[cstr];</span><br><span class="line"><span class="built_in">string</span> s2[s1];</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(cstr,<span class="number">7</span>,<span class="number">11</span>)</span></span>;<span class="comment">//s3:Great Wall;</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(cstr,<span class="number">6</span>)</span></span>;<span class="comment">//s4:China!</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s5</span><span class="params">(<span class="number">5</span>,<span class="string">&#x27;A&#x27;</span>)</span></span>;<span class="comment">//s5:AAAAA</span></span><br></pre></td></tr></table></figure>
<p>成员函数：</p>
<p><code>empty();</code></p>
<p><code>size(); = length();</code></p>
<p><code>[idx]; = at[idx];</code></p>
<p><code>compare(const string&amp; str);</code>：相等返回0；前者小返回-1；后者小返回1</p>
<p><code>append(cstr);</code></p>
<p><code>insert(size_type idx, const string&amp; str)</code>：:在下标为idx前插入str</p>
<p><code>begin()</code> <code>end()</code> <code>rbengin()</code> <code>rend()</code>：迭代器函数</p>
<p>栗子：</p>
<p>将字符串类型的变量转化为数字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s1=<span class="string">&quot;1234&quot;</span>,s2=<span class="string">&quot;4321&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">sscanf</span>(s1.c_str(),<span class="string">&quot;%d&quot;</span>,&amp;a);<span class="comment">//sscanf()的作用是从字符数组中读入</span></span><br><span class="line">	<span class="built_in">sscanf</span>(s2.c_str(),<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>双端队列容器</p>
<p>定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dq1;</span><br><span class="line"><span class="function"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dq</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">deque</span>&lt;<span class="keyword">double</span>&gt; <span class="title">dq3</span><span class="params">(<span class="number">10</span>, <span class="number">1.23</span>)</span></span>;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;dq4(dq2.begin(),dq.end());<span class="comment">//用dq2的所有元素初始化dq4</span></span><br></pre></td></tr></table></figure>
<p>成员函数：</p>
<p><code>empty()</code></p>
<p><code>size()</code></p>
<p><code>push_front(elem)</code>在队头插入</p>
<p><code>push_back(elem)</code>在队尾插入</p>
<p><code>pop_front()</code></p>
<p><code>pop_back()</code></p>
<p><code>erase()</code>删除一个或几个元素</p>
<p><code>clear()</code>删除所有元素</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>链表容器</p>
<p>定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">double</span>&gt; <span class="title">l3</span> <span class="params">(<span class="number">10</span>,<span class="number">1.23</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l4</span><span class="params">(a,a+<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>成员函数：</p>
<p><code>empty()</code></p>
<p><code>size()</code></p>
<p><code>push_back()</code></p>
<p><code>pop_back()</code></p>
<p><code>remove()</code>删除所有指定值的元素</p>
<p><code>remove_if(cmp)</code>删除满足条件的元素</p>
<p><code>erase()</code>删除一个或几个</p>
<p><code>unique()</code>删除链表容器中相邻的重复元素</p>
<p><code>clear()</code>删除所有元素</p>
<p><code>insert(pos,elem)</code></p>
<p><code>insert(pos,n,elem)</code></p>
<p><code>insert(pos,pos1,pos2)</code>在pos前插入[pos1,pos2)的内容</p>
<p><code>reverse()</code>反转链表</p>
<p><code>sort()</code>排序</p>
<p>关联容器：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>容器类型</th>
<th>映射</th>
<th>插入/删除</th>
<th>访问</th>
<th>特性（优缺点）</th>
</tr>
</thead>
<tbody>
<tr>
<td>set/multiset</td>
<td>集合</td>
<td>允许集合的交叉并</td>
<td>查找速度较快</td>
<td>元素值被称为关键字。set关键字唯一，multiset关键字可以不唯一，默认情况下会对元素按关键字自动进行升序排列。</td>
</tr>
<tr>
<td>map/multimap</td>
<td>映射</td>
<td>由内置函数完成</td>
<td>快速随机访问</td>
<td>利用pair的&lt;运算符将所有元素即key-value对按key的升序排列，以红黑树的形式存储，可以根据key快速地找到与之对应的value（查找时间为0(log2 n)）</td>
</tr>
</tbody>
</table>
</div>
<h3 id="set-multset"><a href="#set-multset" class="headerlink" title="set/multset"></a>set/multset</h3><p>成员函数：</p>
<p><code>empty()</code></p>
<p><code>size()</code></p>
<p><code>insert()</code></p>
<p><code>erase()</code></p>
<p><code>clear()</code></p>
<p><code>count(k)</code></p>
<p><code>find(k)</code></p>
<p><code>upper_bound()</code>返回一个迭代器，指向关键字大于k的第一个元素</p>
<p><code>lower_bound()</code>返回一个迭代器，指向关键字不小于k的第一个元素</p>
<h3 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map/multimap"></a>map/multimap</h3><p>成员函数：</p>
<p><code>empty()</code></p>
<p><code>size()</code></p>
<p><code>map[key]</code>返回关键字为key的元素的引用，如果不存在其这样的关键字，则以key作为关键字插入一个元素</p>
<p><code>insert(elem)</code>插入一个元素elem并返回该元素的位置</p>
<p><code>erase()</code></p>
<p><code>clear()</code></p>
<p><code>find()</code></p>
<p><code>count()</code>容器中指定关键字的元素个数（map中只有1或者0）</p>
<p>修改元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">mymap[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;<span class="comment">//或者</span></span><br><span class="line">mymap.insert(<span class="built_in">pair</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>获取元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ans = mymap[<span class="string">&#x27;a&#x27;</span>];</span><br></pre></td></tr></table></figure>
<p>只有党map中有这个关键字(‘a’)是才会成功，否则会自动插入一个元素，值为初始化值。可以使用find()方法来发现一个关键字是否存在。</p>
<p>栗子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">	mymap.insert(<span class="built_in">pair</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>));<span class="comment">//插入方法1</span></span><br><span class="line">	mymap.insert(<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::value_type(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>));<span class="comment">//插入方法2</span></span><br><span class="line">	mymap[<span class="string">&#x27;c&#x27;</span>]=<span class="number">3</span>;<span class="comment">//插入方法3</span></span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::inter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>适配器容器</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>容器类型</th>
<th>映射</th>
<th>插入/删除</th>
<th>访问</th>
<th>特性（优缺点）</th>
</tr>
</thead>
<tbody>
<tr>
<td>stack</td>
<td>栈</td>
<td>push、pop</td>
<td>不能顺序遍历</td>
<td>底层容器可指定，默认为deque</td>
</tr>
<tr>
<td>queue</td>
<td>队列</td>
<td>push、pop</td>
<td>不能顺序遍历</td>
<td>一个队列类模板，相当于数据结构中的队列</td>
</tr>
<tr>
<td>priority_queue</td>
<td>优先队列</td>
<td></td>
<td></td>
<td>是一种具有受限访问操作的存储结构，元素可以以任意顺序进入优先队列。出队操作将出队列最高优先级的元素</td>
</tr>
</tbody>
</table>
</div>
<h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;striong,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; myst;//第二个参数指定底层容器为<span class="built_in">vector</span></span><br></pre></td></tr></table></figure>
<p>成员函数</p>
<p><code>empty()</code></p>
<p><code>size()</code></p>
<p><code>push(elem)</code></p>
<p><code>top()</code>返回栈顶元素</p>
<p><code>pop()</code></p>
<p>stack没有用于迭代器的成员函数</p>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>成员函数</p>
<p><code>empty()</code></p>
<p><code>size()</code></p>
<p><code>front()</code></p>
<p><code>back()</code></p>
<p><code>push(elem)</code></p>
<p><code>pop()</code></p>
<p>栗子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&lt; qu;</span><br><span class="line">	qu.push(1);</span><br><span class="line">	qu.push(2);</span><br><span class="line">	qu.push(3);</span><br><span class="line">	<span class="keyword">while</span>(!qu.empty())//出队所有元素</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(&quot;%d&quot;,qu.front());// 1 2 3</span><br><span class="line">		qu.pop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>成员函数</p>
<p><code>empty()</code></p>
<p><code>size()</code></p>
<p><code>push(elem)</code></p>
<p><code>top()</code></p>
<p><code>pop()</code></p>
<p>栗子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&lt; qu;</span><br><span class="line">	qu.push(3);</span><br><span class="line">	qu.push(1);</span><br><span class="line">	qu.push(2);</span><br><span class="line">    <span class="built_in">printf</span>(&quot;队头元素：%d\n&quot;,qu.top());//3</span><br><span class="line">	<span class="keyword">while</span>(!qu.empty())//出队所有元素</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(&quot;%d&quot;,qu.front());// 3 2 1</span><br><span class="line">		qu.pop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优先级默认：元素值越大越优先</p>
<h2 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h2><ol>
<li>编写程序提取一段英文中所有的单词</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> str,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> w;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> j = str.find(<span class="string">&quot; &quot;</span>);<span class="comment">//查找第一个空格</span></span><br><span class="line">	<span class="keyword">while</span>(j != <span class="number">-1</span>)&#123;</span><br><span class="line">		w = str.substr(i,j-i);</span><br><span class="line">		words.push_back(w);</span><br><span class="line">		i=j+<span class="number">1</span>;</span><br><span class="line">		j = str.find(<span class="string">&quot; &quot;</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;str.length()<span class="number">-1</span>)<span class="comment">//处理最后一个单词 </span></span><br><span class="line">	&#123;</span><br><span class="line">		w = str.substr(i);</span><br><span class="line">		words.push_back(w);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> str=<span class="string">&quot;When someone walk out your life, let them. They are just making more room for someone else better to walk in.&quot;</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words;</span><br><span class="line">	solve(str,words);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;所有的单词：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span>(it=words.begin();it!=words.end();it++)</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>设计一个算法判断字符串str中每个字符是否唯一。</li>
</ol>
<p>思路：设计<code>map&lt;char,int&gt;</code>容器mymap，第一个分量key的类型为char，第二个分量value的类型为int，对应关键字出现的次数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isUnique</span><span class="params">(<span class="built_in">string</span> &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.begin();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mymap[str[i]]++;</span><br><span class="line">		<span class="keyword">if</span>(mymap[str[i]]&gt;<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习</title>
    <url>/2021/08/16/HTML/</url>
    <content><![CDATA[<h1 id="大纲："><a href="#大纲：" class="headerlink" title="大纲："></a>大纲：</h1><p>这是在字节跳动前端青训营所学的前端知识-&gt;<strong>HTML</strong>精简内容:</p>
<ul>
<li>HTML简介</li>
<li>HTML结构</li>
<li>HTML标签</li>
<li>语义化</li>
<li>HTML解析</li>
</ul>
<span id="more"></span>
<h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><p> <strong>HTML（HyperText Markup Language, 超文本标记语言)</strong>  ，用于构建页面基本结构机器内容的标记语言。</p>
<p>超文本：文本中包含指向其他文本的链接。</p>
<p>标记语言：将文本机器文本相关的其他信息结合起来，展现出关于文档结构，如：HTML、XML、KML、Markdown等。</p>
<h1 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h1><ul>
<li>HTML文档包含多个HTML元素（标签）</li>
<li>HTML元素 = 开始标签 +结束标签 +元素内容</li>
<li>一些元素只要一个标签，如img、input、br等</li>
<li>HTML元素标签不区分大小写</li>
<li>元素可以嵌套在其他元素中</li>
<li>元素可以拥有属性，属性包含元素的额外信息（id, class, src)</li>
</ul>
<h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><h2 id="DOCTYPE-html"><a href="#DOCTYPE-html" class="headerlink" title="DOCTYPE html"></a>DOCTYPE html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>放在html文档最前面的位置，加上之后就按照W3C的HTML标椎来解析渲染页面。</p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>根元素</strong>，包含整个页面的内容</p>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>定义文档字符编码</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML&quot;</span>&gt;</span>关键字</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;discription&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML基础&quot;</span>&gt;</span>页面描述</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0,maximun-scale=1.0,user-scalable=0&quot;</span>&gt;</span>主要用于移动端，定义设备屏幕上用来显示网页的区域</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> &quot;<span class="attr">http-equiv</span>=<span class="string">expires</span>&quot; <span class="attr">content</span>=<span class="string">&quot;31 Dec 2021&quot;</span>&gt;</span>http头部</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>网页标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;<span class="name">CSS</span></span>样式</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ioc&quot;</span><span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span>定义当前页面图标</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span><span class="attr">href</span>=<span class="string">&quot;my-css-file.css&quot;</span>&gt;</span>链接到样式表</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;fancy.css&quot;</span><span class="attr">rel</span>=<span class="string">&quot;alternate stylesheet&quot;</span><span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span><span class="attr">title</span>=<span class="string">&quot;Fancy&quot;</span>&gt;</span>可替换的样式表</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对用户不可见，其中包含例如面向搜索引擎的关键字（keyWord)、页面描述（discription）、字编码声明、CSS样式等。</p>
<h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该元素包含能够被用户访问到的内容，包含文本、图像、视频、游戏、音频等.</p>
<h2 id="内联元素inline"><a href="#内联元素inline" class="headerlink" title="内联元素inline"></a><strong>内联元素inline</strong></h2><ul>
<li>只占据对应标签的边框所包含的空间</li>
<li>只能容纳文本或其它内联元素</li>
<li>只能通过修改内边距、边框、行高修改尺寸</li>
</ul>
<p>常见元素：a、span、br、i、em、strong</p>
<h2 id="块级元素block"><a href="#块级元素block" class="headerlink" title="块级元素block"></a><strong>块级元素block</strong></h2><ul>
<li>占据父元素整行，总是从新行开始</li>
<li>能容纳其它元素</li>
<li>可控制宽高、内外边距、边框等改变尺寸</li>
</ul>
<p>常见元素：div、p、main、h1-h6、form、dl、table</p>
<h2 id="行内块级元素inline-block"><a href="#行内块级元素inline-block" class="headerlink" title="行内块级元素inline-block"></a><strong>行内块级元素inline-block</strong></h2><ul>
<li>元素在行内排列，不会独占一行</li>
<li>可控制宽高、内外边距、边框</li>
</ul>
<p>常见元素：img、input、td</p>
<p><img src="/2021/08/16/HTML/02.png" alt="02"></p>
<h2 id="script"><a href="#script" class="headerlink" title="script"></a><strong>script</strong></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;hello.js&#x27;</span>/&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;hello.js&#x27;</span> <span class="attr">defer</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;hello.js&#x27;</span> <span class="attr">async</span> /&gt;</span></span></span></span><br></pre></td></tr></table></figure>
<p>属性：</p>
<ul>
<li>defer：立即下载，延迟执行，表示脚本可以等到dom被完全解析和显示之后再执行，只对外部脚本有效。</li>
<li>async：立即下载脚本（不妨碍其他操作），在DomContentLoaded事件后立刻执行。只对外部脚本有效。</li>
</ul>
<p><img src="/2021/08/16/HTML/01.png" alt="01" style="zoom:200%;"></p>
<p><strong>一般放在body结束标签上引用。</strong></p>
<h1 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h1><p>根据内容的结构，选择合适的标签以构建便于开发者阅读、可维护性更好的代码结构，同时便于机器的解析</p>
<h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><ul>
<li>展现介绍性信息</li>
<li>通常包含一组介绍性或辅助导航的元素</li>
<li>不可放在 footer、address、或另一个 header 的内部</li>
</ul>
<h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><ul>
<li>展示目录、菜单、索引等</li>
<li>放置一些热门的链接</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span><span class="attr">CSS</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="article"><a href="#article" class="headerlink" title="article"></a>article</h2><ul>
<li>独立的文档，如页面、应用、站点</li>
<li>可独立分配或可服用的结构，如论坛帖子、新闻、用户评论等</li>
</ul>
<h2 id="section"><a href="#section" class="headerlink" title="section"></a>section</h2><ul>
<li>按主题将内容分组，通常有标题</li>
<li>不建议用作普通容器，美化作用可使用 div 代替</li>
<li>如果元素里是单独的整块内容，可使用 article 代替</li>
</ul>
<h2 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h2><ul>
<li>表示一个和其余页面几乎无关的部分，或者单独拆开不影响整体的内容</li>
<li>如广告、提示语、banner 等</li>
</ul>
<h2 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h2><ul>
<li>表示一个章节的页脚</li>
<li>通常包含作者、版权、发布/修改时间、引用数据等信息</li>
<li>footer 内的元素不属于章节内容，不包含在大纲中</li>
</ul>
<p><img src="/2021/08/16/HTML/05.png" alt="07"></p>
<h2 id="figure-figcaption"><a href="#figure-figcaption" class="headerlink" title="figure / figcaption"></a>figure / figcaption</h2><p>figure包裹被独立引用的内容，如图表、插图、代码等</p>
<p><figcaption> 与其引用内容相关的标题或描述，通常位于 <figure> 之前或之后</figure></figcaption></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span> 包裹被独立引用的内容，如图表、插图、代码等</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="blockquote"><a href="#blockquote" class="headerlink" title="blockquote"></a>blockquote</h2><ul>
<li>块级引用内容</li>
<li>cite 属性表示来源 URL</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;https://www.polaris6g.cn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>An awesome Webpage<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Bravo!<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="dl-dt-dd"><a href="#dl-dt-dd" class="headerlink" title="dl / dt / dd"></a>dl / dt / dd</h2><ul>
<li>用于描述一组键值对</li>
<li>通常用于元数据、术语定义等场景</li>
<li>dt:关键字(keyword)</li>
<li>dd:描述（description)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Mozilla Firefox<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Fx<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A free, open source, cross-platform, graphical web browser</span><br><span class="line">      developed by the Mozilla Corporation and hundreds of volunteers.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/16/HTML/03.png" alt="03" style="zoom:200%;"></p>
<h2 id="cite"><a href="#cite" class="headerlink" title="cite"></a>cite</h2><p>表示引用作品标题，如论文、电影、书籍等</p>
<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><ul>
<li>机器可读的时间或日期</li>
<li>dateime 属性表示与元素关联的时间日期，若不执行则元素不会解析成日期</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The concert took place on <span class="tag">&lt;<span class="name">time</span> <span class="attr">datatime</span>=<span class="string">&quot;2021-10-2&quot;</span><span class="attr">20:00</span>&gt;</span>May 15<span class="tag">&lt;/<span class="name">time</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><p>某人或组织的联系信息</p>
<h2 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h2><p>在引用中使用，表示需要引起注意</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>代码片段</p>
<h2 id="small"><a href="#small" class="headerlink" title="small"></a>small</h2><p>免责声明、注意事项等</p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><ul>
<li>src：图片资源路径</li>
<li>alt：对图像的文本描述。在屏幕阅读器上会将这个描述读给使用者听，在图片无法加载时，浏览器会显示 alt 的文本</li>
<li>decoding 解码方式：异步、同步； 可选值：auto（默认）/ async / sync</li>
<li>loading 懒加载 可选值：eager（默认）/ lazy</li>
</ul>
<h2 id="picture"><a href="#picture" class="headerlink" title="picture"></a>picture</h2><ul>
<li>元素通过包含零个或多个 <source> 元素和一个的 <img> 元素来为不同的显示设备提供相应的图片版本，若未匹配到则使用 <img> 替代</li>
<li>media：匹配条件，类似媒介查询</li>
<li>type：MIME 类型，根据浏览器支持性渲染相应图片</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;/image/f05.jpg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">media</span>=<span class="string">&quot;(min-width: 800px)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image/f02.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h1><h2 id="video-audio"><a href="#video-audio" class="headerlink" title="video / audio"></a>video / audio</h2><ul>
<li>src：资源路径</li>
<li>controls：是否显示浏览器自带控件</li>
<li>autoplay：是否自动播放</li>
<li>source 元素表示视频的可代替资源（不同格式、清晰度、读取失败或无法解码时可依次尝试）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/media/cc0-videos/flower.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/media/cc0-videos/flower.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    Sorry, your browser doesn&#x27;t support embedded videos.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="HTML-解析"><a href="#HTML-解析" class="headerlink" title="HTML 解析"></a>HTML 解析</h1><ol>
<li>浏览器获取文档以及文档所引用的资源后，主进程将开始构建一个 DOM 树</li>
<li>在遇到 script 标签时，会将阻塞解析，主进程处理脚本在 Chrome 中，如果因 script 解析的阻塞，会开启一个轻量的 Parser，解析还没构建的标签，若有标签包含 src、href 属性则先下载，等 script 执行完后就可以直接引用这些资源了</li>
<li>主线程根据 CSS 计算每个节点的样式，构建一个 CSSOM 树</li>
<li>通过遍历每一个节点，并忽略掉 display:none 节点，合并 DOM 树和 CSSDOM 树为渲染树（render）</li>
<li>浏览器根据渲染树开始进行布局，将渲染树的每个节点转换为屏幕的实际像素</li>
<li>合成帧</li>
</ol>
<p><img src="/2021/08/16/HTML/04.png" alt="04"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive数据仓库</title>
    <url>/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<ul>
<li>Hive介绍</li>
<li>Hive技术架构</li>
<li>Hive实操</li>
</ul>
<span id="more"></span>
<h1 id="Hive介绍"><a href="#Hive介绍" class="headerlink" title="Hive介绍"></a>Hive介绍</h1><h2 id="Hive是什么"><a href="#Hive是什么" class="headerlink" title="Hive是什么"></a>Hive是什么</h2><p>Hive是建立在Hadoop上的数据仓库基础构架，它提供了一系列的工具，可以用来进行数据提取转化加载（ETL），这是一种可以存储、查询和分析存储在Hadoop中的大规模数据的极致，它允许熟悉SQL的用户查询数据</p>
<ul>
<li>由facebook开源，最初用于解决海量结构化的日志数据统计问题</li>
<li>构建在Hadoop之上的数据仓库</li>
<li>Hive定义了一种类SQL查询语言：HQL</li>
<li>通常用于离线数据处理（采用MapReduce）</li>
<li>可认为是一个HQL-&gt;MR的语言翻译器</li>
</ul>
<h2 id="为什么使用Hive"><a href="#为什么使用Hive" class="headerlink" title="为什么使用Hive"></a>为什么使用Hive</h2><ul>
<li>简单，容易上手</li>
<li>为超大数据集设计的计算/扩展能力<ul>
<li>MR作为计算引擎，HDFS作为存储系统</li>
</ul>
</li>
<li>统一的元数据管理（HCalalog）</li>
</ul>
<h2 id="Hive局限性"><a href="#Hive局限性" class="headerlink" title="Hive局限性"></a>Hive局限性</h2><ul>
<li>Hive的HQL表达能力有限<ul>
<li>迭代式算法无法表达</li>
<li>有些复杂运算用HQL不易表达</li>
</ul>
</li>
<li>Hive效率较低<ul>
<li>Hive自动生成MR作业，通常不够智能</li>
<li>HQL调优困难，力度较粗</li>
<li>可控性差</li>
</ul>
</li>
</ul>
<h1 id="Hive技术架构"><a href="#Hive技术架构" class="headerlink" title="Hive技术架构"></a>Hive技术架构</h1><ul>
<li>用户接口（CLI，JDBC/ODBC,WebUI）</li>
<li>元数据存储（默认：derby，线上一般：MySQL）</li>
<li>驱动器（解释器、编译器、优化器、执行器）</li>
<li>Hadoop（用MapReduce进行计算，用HDFS进行存储）</li>
</ul>
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719160914765.png" class title="image-20220719160914765">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719160935518.png" class title="image-20220719160935518">
<h2 id="Hive部署架构"><a href="#Hive部署架构" class="headerlink" title="Hive部署架构"></a>Hive部署架构</h2><img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719161053402.png" class title="image-20220719161053402">
<ul>
<li>客户端（beeline（JDB实现），JDBC，Python）</li>
<li>Metastore（使用MySQL作为元数据库）</li>
<li>Hiveserver2（用于接受用户请求，解析SQL，执行SQL并返回结果）</li>
</ul>
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220724203253445.png" class title="image-20220724203253445">
<h2 id="Hive特点"><a href="#Hive特点" class="headerlink" title="Hive特点"></a>Hive特点</h2><img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719161316317.png" class title="image-20220719161316317">
<ul>
<li>支持提供类似于SQL的查询语言（HQL），基于用户使用</li>
<li>支持针对海量数据的高性能查询和分析</li>
<li>支持高扩展性，通过增加节点提高计算性能，性能线性扩展，支持在线扩展</li>
<li>支持众多计算框架，如MapReduce、Tez、Spark等</li>
<li>支持灵活的扩展数据类型，自定义函数（UDF）和脚本</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">查询语言</th>
<th style="text-align:center">HQL</th>
<th style="text-align:center">SQL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据存储位置</td>
<td style="text-align:center">HDFS</td>
<td style="text-align:center">Raw Device或者Local FS</td>
</tr>
<tr>
<td style="text-align:center">数据格式</td>
<td style="text-align:center">用户定义</td>
<td style="text-align:center">系统决定</td>
</tr>
<tr>
<td style="text-align:center">数据更新</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">索引</td>
<td style="text-align:center">无</td>
<td style="text-align:center">有</td>
</tr>
<tr>
<td style="text-align:center">执行</td>
<td style="text-align:center">MapReduce</td>
<td style="text-align:center">Executor</td>
</tr>
<tr>
<td style="text-align:center">执行延迟</td>
<td style="text-align:center">高</td>
<td style="text-align:center">低</td>
</tr>
<tr>
<td style="text-align:center">可扩展性</td>
<td style="text-align:center">高</td>
<td style="text-align:center">低</td>
</tr>
<tr>
<td style="text-align:center">数据规模</td>
<td style="text-align:center">大</td>
<td style="text-align:center">小</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Hive应用场景"><a href="#Hive应用场景" class="headerlink" title="Hive应用场景"></a>Hive应用场景</h2><img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719161449400.png" class title="image-20220719161449400">
<ul>
<li>日志分析<ul>
<li>统计网站一个时间段内的pv、uv</li>
<li>多维度数据分析</li>
<li>大部分互联网公司使用Hive进行日志分析，包括百度、淘宝等</li>
</ul>
</li>
<li>其他场景<ul>
<li>海量结构化数据离线分析</li>
<li>低成本进行数据分析（不直接编写MR）</li>
</ul>
</li>
</ul>
<h1 id="Hive实操"><a href="#Hive实操" class="headerlink" title="Hive实操"></a>Hive实操</h1><img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719161741766.png" class title="image-20220719161741766">
<h2 id="Hive数据模型"><a href="#Hive数据模型" class="headerlink" title="Hive数据模型"></a>Hive数据模型</h2><img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719161811844.png" class title="image-20220719161811844">
<h2 id="Hive数据类型"><a href="#Hive数据类型" class="headerlink" title="Hive数据类型"></a>Hive数据类型</h2><img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719161849839.png" class title="image-20220719161849839">
<h2 id="DDL（数据库定义语言"><a href="#DDL（数据库定义语言" class="headerlink" title="DDL（数据库定义语言)"></a>DDL（数据库定义语言)</h2><img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719161956170.png" class title="image-20220719161956170">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220724205729182.png" class title="image-20220724205729182">
<p>默认分隔符：/001 -&gt;SOH</p>
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220724210023404.png" class title="image-20220724210023404">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719162006608.png" class title="image-20220719162006608">
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220719162014290.png" class title="image-20220719162014290">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220720220646183.png" class title="image-20220720220646183">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220720220707865.png" class title="image-20220720220707865">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220720220729305.png" class title="image-20220720220729305">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220720220749498.png" class title="image-20220720220749498">
<h2 id="Hive配置"><a href="#Hive配置" class="headerlink" title="Hive配置"></a>Hive配置</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">IP</th>
<th>主机名</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">192.168.80.132</td>
<td>e3base01</td>
<td style="text-align:left">QuorumPeerMain、Namenode、datanode、zkfc、journalnode、resourcemanager、nodemanager</td>
</tr>
<tr>
<td style="text-align:center">192.168.80.133</td>
<td>e3base02</td>
<td style="text-align:left">QuorumPeerMain、Namenode、datanode、zkfc、journalnode、resourcemanager、nodemanager</td>
</tr>
<tr>
<td style="text-align:center">192.168.80.134</td>
<td>e3base03</td>
<td style="text-align:left">QuorumPeerMain、datanode、journalnode、nodemanager、<strong>metastore、hiveserver2</strong></td>
</tr>
<tr>
<td style="text-align:center">192.168.80.131</td>
<td>mysql01</td>
<td style="text-align:left">mysql</td>
</tr>
</tbody>
</table>
</div>
<p>1、安装包解压配置</p>
<p>将安装程序apache-hive-2.3.3-bin-e3base3.0.0.tar.gz拷贝到对应的一台主机如e3base01的/e3base/cdh5140/目录下</p>
<p>使用<code>tar zxvf apache-hive-2.3.3-bin-e3base3.0.0.tar.gz</code>命令进行解压</p>
<p>创建软连接<code>ln -s /e3base/cdh5140/hive-1.1.0-cdh5.14.0-e3base3.0.0/ /e3base/hive</code></p>
<p>创建/e3base/cdh5140/e3-info/hive/logs目录 <code>mkdir -p /e3base/hive/logs</code></p>
<p>2、配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HIVE_HOME=$IN_HOME/hive</span><br><span class="line">export PATH=$HIVE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>
<p>3、修改hive-env.sh文件（/e3base/hive/conf/hive-env.sh）</p>
<p><em>请注意修改这些参数中的-Xms -Xms -Xmn值符合当前主机环境，如堆内存值配置过大超过系统可用内存，会导致服务启动失败</em></p>
<p>4、修改hive-site.sh文件（/e3base/hive/conf/hive-site.sh）</p>
<p>在mysql对应的主机上创建hivedb数据库，hive用户，密码hive123，并授权：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database hivedb;</span><br><span class="line">show databases;</span><br><span class="line">create user hive@&#39;%&#39; identified by &#39;polaris6g&#39;;</span><br><span class="line">grant all on hivedb.* to hive@&#39;%&#39;;</span><br><span class="line">flush privileges;</span><br><span class="line">select user,host from mysql.user;</span><br></pre></td></tr></table></figure>
<p>hive-site.sh：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base01,e3base02,e3base03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.client.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>11001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://192.168.229.134:15001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://192.168.229.131:3306/hivedb?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>polaris6g<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、修改hive-log4j.properties</p>
<p>hive.log.dir=/e3base/e3-info/hive/logs  hive运行日志路径</p>
<p>6、<strong>Hive启停</strong></p>
<p>（1）初始化hive元数据库</p>
<p>使用mysql作为hive元数据数据库，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">schematool -initSchema -dbType mysql</span><br></pre></td></tr></table></figure>
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220721180957611.png" class title="image-20220721180957611">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220721181300479.png" class title="image-20220721181300479">
<p>初始化成功后会在mysql数据库中生成相应的元数据库及表，在mysql中给常用的元数据表加索引，以保证其性能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index ind_part_name_tbl_id on partitions(part_name,tbl_id);</span><br><span class="line">create index ind_tbl_name on tbls (tbl_name);</span><br><span class="line">create index ind_tbl_id on partitions (tbl_id);</span><br><span class="line">create index ind_tbl_integer_idx on partition_keys (tbl_id,integer_idx);</span><br><span class="line">create index ind_cd_integer_idx on columns_v2 (cd_id,integer_idx);</span><br><span class="line">create index ind_name on dbs (name);</span><br></pre></td></tr></table></figure>
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220721181436621.png" class title="image-20220721181436621">
<p>检查新增索引是否添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show index from partitions;</span><br><span class="line"></span><br><span class="line">show index from tbls;</span><br><span class="line"></span><br><span class="line">show index from partition_keys;</span><br><span class="line"></span><br><span class="line">show index from columns_v2;</span><br><span class="line"></span><br><span class="line">show index from dbs;</span><br></pre></td></tr></table></figure>
<p>（2）启动hive服务</p>
<p>确定hivedb库已初始化成功</p>
<p>启动metastore服务：（metastore需启动在15001端口）-&gt;通过metastore建立元数据与MySQL的映射关系</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup hive --service metastore -p 15001 2&gt;&amp;1 &gt;&gt; $E3_INFO_HOME/hive/logs/metastore.log &amp;</span><br></pre></td></tr></table></figure>
<p>启动hiveserver2服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup hive --service hiveserver2 2&gt;&amp;1 &gt;&gt; $E3_INFO_HOME/hive/logs/hiveserver2.log &amp;</span><br></pre></td></tr></table></figure>
<p>验证是否启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep hive</span><br><span class="line">netstat -anp |grep port</span><br></pre></td></tr></table></figure>
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220721182908499.png" class title="image-20220721182908499">
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220721184810039.png" class title="image-20220721184810039">
<p>（3）停止hive服务</p>
<p>使用ps -ef | grep hive找到hive相关的进程，使用kill指令后接进程号杀掉进程</p>
<p>（4）进程查看</p>
<p>使用ps -ef| grep hive找到hive相关的进程号（pid）,输入jps后有相应的pid的<strong>RunJar</strong>则进程正常。</p>
<p>（5）连接hive</p>
<p>方式一：Hive Cli客户端验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure>
<p>方式二：Hive Beeline客户端验证（推荐）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">beeline -u jdbc:hive2://e3base03:15002/default -n e3base</span><br></pre></td></tr></table></figure>
<p>（6）应用示例：</p>
<p>1&gt;创建库test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: jdbc:hive2:&#x2F;&#x2F;e3base03:15002&#x2F;default&gt; create database test;</span><br></pre></td></tr></table></figure>
<p>2&gt;创建表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test.events(</span><br><span class="line">number STRING, country STRING, client STRING, action STRING</span><br><span class="line">) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39;;</span><br></pre></td></tr></table></figure>
<p>3&gt;创建本地数据文件到/e3base/cdh5140</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /e3base/events.csv</span><br><span class="line"></span><br><span class="line">10123,US,android,createNote</span><br><span class="line">10200,FR,windows,updateNote</span><br><span class="line">10123,US,android,updateNote</span><br><span class="line">10200,FR,ios,createNote</span><br><span class="line">1015,US,windows,updateTag</span><br></pre></td></tr></table></figure>
<p>4&gt;向表events导入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: jdbc:hive2:&#x2F;&#x2F;e3base03:15002&#x2F;default&gt; LOAD DATA LOCAL INPATH &#39;&#x2F;e3base&#x2F;events.csv&#39; overwrite into table test.events;</span><br></pre></td></tr></table></figure>
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220721214421601.png" class title="image-20220721214421601">
<p>5&gt;show语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> schemas;</span><br><span class="line"></span><br><span class="line">use test; <span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables <span class="keyword">in</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">desc</span> formated tablename; <span class="comment">--查看一张表的元数据信息 </span></span><br></pre></td></tr></table></figure>
<p>5&gt;统计各系统使用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT client,count(*) FROM test.events GROUP BY client;</span><br></pre></td></tr></table></figure>
<img src="/2022/07/22/Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/image-20220721215337967.png" class title="image-20220721215337967">
<p>（7）退出hive模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!quit</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cardb.cars(</span><br><span class="line">ID <span class="type">INT</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">NUMBER <span class="type">VARCHAR</span>(<span class="number">10</span>) COMMENT <span class="string">&#x27;车牌号&#x27;</span>,</span><br><span class="line">BRAND STRING COMMENT <span class="string">&#x27;品牌&#x27;</span>,</span><br><span class="line">IF_RENTED <span class="type">BOOLEAN</span> COMMENT <span class="string">&#x27;是否租出&#x27;</span>,</span><br><span class="line">TIMES <span class="type">INT</span> COMMENT <span class="string">&#x27;已租出次数&#x27;</span></span><br><span class="line">)<span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>; </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop实操概述</title>
    <url>/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<ul>
<li>Hadoop介绍</li>
<li><p>Hadoop部署</p>
</li>
<li><p>大数据基础平台安装实操目标</p>
</li>
</ul>
<span id="more"></span>
<h1 id="Hadoop介绍"><a href="#Hadoop介绍" class="headerlink" title="Hadoop介绍"></a>Hadoop介绍</h1><p>分布式存储组件：HDFS</p>
<ul>
<li>分布式存储系统</li>
<li>提供了高可靠性、高扩展性、高吞吐率和高容错率的数据存储服务</li>
</ul>
<p>资源管理系统：YARN</p>
<ul>
<li>负责集群资源的统一管理和调度</li>
</ul>
<p>分布式计算框架：MapReduce</p>
<ul>
<li>分布式计算框架</li>
<li>具有易于编程、高容错和高扩展等优点</li>
</ul>
<p><strong>版本技术衍进</strong></p>
<img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220714151807160.png" class title="image-20220714151807160">
<h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><p><strong>结构</strong></p>
<img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220714152057735.png" class title="image-20220714152057735">
<p><strong>特点</strong></p>
<ul>
<li><p>扩展性：横向无限扩展</p>
</li>
<li><p>高容错性：备份机制</p>
</li>
<li><p>适合PB级以上海量数据的存储</p>
</li>
</ul>
<p><strong>节点</strong></p>
<ul>
<li><p>Namenode</p>
</li>
<li><p>Datanode</p>
</li>
</ul>
<p><strong>基本原理</strong></p>
<ul>
<li>将文件切分成等大数据块，存储到多台机器上</li>
<li>将数据切分、容错、负载均衡等功能透明化</li>
<li>可将HDFS看成一个容量巨大、具有高容错性的磁盘</li>
</ul>
<h3 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h3><img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220714152500028.png" class title="image-20220714152500028">
<ul>
<li>Hadoop 2.0新增系统</li>
<li>负责集群的资源管理和调度</li>
<li>使得多种计算框架可以运行在一个集群中</li>
</ul>
<p><strong>节点</strong></p>
<ul>
<li><p>Resource Manager</p>
</li>
<li><p>Node Manager</p>
</li>
</ul>
<h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p><strong>两个阶段</strong></p>
<ul>
<li><p>map</p>
</li>
<li><p>reduce</p>
</li>
</ul>
<p><strong>特点</strong></p>
<ul>
<li>良好扩展性</li>
<li>高容错性</li>
<li>适合PB级以上海量的离线处理</li>
</ul>
<p><strong>计算流程</strong></p>
<img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220714152950749.png" class title="image-20220714152950749">
<h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p>进程：QuorumPeerMain</p>
<h3 id="QJM"><a href="#QJM" class="headerlink" title="QJM"></a>QJM</h3><p>进程：JournalNode</p>
<p><strong>汇总</strong></p>
<p>HDFS： Namenode 、Datanode、JournalNode（主从Namenode数据同步）、zkfc(Namenode故障转移)</p>
<p>YARN： Resource Manager、Node Manager</p>
<p>MapReduce： map、reduce</p>
<p>Zookeeper： QuorumPeerMain</p>
<h1 id="Hadoop部署"><a href="#Hadoop部署" class="headerlink" title="Hadoop部署"></a>Hadoop部署</h1><img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220714153125362.png" class title="image-20220714153125362">
<p><strong>部署模式</strong></p>
<ul>
<li>本地模式</li>
<li><p>伪分布式模式</p>
</li>
<li><p>完全分布式模式</p>
</li>
</ul>
<h3 id="集群部署设置"><a href="#集群部署设置" class="headerlink" title="集群部署设置"></a>集群部署设置</h3><img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220714153325977.png" class title="image-20220714153325977">
<h1 id="大数据基础平台安装实操目标"><a href="#大数据基础平台安装实操目标" class="headerlink" title="大数据基础平台安装实操目标"></a>大数据基础平台安装实操目标</h1><img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220714153630885.png" class title="image-20220714153630885">
<h3 id="mysql安装使用"><a href="#mysql安装使用" class="headerlink" title="mysql安装使用"></a>mysql安装使用</h3><p>1、创建安装用户及目录规划</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -d /iddbs iddbs</span><br><span class="line">cat /etc/passwd</span><br><span class="line">cat /etc/group</span><br><span class="line">passwd iddbs</span><br><span class="line">mkdir /dbdata</span><br><span class="line">chown -R iddbs:iddbs /dbdata</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>目录名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>/iddbs</td>
<td>MySQL程序目录</td>
</tr>
<tr>
<td>/iddbs/mysql-5.7.36</td>
<td>MySQL执行程序目录</td>
</tr>
<tr>
<td>/iddbs/software</td>
<td>常用软件存放目录</td>
</tr>
<tr>
<td>/iddbs/scripts</td>
<td>常用脚本存放目录</td>
</tr>
<tr>
<td>/dbdata</td>
<td>MySQL总数据目录</td>
</tr>
<tr>
<td>/dbdata/$port</td>
<td>MySQL实例目录</td>
</tr>
<tr>
<td>/dbdata/$port/${port}.cfg</td>
<td>MySQL实例配置文件</td>
</tr>
<tr>
<td>/dbdata/$port/data</td>
<td>MySQL实例数据存放目录</td>
</tr>
<tr>
<td>/dbdata/$port/binlog</td>
<td>MySQL实例Binlog存放目录</td>
</tr>
<tr>
<td>/dbdata/$port/logs</td>
<td>MySQL error/slow/general存放目录</td>
</tr>
<tr>
<td>/dbdata/$port/tmp</td>
<td>MySQL实例临时目录</td>
</tr>
<tr>
<td>/dbdata/backup</td>
<td>MySQL备份目录</td>
</tr>
</tbody>
</table>
</div>
<p>2、上传并解压安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf mysql-5.7.36-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">mv mysql-5.7.36-linux-glibc2.12-x86_64 /iddbs/mysql-5.7.36</span><br></pre></td></tr></table></figure>
<p>3、准备my.cnf文件</p>
<p>4、初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/iddbs/mysql-5.7.36/bin/mysqld --defaults-file=/dbdata/3306/3306.cfg --user=iddbs --initialize-insecure</span><br></pre></td></tr></table></figure>
<p>5、启动MySQL服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/iddbs/mysql-5.7.36/bin/mysqld_safe --defaults-file=/dbdata/3306/3306.cfg &amp;</span><br></pre></td></tr></table></figure>
<p>6、登录MySQL数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/iddbs/mysql-5.7.36/bin/mysql  -uroot -p  -S /dbdata/3306/mysql.sock</span><br></pre></td></tr></table></figure>
<p>7、创建数据库owndb </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database owndb;</span><br></pre></td></tr></table></figure>
<p>8、给owndb远程登录权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;N@2510las&#39; with grant option;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>9、给owndb创建用户owndbuser</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;owndbuser&#39;@&#39;%&#39; identified by &#39;Polais6G&#39;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>10、给owndb用户owndbuser授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all on owndb.* to &#39;owndbuser&#39;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h3 id="大数据基础平面部署准备"><a href="#大数据基础平面部署准备" class="headerlink" title="大数据基础平面部署准备"></a>大数据基础平面部署准备</h3><div class="table-container">
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.80.132</td>
<td>e3base01</td>
<td>QuorumPeerMain、Namenode、datanode、zkfc、journalnode、resourcemanager、nodemanager</td>
</tr>
<tr>
<td>192.168.80.133</td>
<td>e3base02</td>
<td>QuorumPeerMain、Namenode、datanode、zkfc、journalnode、resourcemanager、nodemanager</td>
</tr>
<tr>
<td>192.168.80.134</td>
<td>e3base03</td>
<td>QuorumPeerMain、datanode、journalnode、nodemanager</td>
</tr>
<tr>
<td>192.168.80.131</td>
<td>mysql01</td>
<td>mysql</td>
</tr>
</tbody>
</table>
</div>
<p>1、找一台主机克隆，克隆后配置好对应环境。</p>
<p>2、配置IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p>3、关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld #永久关闭</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld #暂时关闭 </span><br></pre></td></tr></table></figure>
<p>4、修改主机名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname e3base01</span><br></pre></td></tr></table></figure>
<p>5、配置/etc/hosts</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">192.168.80.141 e3base01</span><br><span class="line"></span><br><span class="line">192.168.80.142 e3base02</span><br><span class="line"></span><br><span class="line">192.168.80.143 e3base03</span><br></pre></td></tr></table></figure>
<p>6、创建e3base 用户，并创建对应的用数据目录/chunk1 之后授权给e3base:e3base</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -d /e3base e3base</span><br><span class="line"></span><br><span class="line">mkdir /chunk1</span><br><span class="line"></span><br><span class="line">chown -R e3base:e3base  /chunk1</span><br><span class="line"></span><br><span class="line">passwd e3base</span><br></pre></td></tr></table></figure>
<p>7、修改ulimit 的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ulimit -u 65536 /ulimit -n 1048576 /ulimit -s 262144 /ulimit -c 65536</span><br></pre></td></tr></table></figure>
<p>8、创建/var/run/hadoop-hdfs/ 授权给 e3base:e3base  修改权限为755</p>
<p>ps：只要重启虚拟机，这个路径就会消失，所以每次重新创建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /var/run/hadoop-hdfs/</span><br><span class="line"></span><br><span class="line">chown -R e3base:e3base  /var/run/hadoop-hdfs/</span><br><span class="line"></span><br><span class="line">chmod -R 755 /var/run/hadoop-hdfs/ </span><br></pre></td></tr></table></figure>
<p>9、安装JDK</p>
<p>10、配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">export IN_HOME=/e3base</span><br><span class="line"></span><br><span class="line">export E3_INFO_HOME=/e3base/e3-info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\##jdk</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/e3base/jdk</span><br><span class="line"></span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\##zookeeper</span><br><span class="line"></span><br><span class="line">export ZOO_HOME=$IN_HOME/zookeeper</span><br><span class="line"></span><br><span class="line">export PATH=$ZOO_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">\#hadoop</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME=$IN_HOME/hadoop</span><br><span class="line"></span><br><span class="line">export PATH=$HADOOP_HOME/sbin:$HADOOP_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\#hive</span><br><span class="line"></span><br><span class="line">export HIVE_HOME=$IN_HOME/hive</span><br><span class="line"></span><br><span class="line">export PATH=$HIVE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>
<p>测试:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -verison</span><br></pre></td></tr></table></figure>
<p>11、克隆主机</p>
<p>12、修改主机的IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p>13、修改主机名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname e3base02</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname e3base03</span><br></pre></td></tr></table></figure>
<p>14、配置ssh免密</p>
<p>root模式下修改：</p>
<p>SELINUX=disable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure>
<p>三台主机执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa	#生成私钥和密钥</span><br><span class="line"></span><br><span class="line">ssh-copy-id e3base01	#发放密匙</span><br></pre></td></tr></table></figure>
<p>在e3base01 主机执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp authorized_keys e3base02:/e3base/.ssh/</span><br><span class="line">scp authorized_keys e3base03:/e3base/.ssh/</span><br></pre></td></tr></table></figure>
<h3 id="zookeeper部署"><a href="#zookeeper部署" class="headerlink" title="zookeeper部署"></a>zookeeper部署</h3><p>1、安装解压zookeeper-3.4.5-cdh5.14.0-e3base3.0.0.tar.gz到/e3base/cdh5140</p>
<p>2、创建软连接（快捷方式）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /e3base/cdh5140/zookeeper-3.4.5-cdh5.14.0-e3base3.0.0 /e3base/zookeeper</span><br></pre></td></tr></table></figure>
<p>3、添加zookeeper相关的环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi .bash_profile</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export IN_HOME=/e3base/</span><br><span class="line"></span><br><span class="line">export ZOO_HOME=$IN_HOME/zookeeper</span><br><span class="line"></span><br><span class="line">export PATH=$ZOO_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>使其生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>
<p>4、创建$E3_INFO_HOME/zookeeper/data目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p $E3_INFO_HOME/zookeeper/data</span><br></pre></td></tr></table></figure>
<p>5、修改/e3base/zookeeper/conf/zookeeper-env.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/e3base/jdk</span><br><span class="line"></span><br><span class="line">export ZOO_LOG_DIR=/e3base/e3-info/zookeeper/logs</span><br></pre></td></tr></table></figure>
<p>6、修改/e3base/zookeeper/conf/zoo.cfg配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dataDir=/e3base/e3-info/zookeeper/data</span><br><span class="line"></span><br><span class="line">clientPort=11001</span><br><span class="line"></span><br><span class="line">server.1=e3base01:11002:11003</span><br><span class="line"></span><br><span class="line">server.2=e3base02:11002:11003</span><br><span class="line"></span><br><span class="line">server.3=e3base03:11002:11003</span><br><span class="line"></span><br><span class="line">maxClientCnxns=20500</span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<ul>
<li><p><strong>dataDir</strong>指定了在第一步中建立的目录，作为zookeeper操作的数据目录。</p>
</li>
<li><p><strong>clientPort</strong>指定了zookeeper客户端连接的端口。该端口可以进行配置更改。配置为11001。</p>
</li>
<li><p><strong>server.id</strong>=host：port1：port2（如server.1=e3base04:11002:11003）中server后的数字id表示该主机是第几号服务器；host是这个服务器的 ip 地址或主机名；port1表示zookeeper服务器通信端口；port2表示选举端口。</p>
</li>
<li><p><strong>maxClientCnxns</strong> 连接zookeeper服务的最大客户端数量，推荐20500。</p>
</li>
</ul>
<p>7、将程序拷贝到其他2台主机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r zookeeper-3.4.5-cdh5.14.0-e3base3.0.0 e3base02:/e3base/cdh5140/</span><br><span class="line">scp -r zookeeper-3.4.5-cdh5.14.0-e3base3.0.0 e3base03:/e3base/cdh5140/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别在2台主机上执行创建软连接</span></span><br><span class="line">ln -s /e3base/cdh5140/zookeeper-3.4.5-cdh5.14.0-e3base3.0.0/ /e3base/zookeeper</span><br></pre></td></tr></table></figure>
<p>8、在zoo.cfg 配置的dataDir目录，部署zookeeper服务的主机目录/e3base/e3-info/zookeeper/data下创建myid文件，文件中写入该主机在zoo.cfg配置信息server.id=host：port1：port2项中对应的数字id。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在e3base03上执行： echo 1 &gt; $E3_INFO_HOME/zookeeper/data/myid </span><br><span class="line"></span><br><span class="line">在e3base04上执行： echo 2 &gt; $E3_INFO_HOME/zookeeper/data/myid </span><br><span class="line"></span><br><span class="line">在e3base05上执行： echo 3 &gt; $E3_INFO_HOME/zookeeper/data/myid </span><br></pre></td></tr></table></figure>
<p>9、<strong>zookeeper启动</strong></p>
<p>登陆zookeeper集群中每台主机启动zookeeper，命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure>
<p>通过jps查看各主机上进程是否均已启动。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主机</th>
<th>进程名</th>
</tr>
</thead>
<tbody>
<tr>
<td>在启动的对应主机上查看</td>
<td>QuorumPeerMain</td>
</tr>
</tbody>
</table>
</div>
<p>启动后可以使用查看zookeeper进程状态,命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure>
<p>正常的集群状态有两种mode：leader、follower</p>
<p>可使用<strong>客户端命令</strong>进行测试，是否zookeeper启动正常，命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkCli.sh -server e3base01:11001,e3base02:11001,e3base03:11001（-server后加参数为zookeeper集群服务的地址和端口）</span><br></pre></td></tr></table></figure>
<p>10、zookeep停止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure>
<h3 id="HDFS部署"><a href="#HDFS部署" class="headerlink" title="HDFS部署"></a>HDFS部署</h3><p>1、将安装程序hadoop-2.6.0-cdh5.14.0-e3base3.0.0.tar.gz在/e3base/cdh5140目录下解压</p>
<p>2、设置软连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /e3base/cdh5140/hadoop-2.6.0-cdh5.14.0-e3base3.0.0 /e3base/hadoop</span><br></pre></td></tr></table></figure>
<p>3、配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export IN_HOME=/e3base/</span><br><span class="line">export HADOOP_HOME=$IN_HOME/hadoop</span><br><span class="line">export PATH=$HADOOP_HOME/sbin:$HADOOP_HOME/bin:$PATH</span><br><span class="line">使其生效：</span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>
<p>4、hadoop-env.sh文件配置</p>
<p>特别注意配置文件中的以下参数需要根据实际情况进行修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8</span><br><span class="line">export HADOOP_HOME=/e3base/hadoop</span><br><span class="line">export E3_INFO_HOME=/e3base/e3-info</span><br><span class="line">export HADOOP_LOG_DIR=$E3_INFO_HOME/hadoop/logs</span><br><span class="line">export HADOOP_PID_DIR=$E3_INFO_HOME/hadoop/pids</span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<ul>
<li><strong>JAVA_HOME</strong>配置上安装jdk的目录。</li>
<li><strong>HADOOP_HOME</strong> 配置hadoop应用目录。</li>
<li><strong>HADOOP_LOG_DIR</strong>指定的是Hadoop的日志路径，默认的设置是$HADOOP_HOME/logs，一般需要将其配置到一个磁盘空间比较大的目录下，设置成$E3_INFO_HOME/hadoop/logs。</li>
<li><strong>HADOOP_PID_DIR</strong>指定的是hadoop进程id的存放路径，默认在/tmp下，不修改可能导致无法正常启停，设置成$E3_INFO_HOME/hadoop/pids。</li>
</ul>
<p>注：配置文件中HADOOP_HEAPSIZE、HADOOP_NAMENODE_OPTS、HADOOP_DATANODE_OPTS参数中的JVM堆内存大小，如在测试环境，请注意修改这些参数中的-Xms -Xms -Xmn值符合当前主机环境，如堆内存值配置过大超过系统可用内存，会导致服务启动失败。</p>
<p>5、core-site.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://drmcluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base01:11001,e3base02:11001,e3base03:11001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>                                                                                                                                                                </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">value</span>&gt;</span>/e3base/e3-info/hadoop/tmp/hadoop-$&#123;user.name&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<ul>
<li><p>fs.default.name指定了HDFS的文件系统名称，value格式hdfs://xxxxxx/ 。</p>
</li>
<li><p>ha.zookeeper.quorum指定了用于hadoop namenode失效切换的zookeeper集群信息，填写格式ip:port，多个主机之间以逗号分隔。配置值与zookeeper安装部署保持一致。</p>
</li>
<li><p>hadoop.tmp.dir指定了hadoop临时文件存放目录，配置为/e3base/e3-info/hadoop/tmp/hadoop-${user.name}。</p>
</li>
</ul>
<p>6、hdfs-site.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">value</span>&gt;</span>drmcluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>                                                                     </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.nn1.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base01<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.nn2.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base02<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>                                                                  </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://e3base01:12007;e3base02:12007;e3base03:12007/drmcluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/e3base/e3-info/hadoop/jn<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///e3base/e3-info/hadoop/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>                                                                     </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">​    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/chunk1/hdfs<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>dfs.nameservices指定了集群服务名称，配置为drmcluster。</p>
</li>
<li><p>dfs.namenode.nn1.hostname,dfs.namenode.nn2.hostname分别指定配置namenode服务的主机名，根据实际情况修改。</p>
</li>
<li><p>dfs.ha.namenodes.drmcluster指定了第一个配置项drmcluster集群服务中用于namenode HA的节点名称，配置为nn1、nn2。</p>
</li>
<li><p>dfs.journalnode.edits.dir指定了journal node集群中各主机存储数据的本地磁盘路径，配置成/e3base/e3-info/hadoop/jn。</p>
</li>
<li><p>dfs.namenode.name.dir 配置成file:///e3base/e3-info/hadoop/nn</p>
</li>
<li><p>dfs.namenode.shared.edits.dir和dfs.namenode.name.dir指定了namenode元数据的存储目录，dfs.namenode.shared.edits.dir目录指定了QJM方式实现的元数据存储的路径（qjournal://e3base03:12007;e3base04:12007;e3base05:12007/drmcluster，e3base0*指定了journalnode集群，12007 JournalNode服务通信端口，drmcluster是dfs.nameservices指定了集群服务名称）。</p>
</li>
<li><p>dfs.datanode.data.dir指定了数据节点存放数据的目录，不做raid。（一般设置为挂载多块硬盘的路径），若值设置为/data1/hdfs,/data2/hdfs,/data3/hdfs，则需要在根目录下创建对应的目录，每个/data*目录需挂载到一块数据盘上。</p>
</li>
</ul>
<p>7、slaves文件配置</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/***********************slaves文件内容***********************/</span><br><span class="line"></span><br><span class="line">e3base03</span><br><span class="line"></span><br><span class="line">e3base04</span><br><span class="line"></span><br><span class="line">e3base05</span><br><span class="line"></span><br><span class="line">/************************************************************/</span><br></pre></td></tr></table></figure>
<p>slaves文件中配置了hadoop集群所包含的所有datanode节点，每行对应一个主机名。HDFS和YARN公用。</p>
<p>8、机架感知配置</p>
<p>在/e3base/cdh5140/hadoop/etc/hadoop目录下，修改topology.data文件。根据datanode节点修改相应的IP和主机名，以及机架名（rack）。如果datanode都在同一机架，机架名可相同。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">192.168.248.133 e3base01 /rack1</span><br><span class="line"></span><br><span class="line">192.168.248.134 e3base02 /rack2</span><br><span class="line"></span><br><span class="line">192.168.248.133 e3base03 /rack3</span><br></pre></td></tr></table></figure>
<p>9、将程序拷贝到其他2台主机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r hadoop-2.6.0-cdh5.14.0-e3base3.0.0 e3base02:/e3base/cdh5140</span><br><span class="line">scp -r hadoop-2.6.0-cdh5.14.0-e3base3.0.0 e3base03:/e3base/cdh5140</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别在2台主机上执行创建软连接</span></span><br><span class="line">ln -s /e3base/cdh5140/hadoop-2.6.0-cdh5.14.0-e3base3.0.0/ /e3base/hadoop</span><br></pre></td></tr></table></figure>
<p>10、创建对应的路径（只要重启虚拟机，这个路径就会消失，所以<strong>每次重新创建</strong>）（root下）！！！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/run/hadoop-hdfs/ </span><br><span class="line"></span><br><span class="line">chown -R e3base:e3base  /var/run/hadoop-hdfs/</span><br><span class="line"></span><br><span class="line">chmod -R 755 /var/run/hadoop-hdfs/</span><br></pre></td></tr></table></figure>
<p><strong>11、初始化HDFS</strong></p>
<p>（1）初始化zkfc</p>
<p>在ZK中创建znode来存储automatic Failover的数据，任选一个NN执行完成即可。在一个namenode上进入$HADOOP_HOME/bin执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/bin/hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure>
<p>（2）先启动journal node进程。</p>
<p>在每一个journalnode上进入$HADOOP_HOME执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/sbin/hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure>
<p>执行完成后，通过jps查看JournalNode进程是否启动正常。</p>
<p>（3）初始化主namenode节点</p>
<p>在需要做主namenode节点主机上进入$HADOOP_HOME/bin执行如下命令实现初始化HDFS目录、文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>
<p>（4）初始化备namenode节点</p>
<p>启动主namenode节点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/sbin/hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure>
<p>在另外备namenode节点拷贝主namenode节点的元数据，保证两个节点数据一致：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/bin/hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure>
<p><strong>12、启动HDFS</strong></p>
<p>（1）启动hdfs</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>
<p>（2）单节点启动namenode进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/sbin/hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure>
<p>（3）单节点启动zkfc进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/sbin/hadoop-daemon.sh start zkfc</span><br></pre></td></tr></table></figure>
<p>（4）单节点启动datanode进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/sbin/hadoop-daemon.sh start datanode</span><br></pre></td></tr></table></figure>
<p>（5）单节点启动journalnode进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/sbin/hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure>
<p>（6）启动所有datanode进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/e3base/hadoop/sbin/hadoop-daemons.sh start datanode</span><br></pre></td></tr></table></figure>
<p>ps：如配置了hadoop环境变量，无需进入/e3base/hadoop/sbin/执行</p>
<p><strong>13、HDFS停止</strong></p>
<p>（1）停止hdfs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;e3base&#x2F;hadoop&#x2F;sbin&#x2F;stop-dfs.sh</span><br></pre></td></tr></table></figure>
<p>（2）单节点停止namenode进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;e3base&#x2F;hadoop&#x2F;sbin&#x2F;hadoop-daemon.sh stop namenode</span><br></pre></td></tr></table></figure>
<p>（3）单节点停止zkfc进程（两个namenode单独停止）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;e3base&#x2F;hadoop&#x2F;sbin&#x2F;hadoop-daemon.sh stop zkfc</span><br></pre></td></tr></table></figure>
<p>（4）单节点停止datanode进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;e3base&#x2F;hadoop&#x2F;sbin&#x2F;hadoop-daemon.sh stop datanode</span><br></pre></td></tr></table></figure>
<p>（5）单节点启动journalnode进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;e3base&#x2F;hadoop&#x2F;sbin&#x2F;hadoop-daemon.sh stop journalnode</span><br></pre></td></tr></table></figure>
<p>（6）停止所有datanode进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;e3base&#x2F;cdh5140&#x2F;hadoop&#x2F;sbin&#x2F;hadoop-daemons.sh stop datanode</span><br></pre></td></tr></table></figure>
<p>ps：如配置了hadoop环境变量，无需进入/e3base/hadoop/sbin/执行</p>
<p><strong>13、HDFS进程查看</strong></p>
<p>jps</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主机</th>
<th>进程名</th>
</tr>
</thead>
<tbody>
<tr>
<td>$HADOOP_HOME /etc/hadoop下hdfs.xml文件中dfs.namenode.rpc-address.mycluster..*对应的主机</td>
<td>NameNode</td>
</tr>
<tr>
<td>$HADOOP_HOME /etc/hadoop下hdfs.xml文件中dfs.namenode.rpc-address.mycluster..*对应的主机（同NN）</td>
<td>DFSZKFailoverController（zkfc）</td>
</tr>
<tr>
<td>$HADOOP_HOME /etc/hadoop下hdfs.xml文件中dfs.namenode.shared.edits.dir配置项包含的主机</td>
<td>JournalNode</td>
</tr>
<tr>
<td>$HADOOP_HOME /etc/hadoop下slaves文件中包含的主机</td>
<td>DataNode</td>
</tr>
</tbody>
</table>
</div>
<p><strong>13、HDFS状态查看</strong></p>
<p>（1） namenode状态查看</p>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs haadmin -getServiceState serviceid</span><br></pre></td></tr></table></figure>
<p>如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs haadmin -getServiceState nn1</span><br><span class="line"></span><br><span class="line">hdfs haadmin -getServiceState nn2</span><br></pre></td></tr></table></figure>
<p>注：</p>
<p>两种状态：active、standby。serviceid为该主机在$HADOOP_HOME /etc/hadoop下hdfs.xml文件中dfs.namenode.rpc-address.mycluster.*对应的值。</p>
<p>（2） namenode状态手动切换</p>
<p>nn1为active，手动切换成nn2为active，执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop/bin/hdfs haadmin -DFSHAadmin -failover nn1 nn2</span><br></pre></td></tr></table></figure>
<p>（3） namenode离开安全模式</p>
<p>hdfs 是否进入安全模式检查：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -safemode get</span><br></pre></td></tr></table></figure>
<p>离开安全模式，执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop/bin/hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure>
<p>（4） HDFS 健康状态检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -report</span><br></pre></td></tr></table></figure>
<p>（5） HDFS数据块完整性检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs fsck / </span><br></pre></td></tr></table></figure>
<p><strong>14、HDFS命令使用</strong></p>
<p>（1）文件列表的命令为: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls</span><br><span class="line"></span><br><span class="line">hdfs dfs -ls路径</span><br></pre></td></tr></table></figure>
<p>不指名路径，默认用户工作目录，为hdfs下的/user/$USER目录（$USER为当前用户）</p>
<p>（2）增加文件目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir文件目录路径</span><br></pre></td></tr></table></figure>
<p>（3）用put将文件从本地文件复制到HDFS中去：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put &lt;localsrc&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure>
<p>（4）从HDFS中取回文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get &lt;localsrc&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure>
<p>（5）删除文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rm example.txt</span><br></pre></td></tr></table></figure>
<p><strong>15、HDFS监控页面使用</strong></p>
<p>查看namenode:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;namenodeIP or hostname:port]</span><br><span class="line">(http:&#x2F;&#x2F;masterIP or hostname:port&#x2F;master-status)</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.229.132:12003&#x2F;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>namenodeIP</strong> or <strong>hostname</strong>为状态为active的namenode对应IP或hostname</p>
</li>
<li><p><strong>port</strong>为dfs.namenode.http-address.drmcluster.nn1  或 dfs.namenode.http-address.drmcluster.nn2  对应的端口，目前为（12003）</p>
</li>
</ul>
<p>查看 datanode:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;datanodeIP or hostname:port]</span><br><span class="line">(http:&#x2F;&#x2F;regionserverIP or hostname:port &#x2F;rs-status)</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.229.132:12004&#x2F;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>datanodeIP</strong> or <strong>hostname</strong>为datanode对应IP或hostname</p>
</li>
<li><p><strong>port</strong>为dfs.datanode.http.address 对应的端口，目前为（12004）。</p>
</li>
</ul>
<p>效果如图：</p>
<img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220715193833455.png" class title="image-20220715193833455">
<h3 id="yarn部署"><a href="#yarn部署" class="headerlink" title="yarn部署"></a>yarn部署</h3><p>1、环境变量配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export IN_HOME=/e3base/cdh5140</span><br><span class="line">export HADOOP_HOME=$IN_HOME/hadoop</span><br><span class="line">export PATH=$HADOOP_HOME/sbin:$HADOOP_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>
<p>2、yarn-env.sh文件配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/e3base/jdk</span><br><span class="line">export HADOOP_HOME=/e3base/cdh5140/hadoop</span><br><span class="line">export E3_INFO_HOME=/e3base/e3-info</span><br><span class="line">export YARN_PID_DIR=$E3_INFO_HOME/hadoop/pids</span><br><span class="line">export YARN_LOG_DIR=$E3_INFO_HOME/hadoop/logs</span><br><span class="line">128m 128m</span><br></pre></td></tr></table></figure>
<ul>
<li><p>JAVA_HOME配置上安装jdk的目录,JDK安装路径，默认情况下执行读取linux环境变量${JAVA_HOME}。。</p>
</li>
<li><p>YARN_LOG_DIR指定的是yarn的日志路径。</p>
</li>
<li><p>YARN_PID_DIR 指定的是YARN的进程的pid存放路径。</p>
</li>
</ul>
<p><em>ps：配置文件中YARN_RESOURCEMANAGER_OPTS、YARN_NODEMANAGER_OPTS参数中的JVM堆内存大小，如在测试环境，请注意修改这些参数中的-Xms -Xms -Xmn值符合当前主机环境，如堆内存值配置过大超过系统可用内存，会导致服务启动失败</em></p>
<p>3、yarn-site.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base01:11001,e3base02:11001,e3base03:11001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>/chunk1/yarn/local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>/chunk1/yarn/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.admin.acl<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span>     </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoop-yarn/aggrelogs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、fair-scheduler.xml文件配置</p>
<p>集群总容量/内核数量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">queue</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">minResources</span>&gt;</span>1024 mb, 1 vcores<span class="tag">&lt;/<span class="name">minResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxResources</span>&gt;</span>40960 mb, 40 vcores<span class="tag">&lt;/<span class="name">maxResources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">queue</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">minResources</span>&gt;</span>1024 mb, 1 vcores<span class="tag">&lt;/<span class="name">minResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maxResources</span>&gt;</span>40960 mb, 40 vcores<span class="tag">&lt;/<span class="name">maxResources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、主机间同步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp yarn-env.sh yarn-site.xml fair-scheduler.xmle3base02:&#x2F;e3base&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;</span><br><span class="line">scp yarn-env.sh yarn-site.xml fair-scheduler.xmle3base03:&#x2F;e3base&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure>
<p>6、在mapred-env.sh中增加配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/e3base/hadoop</span><br><span class="line">export E3_INFO_HOME=/e3base/e3-info</span><br><span class="line">export HADOOP_MAPRED_LOG_DIR=$E3_INFO_HOME/hadoop/logs</span><br></pre></td></tr></table></figure>
<p>7、mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>e3base02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;mapreduce.jobhistory.hostname&#125;:13021<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;mapreduce.jobhistory.hostname&#125;:13022<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>/mr-history/idone<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>/mr-history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Mapreduce.jobhistory.hostname 填写jobhistory服务主机名</p>
</li>
<li><p>mapreduce.jobhistory.address：MapReduce JobHistory Server地址，地址形式为 主机地址：端口。（注：如部署Jobhistory服务主机处于内外网环境，需配置主机地址为0.0.0.0）在YARN中执行MR代码时，作业向该服务汇报作业的执行历史，从而记录作业的执行信息，供查询用。</p>
</li>
<li><p>mapreduce.jobhistory.webapp.address：MapReduce JobHistory Server Web UI地址。通过web页面查看MR执行状态的地址。配置方式同上。</p>
</li>
<li><p>mapreduce.jobhistory.intermediate-done-dir：MapReduce作业产生的日志存放位置</p>
</li>
<li><p>mapreduce.jobhistory.done-dir：MR JobHistory Server管理的日志的存放位置</p>
</li>
</ul>
<p>8、<strong>yarn启动</strong></p>
<p>（1） 与hdfs同时启动集群</p>
<p>在hadoop active namenode主机上执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-all.sh  </span><br></pre></td></tr></table></figure>
<p>启动hdfs和yarn，若配置了zookeeper，同时启动zkfc</p>
<p>（2）在主管理节点上运行下面指令，仅启动YARN</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure>
<p>（3）在resourcemanager节点启动jobhistoryserver进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mr-jobhistory-daemon.sh start historyserver </span><br></pre></td></tr></table></figure>
<p>（4） 在YARN中的两个管理节点分别启动resourcemanager进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure>
<p>（5） 在YARN集群中的每个计算节点启动nodemanager进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>
<p>（6） 启动YARN所有nodemanager节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn-daemons.sh start nodemanager</span><br></pre></td></tr></table></figure>
<p><em>注：YARN的HA启动在主resourcemanager节点执行<code>start-yarn.sh</code>后，在备节点执行<code>yarn-daemon.sh start resourcemanager</code></em></p>
<p>9、<strong>yarn停止</strong></p>
<p>（1） 与hdfs同时停止hdfs集群</p>
<p>在hadoop active namenode主机e3base01上执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh  </span><br></pre></td></tr></table></figure>
<p>（2） 在主管理节点上运行下面指令，仅停止YARN</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure>
<p>（3） 在namenode的备节点停止jobhistoryserver进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mr-jobhistory-daemon.sh stop historyserver </span><br></pre></td></tr></table></figure>
<p>（4） 在YARN中的两个管理节点分别停止resourcemanager进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn-daemon.sh stop resourcemanager</span><br></pre></td></tr></table></figure>
<p>（5） 在YARN集群中的每个计算节点停止nodemanager进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn-daemon.sh stop nodemanager</span><br></pre></td></tr></table></figure>
<p>（6） 停止YARN所有nodemanager节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn-daemons.sh stop nodemanager</span><br></pre></td></tr></table></figure>
<p>10、yarn进程查看</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">主机</th>
<th style="text-align:center">进程名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">在$HADOOP_HOME/etc/hadoop/slaver中对应主机上查看</td>
<td style="text-align:center">NodeManager</td>
</tr>
<tr>
<td style="text-align:center">在主管理节点</td>
<td style="text-align:center">ResourceManager</td>
</tr>
</tbody>
</table>
</div>
<p>11、yarn指令执行</p>
<p>在YARN集群中的任意一个节点中执行下列指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn rmadmin -getServiceState rm1</span><br><span class="line"></span><br><span class="line">yarn rmadmin -getServiceState rm2</span><br></pre></td></tr></table></figure>
<p>返回的结果是active或者stanby。只有且必须是两种状态之一，否则YARN工作不正常。</p>
<p>查看YARN集群的节点状态。执行下列指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn node -list -all</span><br></pre></td></tr></table></figure>
<p>若返回的节点数量和集群中的$HADOOP_HOME/etc/hadoop/slave的主机一样且显示RUNNING状态，则YARN的计算节点工作正常</p>
<p>查看所有任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn application -list</span><br></pre></td></tr></table></figure>
<p>12、监控页面<a href="http://${yarn.resourcemanager.rm1}:8088">http://${yarn.resourcemanager.rm1}: 1</a>3006</p>
<img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220721123948884.png" class title="image-20220721123948884">
<p>13、运行wordcount示例：</p>
<p>（1）创建几个HDFS目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /zwl/wordcount （输入数据源目录）</span><br><span class="line"></span><br><span class="line">hadoop fs -mkdir -p /output/     （输出结果目录）</span><br></pre></td></tr></table></figure>
<p>2.创建源数据文件 vi inputword </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello abountyun</span><br><span class="line"></span><br><span class="line">hello master</span><br><span class="line"></span><br><span class="line">hello slave</span><br><span class="line"></span><br><span class="line">hello slave</span><br><span class="line"></span><br><span class="line">abountyun first</span><br></pre></td></tr></table></figure>
<p>3.将本地文件上传到HDFS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put inputword /zwl/wordcount</span><br></pre></td></tr></table></figure>
<p>查看文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -text /zwl/wordcount/inputword</span><br></pre></td></tr></table></figure>
<p>（4） 执行mapreduce程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /e3base/hadoop/share/hadoop/mapreduce</span><br><span class="line"></span><br><span class="line">hadoop jar ./hadoop-mapreduce-examples-2.6.0-cdh5.14.0.jar wordcount /zwl/wordcount  /output/wordcount  </span><br></pre></td></tr></table></figure>
<p>等待执行完毕</p>
<p>（5）查看输出结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -text /output/wordcout/part-r-00000</span><br></pre></td></tr></table></figure>
<p>运行过程如下：</p>
<img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220721125506134.png" class title="image-20220721125506134">
<p>输出内容如下：</p>
<img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220721125820845.png" class title="image-20220721125820845">
<p>访问<a href="http://ResourceManager主机ip:13006/">http://ResourceManager主机ip:13006/</a> 可查看任务执行情况</p>
<img src="/2022/07/15/Hadoop%E5%AE%9E%E6%93%8D%E6%A6%82%E8%BF%B0/image-20220721125417043.png" class title="image-20220721125417043">
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce与Yarn概述</title>
    <url>/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<ul>
<li>MapReduce<ul>
<li>分而治之思想</li>
<li>设计构思</li>
<li>官方示例</li>
<li>执行流程</li>
</ul>
</li>
<li>YARN<ul>
<li>介绍</li>
<li>架构组件</li>
<li>程序提交交互流程</li>
<li>调度器</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><h2 id="分而治之思想"><a href="#分而治之思想" class="headerlink" title="分而治之思想"></a>分而治之思想</h2><ul>
<li>Map：第一阶段，负责”拆分”</li>
<li>Reduce：第二阶段，负责合并</li>
</ul>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718080415700.png" class title="image-20220718080415700">
<h2 id="设计构思"><a href="#设计构思" class="headerlink" title="设计构思"></a>设计构思</h2><p>（1）如何对付大数据处理场景-&gt;分而治之</p>
<p>（2）构建抽象编程模型：</p>
<ul>
<li>map：对一组数据元素进行某种重复式的处理</li>
<li>reduce：对Map的中间结果进行某种进一步处理的结果</li>
</ul>
<p>（3）统一架构、隐藏底层细节</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="分布式计算"><a href="#分布式计算" class="headerlink" title="分布式计算"></a>分布式计算</h3><img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718081059425.png" class title="image-20220718081059425">
<p>MapReduce：分布式计算框架</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>易于编程（提供了许多二次开发的接口）</li>
<li>良好的扩展性（可以随节点数目增长保持近似于线性的增长）</li>
<li>高容错性（故障转移）</li>
<li>适合海量数据的离线处理</li>
</ul>
<h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul>
<li>实时计算性能差</li>
<li>不能进行流式计算（针对静态数据集）</li>
</ul>
<h3 id="MapReduce实例进程"><a href="#MapReduce实例进程" class="headerlink" title="MapReduce实例进程"></a>MapReduce实例进程</h3><p>一个完整的MapReduce程序在分布式运行时有三类</p>
<ul>
<li>MRAppMaster：负责整个MR程序的过程调度及状态协调</li>
<li>MapTask：负责map阶段的整个数据处理流程</li>
<li>RedeuceTask：负责reduce阶段的整个数据处理流程</li>
</ul>
<h3 id="阶段组成"><a href="#阶段组成" class="headerlink" title="阶段组成"></a>阶段组成</h3><p>一个MapReduce编程模型中只能包含一个Map阶段和一个Reduce阶段，或者只有Map阶段</p>
<p>如果用户的业务逻辑非常复杂，那就只能多个MapReduce程序串行运行</p>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718104355598.png" class title="image-20220718104355598">
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>整个MapReduce编程中，数据都是以kv键值对的形式流转的</p>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718104525027.png" class title="image-20220718104525027">
<h2 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h2><img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718105339150.png" class title="image-20220718105339150">
<p>示例程序路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;export&#x2F;server&#x2F;hadoop-3.3.0&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;s</span><br></pre></td></tr></table></figure>
<p>示例程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop-mapreduce-examples-3.3.0.jar</span><br></pre></td></tr></table></figure>
<p>MapReduce程序提交命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop jar|yarn jar] hadoop-mapreduce-examples-3.3.0.jar args...</span><br></pre></td></tr></table></figure>
<p>提交到哪里去？</p>
<p>提交到YARN集群上分布式执行</p>
<ul>
<li><p>评估pi的值（Monte Carlo)</p>
<ul>
<li>第一个参数：pi</li>
<li>第二个参数：指定map阶段运行的任务task次数，并发度</li>
<li>第三个参数：指定每个map任务取样的个数</li>
</ul>
</li>
<li><p>WordCount概述</p>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718141737534.png" class title="image-20220718141737534">
<ul>
<li>map阶段的核心：把输入的数据经过切割，全部标记为1，因此输出就是&lt;单词，1&gt;</li>
<li>shuffle阶段核心：经过MR程序内部自带默认的排序分组等功能，把key相同的单词会作为一个数据构成新的kv对</li>
<li>reduce阶段核心：处理shuffle完的一组数据，该组数据就是该单词所有的键值对。对所有的1进行累加求和，就是单词的总次数</li>
</ul>
<p>第一个参数：wordcount</p>
<p>第二个参数：/input 输入路径</p>
<p>第三个参数：/output输出路径（提前不存在）</p>
</li>
</ul>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><h3 id="Map阶段执行过程"><a href="#Map阶段执行过程" class="headerlink" title="Map阶段执行过程"></a>Map阶段执行过程</h3><ul>
<li><p>第一阶段：输入文件<strong>逻辑切片</strong>：</p>
<p>默认Split size = Block size（128M），每个切片由一个MapTask处理</p>
</li>
<li><p>第二阶段：对切片中的数据按照一定的规则读取解析返回kv对</p>
<p>默认是<strong>按行读取数据</strong></p>
</li>
<li><p>第三阶段：调用Mapper类中的<strong>map方法处理数据</strong></p>
<p>没读取解析出来的一个kv对，调用一次map方法</p>
</li>
<li><p>第四阶段：按照一定的规则对Map输出的键值对进行<strong>分区partition</strong>。默认不分区，因为只有一个reducetask。分区的数量就是reducetask运行的数量</p>
</li>
<li><p>第五阶段：Map输出数据写入<strong>内存缓冲区</strong>，达到比例溢出到磁盘上。<strong>溢出spill</strong>的时候根据key进行<strong>排序sort</strong>。默认根据key字典序排序</p>
</li>
<li><p>第六阶段：对所有溢出文件进行最终的<strong>merge合并</strong>，成为一个文件</p>
</li>
</ul>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718143615252.png" class title="image-20220718143615252">
<h3 id="Reduce阶段执行过程"><a href="#Reduce阶段执行过程" class="headerlink" title="Reduce阶段执行过程"></a>Reduce阶段执行过程</h3><ul>
<li>第一阶段：ReduceTask会主动从MapTask<strong>复制拉取</strong>属于需要自己处理的数据</li>
<li>第二阶段：把拉取来数据，全部进行<strong>合并merge</strong>，即把分散的数据合并一个大的数据。再对合并后的数据<strong>排序</strong></li>
<li>第三阶段：对排序后的键值<strong>对调用reduce方法</strong>。<strong>键相等</strong>的键值对调用一次reduce方法。最后把这些输出的键值对写入到HDFS文件中</li>
</ul>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718143658375.png" class title="image-20220718143658375">
<h3 id="shuffle机制"><a href="#shuffle机制" class="headerlink" title="shuffle机制"></a>shuffle机制</h3><p><strong>shuffle</strong>：将map端的无规则输出按指定的规则”打乱”成具有一定规则的数据，以便reduce端接收处理</p>
<p>一般把从<strong>Map产生输出开始</strong>到<strong>Reduce取得数据作为输入之前</strong>的过程称作shuffle</p>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718145544304.png" class title="image-20220718145544304">
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718145612518.png" class title="image-20220718145612518">
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718145752302.png" class title="image-20220718145752302">
<h1 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h1><p>YARN(Yet Anoter Resource Negotaitar） 另一种资源协调者</p>
<p>一个<strong>通用资源管理系统</strong>和<strong>调度平台</strong></p>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718204916552.png" class title="image-20220718204916552">
<ul>
<li>资源管理系统：集群的硬件资源，和程序运行相关，比如内存、CPU等</li>
<li>调度平台：多个程序同时申请资源如何分配，调度算法</li>
<li>通用：不仅支持MapReduce程序，理论上支持各种计算程序</li>
</ul>
<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>YARN3大组件：</p>
<ul>
<li><p>ResourceManager（RM）</p>
<p>YARN集群中的主角色，资源分配的最终权限，最终仲裁者</p>
</li>
<li><p>NodeManager（NM）</p>
<p>YARN中的从角色，负责管理本机器上的计算资源</p>
<p>根据RM命令。启动Container容器、监视容器的资源使用情况，并向RM汇报资源使用情况</p>
</li>
<li><p>ApplicationMaster(App Mstr)（AM）</p>
<p>用户提交的每个应用程序均包含一个AM</p>
<p>应用程序内的”老大”，负责程序内部各阶段的资源申请，监督程序的执行情况</p>
<p>例如：MRApplicationMaster-&gt;MapReduce程序 AM</p>
</li>
</ul>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718205913123.png" class title="image-20220718205913123">
<ul>
<li>Client</li>
<li>Containe容器（资源的抽象）</li>
</ul>
<h2 id="核心交互流程"><a href="#核心交互流程" class="headerlink" title="核心交互流程"></a>核心交互流程</h2><ul>
<li>MR作业提交 Client-&gt;RM</li>
<li>资源的申请 MRAppMaster-&gt;RM</li>
<li>MR作业状态汇报 Container（Map|Reduce Task）-&gt;Container（MrAppMaster）</li>
<li>节点的状态汇报 NM-&gt;RM</li>
</ul>
<h3 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h3><ul>
<li>第一阶段：客户端申请资源启动运行本次程序的ApplicationMaster</li>
<li>第二阶段：由ApplicationMaster根据本次程序内部具体情况，为它申请资源，并监控它的整个运行过程，直到运行完成</li>
</ul>
<h3 id="MR提交YARN交互流程"><a href="#MR提交YARN交互流程" class="headerlink" title="MR提交YARN交互流程"></a>MR提交YARN交互流程</h3><img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718211746947.png" class title="image-20220718211746947">
<ol>
<li><p>用户通过客户端向YARN中<strong>RM</strong>提交应用程序（比如hadoop jar）</p>
</li>
<li><p>RM为该应用程序<strong>分配第一个Container</strong>，并与对应的<strong>NM通信</strong>，要求它在这个Container中启动这个应用程序的AM</p>
</li>
<li>AM启动成功后，首先向RM<strong>注册并保持通信</strong>，这样用户可直接通过RM查看应用程序的运行状态</li>
<li>AM为本次程序内部各个Task任务向RM<strong>申请资源</strong>，并<strong>监控</strong>它的运行状态</li>
<li>一旦AM申请到资源后，便于对应的NM通信，要求启动任务</li>
<li>NM为任务设置后运行环境后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务</li>
<li>各个任务通过某个RPC协议向AM汇报自己的状态和进度，已让AM随时掌握各个任务的运行状态，从而可以在任务失败时重启任务。在应用程序运行过程中，用户可随时通过RPC向AM查询应用程序的当前运行状态</li>
<li>应用程序运行完成后，AM向RM注销并关闭自己</li>
</ol>
<h2 id="资源调度器Scheduler"><a href="#资源调度器Scheduler" class="headerlink" title="资源调度器Scheduler"></a>资源调度器Scheduler</h2><p>Scheduler：根据一些定义的策略为应用程序分配资源，是RM的核心组件之一</p>
<p>调度器策略：</p>
<p>（yarn-site.xml-&gt;yarn.resourcemanager.scheduler.class）</p>
<ul>
<li>FIFO </li>
<li>Capacity（default）</li>
<li>Fair</li>
</ul>
<img src="/2022/07/18/MapReduce%E4%B8%8EYarn%E6%A6%82%E8%BF%B0/image-20220718213345315.png" class title="image-20220718213345315">
]]></content>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>ITN_Internet(1)</title>
    <url>/2021/08/15/ITN-Internet/</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>这是我在<strong>思科平台</strong>上学习的“网络简介”课程。</p>
<p>这里展示我的学习笔记，较精简地总结了其相关知识。</p>
<p>本课程主要介绍内容可分为一下三个方面：</p>
<ul>
<li>互联网以及其他计算机网络的体系结构、架构、功能呢、组件和模型</li>
<li>IP寻址的原则和结构</li>
<li>以太网的概念、介质和操作</li>
</ul>
<span id="more"></span>
<h1 id="第一章-当今网络"><a href="#第一章-当今网络" class="headerlink" title="第一章 当今网络"></a>第一章 当今网络</h1><h2 id="内容大纲："><a href="#内容大纲：" class="headerlink" title="内容大纲："></a>内容大纲：</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>主题标题</strong></th>
<th style="text-align:left">主题目标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>网络组件</strong></td>
<td style="text-align:left">说明主机和网络设备的用途。</td>
</tr>
<tr>
<td style="text-align:left"><strong>网络表示方式和网络拓扑</strong></td>
<td style="text-align:left">说明网络的表示方式，以及这些表示方式在网络拓扑中的 具体运用。</td>
</tr>
<tr>
<td style="text-align:left"><strong>常见网络类型</strong></td>
<td style="text-align:left">比较各类常见网络的特征。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Internet 连接</strong></td>
<td style="text-align:left">说明 LAN（局域网）和 WAN（广域网）连接互联网的方式。</td>
</tr>
<tr>
<td style="text-align:left"><strong>可靠网络</strong></td>
<td style="text-align:left">描述可靠网络的四个基本要求。</td>
</tr>
<tr>
<td style="text-align:left"><strong>网络趋势</strong></td>
<td style="text-align:left">说明 BYOD（自带设备）、在线协作、视频和云 计算等新兴趋势如何改变人们的互动方式。</td>
</tr>
<tr>
<td style="text-align:left"><strong>网络安全</strong></td>
<td style="text-align:left">明确网络普遍面临的一些基本安全威胁及相关解决方案。</td>
</tr>
</tbody>
</table>
</div>
<p>Packet Tracer入门详见<a href="https://www.bilibili.com/video/BV1Xb411Y7i7?from=search&amp;seid=7592654199180219167">https://www.bilibili.com/video/BV1Xb411Y7i7?from=search&amp;seid=7592654199180219167</a></p>
<h2 id="01-网络组件"><a href="#01-网络组件" class="headerlink" title="01 网络组件"></a>01 网络组件</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>主机：所有直接参与网络通信的连接到网络的计算机，还被称为终端设备，某些主机也称为客户端。</p>
<p>IP地址：互联网协议地址，是一串数字，用来表示特定网络的主机。</p>
<p>服务器：装有特殊软件，可以为网络上其他终端设备提供信息（比如电子邮件或网页）的计算机。</p>
<p>终端设备：终端设备是指通过网络传输的消息的来源或目的地。</p>
<p>中间设备：中间设备可以将单个终端连接到网络中。它们可以将多个独立的网络连接起来，形成互联网络。这些中间设备提供连接并确保数据在网络中传输。例如：无线路由器、LAN交换机、路由器、多层交换机、防火墙设备。</p>
<p>中间网络设备执行以下部分或全部功能：</p>
<ul>
<li>重新生成并传输通信信号</li>
<li>维护有关网络和互联网络中存在哪些路径的信息</li>
<li>将错误和通信故障通知其他设备</li>
<li>发生链路故障是按照备用路径转发数据</li>
<li>根据优先级被分类和转发消息</li>
<li>根据安全设置允许或拒绝数据的通行</li>
</ul>
<p>Web浏览器是典型的客户端软件，一台计算机也可以运行多种类型的客户端软件，从而同一时间可实现多种多样的交互功能。</p>
<h3 id="对等网络"><a href="#对等网络" class="headerlink" title="对等网络"></a>对等网络</h3><p>对等网络：客户端和服务器软件通常运行在单独的服务器上，但一台计算机也可以同时兼任两个角色。在小企业和家庭中，许多计算机在网络中既是服务器又是客户端。这种网络称为对等网络。</p>
<p>栗子：传输文件，文件共享</p>
<h3 id="网络介质"><a href="#网络介质" class="headerlink" title="网络介质"></a>网络介质</h3><p>通信通过介质在网络上传输。介质为消息从源设备传送到目的设备提供了通道。</p>
<p>现代网络中三大主要的连接设备的介质：</p>
<ul>
<li>金属线电缆（电脉冲）</li>
<li>玻璃或塑料光纤（光脉冲）</li>
<li>无线传输（特定频率的电磁波）</li>
</ul>
<p>安装时选择介质标准：</p>
<ul>
<li>传送信号最大距离</li>
<li>安装环境</li>
<li>必须传输数据量和速率</li>
<li>安装成本</li>
</ul>
<h2 id="02-网络表示方式和网络拓扑"><a href="#02-网络表示方式和网络拓扑" class="headerlink" title="02 网络表示方式和网络拓扑"></a>02 网络表示方式和网络拓扑</h2><h3 id="网络表示方式"><a href="#网络表示方式" class="headerlink" title="网络表示方式"></a>网络表示方式</h3><p>网络图通过使用图标（如图所示）来表示构成网络的不同设备和连接。</p>
<p><img src="/2021/08/15/ITN-Internet/01.png" alt="01"></p>
<p>用来描述这些设备和介质是如何连接的术语：</p>
<ul>
<li><strong>网络接口卡（NIC/网卡）</strong>：是一块被设计用来允许计算机在计算机玩过上进行通讯的计算机硬件</li>
<li><strong>物理端口</strong>：网络设备上的接口或插口，介质通过它连接到终端设备或其他网络设备</li>
<li><strong>接口</strong>：网络设备上连接到独立网络的专用端口。由于路由器连接了不同网络，路由器上的端口称为网络接口（端口和接口可不做区分啦）</li>
</ul>
<h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p>图可以让人轻松了解大型网络中的设备连接方式，这种图被称为“拓扑谱图”，其可提供直观的网络连接图。</p>
<p>有两种类型的拓扑图，物理图和逻辑图。</p>
<p><strong>物理拓扑图</strong>：</p>
<p>说明了中间设备和电缆安装的物理位置。</p>
<p><img src="/2021/08/15/ITN-Internet/02.png" alt="02"></p>
<p><strong>逻辑拓扑图</strong>：</p>
<p>说明了设备、端口和网络的编址方案。</p>
<p>如图，可以看到哪些终端设备连接到哪些终端设备以及正在使用哪些介质。</p>
<p><img src="/2021/08/15/ITN-Internet/03.png" alt="03"></p>
<h2 id="03-常见网络类型"><a href="#03-常见网络类型" class="headerlink" title="03 常见网络类型"></a>03 常见网络类型</h2><h3 id="多种规模的网络"><a href="#多种规模的网络" class="headerlink" title="多种规模的网络"></a>多种规模的网络</h3><p>网络没有大小限制。它们的范围可以是小到两台计算机组成的简易网络，也可以是大到连接数百万台设备的超级网络。</p>
<p>类型主要有四种：</p>
<ul>
<li>小型家庭网络：将少量的几台计算机互联并将它们连接到互联网。</li>
<li>小型办公室/家庭办公室网络：可让一个家庭办公室或远程办公室内的计算机连接到企业网络或访问集中的共享资源。</li>
<li>大中型网络：可能有许多站点，包含成百上千台相互连接的主机。</li>
<li>全球网络：互联网是由网络组成的网络，连接全球亿万台计算机。</li>
</ul>
<h3 id="LAN和WAN"><a href="#LAN和WAN" class="headerlink" title="LAN和WAN"></a>LAN和WAN</h3><p>两种最常见的网络基础设施类型是局域网 (LAN) 和广域网 (WAN)。</p>
<p>如图显示了连接到广域网的局域网。</p>
<p><img src="/2021/08/15/ITN-Internet/04.png" alt="04"></p>
<p><strong>LAN</strong>：</p>
<p>LAN 是覆盖较小地理区域的网络基础设施。</p>
<p>局域网具有如下特点:</p>
<ul>
<li>LAN 在<strong>有限区域</strong>（如家庭、学校、办公大楼或园区）内互连终端设备。</li>
<li>LAN 通常<strong>由一个组织或个人管理</strong>。实行网络级管控、安全控制并制定访问控制策略。</li>
<li>LAN 为内部终端设备和中间设备<strong>提供高速带宽</strong>，如图所示。</li>
</ul>
<p><strong>WAN</strong>：</p>
<p>WAN 是覆盖广泛地理区域的网络基础设施。WAN 通常由服务提供商 (SP) 或互联网服务提供商 (ISP) 管理。</p>
<p>WAN 具有如下特点:</p>
<ul>
<li>WAN <strong>互连广泛地理区域</strong>（例如各大城市、州、省、国家/地区或大陆之间）<strong>内的 LAN</strong>。</li>
<li>WAN 通常<strong>由多个服务提供商管理</strong>。</li>
<li>WAN 通常提供 <strong>LAN 之间</strong>的<strong>较慢链路</strong>。（内部快，外部慢）</li>
</ul>
<h3 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h3><p>互联网是一个遍及全球的互相连接的网络（简称互联网络或互联网）的集合。</p>
<p>一些 LAN 示例通过 WAN 连接相互连接。然后 WAN 彼此连接。</p>
<p>互联网不属于任何个人或团体。要确保通过这种多元化基础设施有效通信，需要采用<strong>统一的公认技术和标准</strong>，也需要众多<strong>网络管理机构</strong>相互协作。</p>
<h3 id="内部网和外联网"><a href="#内部网和外联网" class="headerlink" title="内部网和外联网"></a>内部网和外联网</h3><p><strong>内部网</strong>：</p>
<p>表示一个组织的私有LAN和WAN连接。</p>
<p>仅允许该组织的成员、员工或其他获得授权的人员进行访问。</p>
<p><strong>外联网</strong>：</p>
<p>组织可以使用外联网为在其他组织工作。如供应商、客户、协作者。</p>
<p><img src="/2021/08/15/ITN-Internet/05.png" alt="05"></p>
<h2 id="04-Internet连接"><a href="#04-Internet连接" class="headerlink" title="04 Internet连接"></a>04 Internet连接</h2><h3 id="Internet-访问技术"><a href="#Internet-访问技术" class="headerlink" title="Internet 访问技术"></a>Internet 访问技术</h3><p>现在说明客户和组织如何实际连接到互联网。</p>
<p><strong>客户</strong>（家庭用户、远程工作者、小型办公室）通常需要连接互联网服务供应商（ISP）才能访问互联网。不同ISP和地理位置的连接选项各不相同。常见服务：宽带电缆、宽带数字用户线路、无线WAN和移动服务。</p>
<p><img src="/2021/08/15/ITN-Internet/06.png" alt="06"></p>
<p><strong>组织</strong>通常需要访问企业站点和互联网。企业可能需要更高带宽、专用带宽和托管服务。服务提供商 （SP）提供企业互联。常见企业级服务：业务DSL、租用线路和城域以太网。</p>
<p><img src="/2021/08/15/ITN-Internet/07.png" alt="07"></p>
<p>一些解释：</p>
<ul>
<li><p><strong>DSL</strong> ：数字用户线也可提供高带宽、高可用性和始终在线的互联网连接。DSL 通过电话线路运行。</p>
</li>
<li><p><strong>蜂窝网</strong>：蜂窝网互联网接入使用手机网络进行连接。只要您能收到蜂窝网信号，就能获得蜂窝网互联网接入。性能会受手机功能和手机基站的限制。</p>
</li>
<li><strong>城域以太网</strong> ：有时被称为以太网 WAN. 在本模块中，我们把它称为城域以太网。城域以太网将 LAN 访问技术扩展到 WAN 中。以太网是一种 LAN 技术，您将在后面的模块中学习。</li>
</ul>
<h3 id="融合网络"><a href="#融合网络" class="headerlink" title="融合网络"></a>融合网络</h3><p>就理解为由各个独立的网络（计算机网络、电话网络、广播网络）（互不连通）融合在了一起。</p>
<p>与专用网络不同，融合网络能够通过相同的网络基础设施，在许多不同类型的设备之间传输数据、语音和视频。此网络基础设施采用<strong>一组相同的规则、协议和实施标准</strong>。融合数据网络在一个网络中传送多种服务。</p>
<p>融合数据网络在一个网络中承载多种服务。</p>
<h2 id="05-可靠网络"><a href="#05-可靠网络" class="headerlink" title="05 可靠网络"></a>05 可靠网络</h2><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><p>网络架构需要解决的一下四个基本特性：</p>
<ul>
<li>容错能力</li>
<li>可扩展性</li>
<li>服务质量（QoS）</li>
<li>安全性</li>
</ul>
<h3 id="容错能力"><a href="#容错能力" class="headerlink" title="容错能力"></a>容错能力</h3><p>容错网络是在发生故障时限制受影响设备数量的网络。</p>
<p>这种网络能在发生故障是快速恢复，其依赖于消息的源与目的地之间的多条路径。</p>
<p>如果一条路径失败，消息将立即通过不同的链路发送。有多条路径到达目的地被称为<strong>冗余</strong>。</p>
<p>实施<strong>分组交换网络</strong>是可靠网络提供冗余的一种方法。</p>
<p>分组交换：分组交换将流量分割成通过共享网络发送的数据包。单个消息，例如一份电子邮件或一段视频流，会分割成多个消息块，称为数据包。每个数据包拥有所需的消息源和目的地的编址信息。网络内的路由器基于当前的网络状况交换数据包。</p>
<p>这意味着，单个消息中的所有数据包中，可采用完全不同的路径到达目的地。所有某一条链路发生故障，路由器动态改变路由时，用户并没有发觉而且没有受到影响。</p>
<p><img src="/2021/08/15/ITN-Internet/08.png" alt="08"></p>
<h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><p>可扩展的网络可快速拓展，以支持新用户和应用程序。</p>
<p>网络具有扩展能力，因为设计人员可以遵循广为接受的标准和协议。这使得软件和硬件供应商可以集中精力改进产品和服务，而无需为在网络内的运行设计一套新的规则。</p>
<p><img src="/2021/08/15/ITN-Internet/09.png" alt="09"></p>
<h3 id="服务质量"><a href="#服务质量" class="headerlink" title="服务质量"></a>服务质量</h3><p>当带宽需求超过可用量时，就会造成拥塞。</p>
<p>如果流量规模大于可通过网络传输的量（出现拥塞），设备会将数据包保存在内存中，直至有资源可以传输它们。这就是网络服务质量（QoS）策略。QoS 成为了用于管理拥塞和确保向所有用户可靠传输内容的主要机制。</p>
<p>下图以一个视频通话（语音、图像）的例子来说明优先级：</p>
<p><img src="/2021/08/15/ITN-Internet/10.png" alt="10"></p>
<h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><p>网络基础设施、服务以及联网设备上的数据是极为重要的个人和企业资产。网络管理员必须解决两种网络安全问题：<strong>网络基础设施安全</strong>和<strong>信息安全</strong>。</p>
<ul>
<li>网络基础设施安全：</li>
</ul>
<p>一方面要保护提供网络连接的设备的安全，另一方面要防止有人未经授权访问网络上的管理软件。</p>
<p><img src="/2021/08/15/ITN-Internet/11.png" alt="11"></p>
<ul>
<li>信息安全：</li>
</ul>
<p><strong>机密性</strong> - 意味着只有预定和授权收件人可以访问并读取数据。</p>
<p><strong>完整性</strong> - 表示保证信息在从源到目的地的传输过程中不会被更改。</p>
<p><strong>可用性</strong> - 表示保证授权用户及时可靠地访问数据服务。</p>
<h2 id="06-网络趋势"><a href="#06-网络趋势" class="headerlink" title="06 网络趋势"></a>06 网络趋势</h2><h3 id="近期趋势"><a href="#近期趋势" class="headerlink" title="近期趋势"></a>近期趋势</h3><ul>
<li>自带设备（BYOD）：任何设备以任何方式连接到任何内容的概念是一种全球趋势。BYOD 使最终用户能够自由地使用个人工具通过企业或园区网络访问信息和相互通信。</li>
<li>在线协作</li>
<li>视频通信</li>
<li><p>云计算：云计算是我们访问和存储数据的方式之一，包含有如公有、私有、社区和混合云。</p>
</li>
<li><p>家庭中：智能家居。</p>
</li>
<li>电力线网络：使用电源插座将设备连接到网络。通过使用供电的同一线路，电力线网络通过按一定频率发送数据来发送信息。</li>
<li>无线宽带：这个解决方案与智能手机使用了相同的蜂窝技术。无线互联网服务提供商 (WISP) 是使用类似家庭无线局域网 (WLAN) 的无线技术，将用户连接到专用的接入点或热点的 ISP。</li>
</ul>
<h2 id="07-网络安全"><a href="#07-网络安全" class="headerlink" title="07 网络安全"></a>07 网络安全</h2><h3 id="安全威胁"><a href="#安全威胁" class="headerlink" title="安全威胁"></a>安全威胁</h3><p>网络常见几种外部威胁：</p>
<ul>
<li>病毒、蠕虫和特洛伊木马：在用户设备上运行的恶意软件或代码</li>
<li>间谍软件和广告软件</li>
<li>零日攻击：在出现漏洞的第一天发起的攻击</li>
<li>威胁发起者攻击</li>
<li>拒绝服务攻击：使网络设备上的应用和进程减缓或崩溃的攻击</li>
<li>数据拦截和盗窃</li>
<li>身份盗窃</li>
</ul>
<p>内部威胁：</p>
<ul>
<li>设备丢失或失窃</li>
<li>员工意外误用</li>
<li>企业环境中员工的恶意行为</li>
</ul>
<h3 id="安全解决方案"><a href="#安全解决方案" class="headerlink" title="安全解决方案"></a>安全解决方案</h3><p><strong>家庭或小型办公室</strong>网络的基本安全组件：</p>
<ul>
<li>防病毒和反间谍软件</li>
<li>防火墙过滤：过滤组织未经授权的进出网络访问</li>
</ul>
<p><strong>企业网络</strong>的基本安全组件：（包括以上两种）</p>
<ul>
<li>专用防火墙系统</li>
<li>访问控制列表（ACL）：基于IP地址和应用程序，进一步过滤访问和流量转发</li>
<li>入侵防御系统（IPS）：识别快速扩散的威胁，例如零日攻击或零小时攻击</li>
<li>虚拟专用网络（VPN）：为远程工作人员提供对组织机构的安全访问</li>
</ul>
<h1 id="第二章-交换机和终端设备的基本配置"><a href="#第二章-交换机和终端设备的基本配置" class="headerlink" title="第二章 交换机和终端设备的基本配置"></a>第二章 交换机和终端设备的基本配置</h1><h2 id="内容大纲：-1"><a href="#内容大纲：-1" class="headerlink" title="内容大纲："></a>内容大纲：</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">主题标题</th>
<th style="text-align:left">主题目标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>思科 IOS 访问</strong></td>
<td style="text-align:left">说明如何访问思科 IOS 设备以进行配置。</td>
</tr>
<tr>
<td style="text-align:left"><strong>IOS 导航</strong></td>
<td style="text-align:left">说明如何在思科 IOS 中导航，以配置网络设备。</td>
</tr>
<tr>
<td style="text-align:left"><strong>命令结构</strong></td>
<td style="text-align:left">描述思科 IOS 软件的命令结构。</td>
</tr>
<tr>
<td style="text-align:left"><strong>基本设备配置</strong></td>
<td style="text-align:left">使用 CLI（命令行接口）配置思科 IOS 设备。</td>
</tr>
<tr>
<td style="text-align:left"><strong>保存配置</strong></td>
<td style="text-align:left">使用 IOS 命令来保存当前运行的配置。</td>
</tr>
<tr>
<td style="text-align:left"><strong>端口和地址</strong></td>
<td style="text-align:left">说明设备如何通过网络介质进行通信。</td>
</tr>
<tr>
<td style="text-align:left"><strong>配置 IP 地址</strong></td>
<td style="text-align:left">为主机设备配置 IP 地址。</td>
</tr>
<tr>
<td style="text-align:left"><strong>验证连接</strong></td>
<td style="text-align:left">验证两个终端设备之间的连接。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="01-思科IOS访问"><a href="#01-思科IOS访问" class="headerlink" title="01 思科IOS访问"></a>01 思科IOS访问</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>所有终端设备和网络设备都需要操作系统（OS）。</p>
<p><img src="/2021/08/15/ITN-Internet/12.png" alt="12"></p>
<p><strong>外壳</strong>：允许用户从计算机去请求特定任务的用户界面。这些请求可以通过CLI（命令行界面）或GUI界面发起。</p>
<p><strong>内核</strong>：在计算机的硬件和软件之间进行通信，并对如何使用硬件资源满足软件要求进行管理。</p>
<p><strong>硬件</strong>：计算机的物理组成部分，包括下层的电子元件。</p>
<h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>GUI（比如Windows、OS X、 Apple iOS 或Android）允许用户利用图形图标、菜单和窗口环境和系统交互。GUI用户友好性更高，许多用户都依赖于GUI环境（包括桌面）。</p>
<p>GUI 并不总是能够提供 CLI 上可用的所有功能。GUI 也可能发生故障、崩溃，或者就是无法按照指示运行。因此，通常通过 CLI 访问网络设备。与 GUI 相比，CLI 消耗资源更少，而且非常稳定。</p>
<p>许多思科设备上使用的网络操作系统称为思科互联网络操作系统（IOS）。许多思科路由器和交换机，无论其大小和种类如何，都离不开Cisco IOS。</p>
<p><strong>注意</strong>：家用路由器的操作系统通常称为固件。配置家用路由器的常用方法是使用基于Web浏览器的GUI。</p>
<h3 id="操作系统的用途"><a href="#操作系统的用途" class="headerlink" title="操作系统的用途"></a>操作系统的用途</h3><p>通过GUI，PC操作系统使用户能：</p>
<ul>
<li>使用鼠标选择和运行程序</li>
<li>输入文本或命令</li>
<li>在显示器查看输出</li>
</ul>
<p>基于CLI的操作系统，是网络技术人员能：</p>
<ul>
<li>使用键盘运行基于CLI的网络程序</li>
<li>输入文本或命令</li>
<li>在显示器查看输出</li>
</ul>
<h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><p>默认情况下，交换机将转发流量，无需配置即可工作。例如，连接到同一<strong>新交换机</strong>的两个已配置了的主机能够进行通信。</p>
<p>由于新交换机没有任何初始配置，因此智能通过控制台端口进行配置。</p>
<p>无论新交换机的默认特性如何，都应配置并保护所有交换机。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>方法</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>控制台 (Console)</strong></td>
<td style="text-align:left">这是一种<strong>物理管理端口</strong>，可通过该端口对思科设备进行<strong>带外访问</strong>。带外访问是指通过仅用于设备维护的专用管理通道进行访问。使用控制台端口的优势在于，<strong>即使没有配置任何网络服务，也可以访问设备</strong>，例如执行初始配置时。控制台连接需要运行终端仿真软件的计算机和用于连接设备的<strong>特殊控制台电缆</strong>。</td>
</tr>
<tr>
<td style="text-align:left"><strong>安全外壳(SSH)</strong></td>
<td style="text-align:left">SSH 是一种<strong>带内且被推荐</strong>的方法，它使用<strong>虚拟接口通过网络远程建立安全的 CLI连接</strong>。不同于控制台连接，SSH 连接需要设备上具有有效的<strong>网络服务</strong>，包括配置了地址的有效接口。大部分思科 IOS 版本配备了 SSH 服务器和 SSH 客户端，可用于与其他设备建立 SSH 会话。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Telnet</strong></td>
<td style="text-align:left">Telnet 使用<strong>虚拟接口通过网络远程建立 CLI 会话</strong>，这种带内方法<strong>并不安全</strong>。与 SSH 不同，Telnet 不提供安全的加密连接，只能在实验室环境中使用。用户身份验证、密码和命令通过网络以<strong>明文形式</strong>发送。最好的做法是使用 SSH 而不是 Telnet。思科 IOS 包括 Telnet 服务器和 Telnet 客户端。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意:</strong> 某些设备，比如路由器，还可以支持传统辅助端口，这种辅助端口可使用调制解调器<strong>通过电话连接</strong>远程建立 CLI 会话。类似于控制台连接，<strong>AUX 端口</strong>也是<strong>带外连接</strong>，且不需要配置或提供网络服务。</p>
<h2 id="02-IOS导航"><a href="#02-IOS导航" class="headerlink" title="02 IOS导航"></a>02 IOS导航</h2><h3 id="主要命令模式"><a href="#主要命令模式" class="headerlink" title="主要命令模式"></a>主要命令模式</h3><p>本主体讨论如何用CLI来导航思科IOS。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><strong>命令模式</strong></th>
<th style="text-align:center"><strong>描述</strong></th>
<th style="text-align:left"><strong>默认设备提示符</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>用户 EXEC 模式（用户模式）</strong></td>
<td style="text-align:center">该模式仅允许访问数量有限的基本监控 命令，不允许执行任何可能改变设备配置的命令。它通常被称为“仅查看”模式。</td>
<td style="text-align:left"><code>Switch&gt; Router&gt;</code></td>
</tr>
<tr>
<td style="text-align:center"><strong>特权 EXEC 模式（特权模式/使能模式）</strong></td>
<td style="text-align:center">该模式允许访问所有命令和功能。用户可以使用任何监控命令以及执行配置 和管理命令。较高级别的配置模式，比如全局配置模式，只能通过特权 EXEC 模式访问。</td>
<td style="text-align:left"><code>Switch</code>#<code>、Router</code>#</td>
</tr>
</tbody>
</table>
</div>
<h3 id="配置模式和子配置模式"><a href="#配置模式和子配置模式" class="headerlink" title="配置模式和子配置模式"></a>配置模式和子配置模式</h3><p>用配置设备，用户必须进入全局配置模式。</p>
<p><strong>全局配置模式</strong>由在设备名称之后加(config)#结尾的提示符标识，比如Switch(config)#。</p>
<p>在全局配置模式下，用户可以进入不同的<strong>子配置模式</strong>。</p>
<p>两个常见的子配置模式包括：</p>
<ul>
<li><strong>线路配置模式</strong> - 用于配置控制台、SSH、Telnet 或 AUX 访问。</li>
<li><strong>接口配置模式</strong> - 用于配置交换机端口或路由器网络接口。</li>
</ul>
<p>当使用 CLI 时，每种模式由该模式独有的命令提示符来标识。默认情况下，每个提示符都以设备名称开头。命令提示符中设备名称后的部分用于表明模式。例如，<strong>线路配置模式</strong>的默认提示符是 <strong>Switch(config-line)#</strong> 默认的<strong>接口配置模式</strong>提示符是 <strong>Switch(config-if)#</strong>。</p>
<p><img src="/2021/08/15/ITN-Internet/13.png" alt="13" style="zoom:150%;"></p>
<h3 id="在IOS模式之间导航"><a href="#在IOS模式之间导航" class="headerlink" title="在IOS模式之间导航"></a>在IOS模式之间导航</h3><p>用户模式-&gt;特权模式：<code>enable</code></p>
<p>特权模式-&gt;用户模式：<code>disable</code></p>
<p>进入全局配置模式：<code>configure terminal</code></p>
<p>全局配置模式-&gt;特权模式：<code>exit</code></p>
<p>全局配置模式&lt;-&gt;子配置模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config)# line console 0 &#x2F;&#x2F;进入子配置模式</span><br><span class="line">Switch(conig-line)# exit  &#x2F;&#x2F;返回全局配置模式</span><br><span class="line">Switch(config)#  </span><br></pre></td></tr></table></figure>
<p>全局配置模式的任何自配置模式-&gt;模式层级中的上一级模式：<code>exit</code></p>
<p>子配置模式-&gt;特权模式：<code>end</code>或Ctrl+Z</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config-line)# end</span><br><span class="line">Switch#</span><br></pre></td></tr></table></figure>
<p>行子配置模式-&gt;接口子配置模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(config-line)# interface FastEthernet 0&#x2F;1</span><br><span class="line">Switch(config-if)#</span><br></pre></td></tr></table></figure>
<h2 id="03-命令结构"><a href="#03-命令结构" class="headerlink" title="03 命令结构"></a>03 命令结构</h2><h3 id="基本IOS命令结构"><a href="#基本IOS命令结构" class="headerlink" title="基本IOS命令结构"></a>基本IOS命令结构</h3><p><img src="/2021/08/15/ITN-Internet/14.png" alt="14"></p>
<ul>
<li><strong>关键字</strong> - 这些是在操作系统中定义的特定参数。（在图中为 ip protocols）。</li>
<li><strong>参数</strong> - 这些没有预先定义，它是由用户来定义的值或变量。（在图中为 192.168.10.5）。</li>
</ul>
<h3 id="快捷方式（热键）"><a href="#快捷方式（热键）" class="headerlink" title="快捷方式（热键）"></a>快捷方式（热键）</h3><p>命令和关键字可缩写为可唯一确定该命令或关键字的最短字符数。例如，<strong>configure</strong>命令可缩写为<strong>conf</strong>，因为<strong>configure</strong>是唯一一个以<strong>conf</strong>开头的命令。不能缩写为<strong>con</strong>，因为以<strong>con</strong>开头的命令不止一个。关键字也可缩写。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>键盘输入</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>Tab</strong></td>
<td style="text-align:left">补全部分输入的命令项。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Ctrl-A</strong></td>
<td style="text-align:left">将光标移至行首。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Ctrl-E</strong></td>
<td style="text-align:left">将光标移至命令行尾。</td>
</tr>
<tr>
<td style="text-align:left"><strong>向上箭头</strong> 或 <strong>Ctrl+P</strong></td>
<td style="text-align:left">调出历史记录缓冲区中的命令， 从最近输入的命令开始。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Ctrl+R</strong> 或 <strong>Ctrl+I</strong> 或 <strong>Ctrl+L</strong></td>
<td style="text-align:left">收到控制台消息后重新显示系统提示符和 命令行。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Ctrl-C</strong></td>
<td style="text-align:left">处于任何配置模式下时，用于结束该配置模式并返回 特权模式。处于设置模式下时，用于中止并返回命令 提示符。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Ctrl-Z</strong></td>
<td style="text-align:left">处于任何配置模式下时，用于结束该配置模式并返回 特权模式。</td>
</tr>
<tr>
<td style="text-align:left"><strong>Ctrl-Shift-6</strong></td>
<td style="text-align:left">通用中断序列用于中止 DNS lookup、traceroutes、 <strong>pings</strong>等。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="04-基本设备配置"><a href="#04-基本设备配置" class="headerlink" title="04 基本设备配置"></a>04 基本设备配置</h2><h3 id="设备名称"><a href="#设备名称" class="headerlink" title="设备名称"></a>设备名称</h3><p>名称命名要求：默认主机名应更改为更具描述性的名称。</p>
<ul>
<li>以字母开头</li>
<li>不包含空格</li>
<li>以字母或数字结尾</li>
<li>仅使用字母、数字和破折号</li>
<li>长度少于64个字符</li>
</ul>
<p>CLI命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch# configure terminal</span><br><span class="line">Switch(config)# hostname Sw-Floor-1   &#x2F;&#x2F;全局配置模式下</span><br><span class="line">Sw-Floor-1(config)# no hostname   &#x2F;&#x2F;返回默认提示符</span><br><span class="line">Switch(config)#</span><br></pre></td></tr></table></figure>
<h3 id="密码准则"><a href="#密码准则" class="headerlink" title="密码准则"></a>密码准则</h3><p>使用弱密码或容易被猜到的密码仍然是组织最大的安全问题。网络设备，包括家用无线路由器，应始终配置密码以限制管理访问。</p>
<p>当选择密码时，请使用不容易猜到的强密码。选择密码时请考虑下列关键因素：</p>
<ul>
<li>密码长度应大于 8 个字符。</li>
<li>使用大写字母、小写字母、数字、特殊字符和/或数字序列组合。</li>
<li>避免为所有设备使用同一个密码。</li>
<li>不要使用常用词语，因为这些词语容易被猜到。</li>
</ul>
<h3 id="配置密码"><a href="#配置密码" class="headerlink" title="配置密码"></a>配置密码</h3><p><strong>保护用户EXEC模式的安全：</strong></p>
<p>使用全局配置命令 <strong>line console 0</strong> 进入线路控制台配置模式，0用来代表第一个（而且在多数情况下是唯一的一个）控制台接口。接下来，使用<strong>password</strong> <em>password</em> 命令指定EXEC模式密码。最后，使用login命令启用用户EXEC访问。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1 # configure terminal</span><br><span class="line">Sw-Floor-1(config)# line console 0</span><br><span class="line">Sw-Floor-1(config-line)# password cisco</span><br><span class="line">Sw-Floor-1(config-line)# login</span><br><span class="line">Sw-Floor-1(config-line)# end</span><br><span class="line">Sw-Floor-1#</span><br></pre></td></tr></table></figure>
<p>现在控制台访问需要输入密码，然后才能访问用户 EXEC 模式。</p>
<p>保护特权EXEC访问：</p>
<p>使用<strong>enable secret</strong> <em>password</em>全局配置命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1# configure terminal</span><br><span class="line">Sw-Floor-1(config)# enable secret class</span><br><span class="line">Sw-Floor-1(config)# exit</span><br><span class="line">Sw-Floor-1#</span><br></pre></td></tr></table></figure>
<p>虚拟终端 (VTY) 线路支持通过Telnet或SSH对设备的远程访问。许多思科交换机支持第 0 到 15 的 16 条 VTY 线路。</p>
<p>要保护 VTY 线路的安全，请使用 <strong>line vty 0 15</strong> 全局配置命令进入线路 VTY 模式。接下来，使用<strong>password</strong> <em>password</em> 命令指定VTY密码。最后，使用<strong>login</strong>命令启用 VTY 访问。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1 # configure terminal</span><br><span class="line">Sw-Floor-1(config)# line vty 0 15</span><br><span class="line">Sw-Floor-1(config-line)# password cisco </span><br><span class="line">Sw-Floor-1(config-line)# login </span><br><span class="line">Sw-Floor-1(config-line)# end</span><br><span class="line">Sw-Floor-1#</span><br></pre></td></tr></table></figure>
<h3 id="加密密码"><a href="#加密密码" class="headerlink" title="加密密码"></a>加密密码</h3><p>启动配置文件和运行配置文件以明文显示大多数密码。这会带来安全威胁，因为任何人如果访问这些文件，就可以发现这些密码。</p>
<p><strong>加密所有明文密码：</strong></p>
<p>使用全局配置命令<strong>service password-encryption</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1 # configure terminal</span><br><span class="line">Sw-Floor-1(config)# service password-encryption</span><br><span class="line">Sw-Floor-1(config)#</span><br></pre></td></tr></table></figure>
<p>该命令对所有未加密的密码进行弱加密。这种加密仅适用于配置文件中的密码，而不适用于通过网络发送的密码。</p>
<p>使用<strong>show running-config</strong>命令验证密码现在是否已加密:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1(config)# end</span><br><span class="line">Sw-Floor-1# show running-config</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">!</span><br><span class="line">line con 0</span><br><span class="line"> password 7 0822455D0A16</span><br><span class="line"> login</span><br><span class="line">!</span><br><span class="line">line vty 0 4</span><br><span class="line"> password 7 0822455D0A16</span><br><span class="line"> login</span><br><span class="line">line vty 5 15</span><br><span class="line"> password 7 0822455D0A16</span><br><span class="line"> login</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="横幅消息"><a href="#横幅消息" class="headerlink" title="横幅消息"></a>横幅消息</h3><p>尽管要求用户输入密码是防止未经授权的人员进入网络的有效方法，但同时必须向试图访问设备的人员声明仅授权人员才可访问设备。出于此目的，可向设备输出中加入一条标语。</p>
<p>要在网络设备上创建当日消息标语，请使用<strong>banner motd #</strong>当日消息<strong>#</strong>全局配置命令。命令语法中的“#”称为定界符。它会在消息前后输入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1#configure terminal</span><br><span class="line">Sw-Floor-1(config)#banner motd #Authorized Access Only#</span><br></pre></td></tr></table></figure>
<h2 id="05-保存配置"><a href="#05-保存配置" class="headerlink" title="05 保存配置"></a>05 保存配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>展示如何保存您的配置：</p>
<p>有两种系统文件用于存储设备配置：</p>
<ul>
<li><strong>startup-config(启动配置文件)</strong> -存储在非易失性内存（NVRAM） 中的配置文件。它包含在启动时或重启时用到的所有命令。当设备断电后，其中的内容不会消失。</li>
<li><strong>running-config(运行配置文件)</strong> -存储在易失性内存（RAM）中。它反映了当前的配置。修改运行配置会立即影响思科设备的运行。RAM 是易失性存储器。如果设备断电或重新启动，则它会丢失所有内容。</li>
</ul>
<p>特权 EXEC 模式命令<strong>show running-config</strong>（缩写：show run）用于查看正在运行的配置。</p>
<p>要查看启动配置文件，请使用特权 EXEC 命令<strong>show startup-config</strong>。</p>
<p>要将对运行配置所作的更改<strong>保存</strong>到启动配置文件中，请使用特权 EXEC 模式命令<strong>copy running-config startup-config</strong>（缩写 copy run start）</p>
<p>查看NVRAM的修改：<strong>dir NVRAM</strong></p>
<p>注意：一旦将配置命令输入到路由器中，它们就会立即修改设备。运行配置文件<strong>不能被删除</strong>，也<strong>不能自动保存</strong>。</p>
<h3 id="修改运行配置"><a href="#修改运行配置" class="headerlink" title="修改运行配置"></a>修改运行配置</h3><p>如果对运行配置所作的更改未能实现预期的效果，而且运行配置文件尚未保存，可以将设备恢复到以前的配置。</p>
<p>单独删除更改的命令，或使用特权 EXEC 模式命令 <strong>reload</strong>重新加载设备都能恢复启动配置。这样有个缺点是，在一段很短的时间内设备将会离线，导致网络中断。</p>
<p>如果将不理想的更改保存到了启动配置文件中，则可能需要清除所有配置。这需要删除启动配置文件并重新启动设备。</p>
<p>使用特权 EXEC 模式命令<strong>erase startup-config</strong>可删除启动配置。</p>
<p>从 NVRAM 中删除启动配置后，请重新加载设备以从内存中清除当前的运行配置文件。重新加载时，交换机将会加载设备出厂默认的启动配置。</p>
<p>注意：<strong>路由器和交换机配置的更改在输入命令后立即生效。</strong>因此，对实时生产设备的更改在实施之前总是要仔细计划，这一点非常重要。如果输入的命令导致设备不稳定或无法访问，则可能需要重新加载设备，从而导致网络停机。</p>
<h2 id="06-端口和地址"><a href="#06-端口和地址" class="headerlink" title="06 端口和地址"></a>06 端口和地址</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>使用IP地址，是设备能够相互查找并在Internet上建立端到端通信的主要方式。</p>
<p>终端设备有如下：</p>
<ul>
<li>计算机（工作站、笔记本、文件服务器、Web服务器）</li>
<li>网络打印机</li>
<li>VoLP电话</li>
<li>安全摄像机</li>
<li>智能手机</li>
<li>移动手持设备（如无线条码扫描仪）</li>
</ul>
<p><strong>IPv4： </strong></p>
<p>IPv4地址的结构称为<strong>点分十进制</strong>记法，用 0 到 255 之间的四个十进制数字表示，数字之间以句点分隔。IPv4 地址会分配给连接到网络的各个设备。</p>
<p><strong>子网掩码</strong>对IPv4也是必要设置。其是将地址的网络部分与主机部分区分开来的32位值。子网掩码与IPv4地址相结合，可用于确定设备属于哪个子网。</p>
<p><strong>默认网关</strong>地址是主机将用于访问远程网络（包括Internet）的路由器的IP地址。</p>
<p><img src="/2021/08/15/ITN-Internet/15.png" alt="15"></p>
<p><strong>IPv6</strong> ：</p>
<p>是 IP 的最新版本，正在替换更常见的 IPv4。</p>
<p>其地址长度为128位，写作<strong>十六进制字符串</strong>。</p>
<p>由四个十六进制数字组以<strong>冒号（：）分隔</strong>。</p>
<p>不区分大小写。</p>
<p><img src="/2021/08/15/ITN-Internet/16.png" alt="16"></p>
<h3 id="虚拟接口"><a href="#虚拟接口" class="headerlink" title="虚拟接口"></a>虚拟接口</h3><p>思科 IOS 第 2 层交换机有物理端口，可用于连接设备。这些端口不支持第 3 层 IP 地址。因此，交换机有一个或多个交换机虚拟接口 (SVI)。这些是虚拟接口，是因为<strong>设备上没有任何物理硬件与之关联</strong>。SVI 会在软件中创建。</p>
<p>虚拟接口可以让您使用 IPv4和IPv6 通过网络远程管理交换机。每台交换机的默认配置中都“现成”带有一个 SVI。默认 SVI 是接口 VLAN1。</p>
<p><strong>注意</strong>: 第2 层交换机不需要 IP 地址。分配给 SVI 的 IP 地址用于远程访问交换机。2层交换机无需使用 IP 地址就可以工作。</p>
<h2 id="07-配置IP地址"><a href="#07-配置IP地址" class="headerlink" title="07 配置IP地址"></a>07 配置IP地址</h2><h3 id="为终端设备进行手动IP地址配置"><a href="#为终端设备进行手动IP地址配置" class="headerlink" title="为终端设备进行手动IP地址配置"></a>为终端设备进行手动IP地址配置</h3><p>DNS服务器地址是域名系统（DNS）服务器的IPv4和IPv6地址，用于将IP地址转换为域名。例如www.cisco.com。</p>
<h3 id="自动配置终端的IP地址"><a href="#自动配置终端的IP地址" class="headerlink" title="自动配置终端的IP地址"></a>自动配置终端的IP地址</h3><p><strong>DHCP</strong>：终端通常默认使用的<strong>进行IPv4地址自动配置</strong>的网络技术。</p>
<p>DHCP给主机提供动态的和自动分配的IP地址。</p>
<p><img src="/2021/08/15/ITN-Internet/17.png" alt="17"></p>
<p><strong>注意</strong>: IPv6 使用 DHCPv6 和 SLAAC（无状态地址自动配置）进行动态地址分配。</p>
<p>在命令提示符下使用<strong>ipconfig</strong>命令，可以显示 Windows PC 上的 IP 配置设置。输出将显示从 DHCP 服务器接收的 IPv4 地址、子网掩码和网关信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\&gt;ipconfig</span><br><span class="line">Windows IP Configuration  </span><br><span class="line">  </span><br><span class="line">Ethernet adapter Local Area Connection:  </span><br><span class="line">  </span><br><span class="line">Connection-specific DNS Suffix . : cisco.com  </span><br><span class="line">Link-local IPv6 Address . . . . . : fe80::b0ef:ca42:af2c:c6c7%16  </span><br><span class="line">IPv4 Address. . . . . . . . . . . : 192.168.1.10  </span><br><span class="line">Subnet Mask . . . . . . . . . . . : 255.255.255.0  </span><br><span class="line">Default Gateway . . . . . . . . . : 192.168.1.1</span><br></pre></td></tr></table></figure>
<h3 id="交换机虚拟接口（SVI）配置"><a href="#交换机虚拟接口（SVI）配置" class="headerlink" title="交换机虚拟接口（SVI）配置"></a>交换机虚拟接口（SVI）配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1# configure terminal</span><br><span class="line">Sw-Floor-1(config)# interface vlan 1 #Vlan1是一个虚拟接口</span><br><span class="line">Sw-Floor-1(config-if)# ip address 192.168.1.20 255.255.255.0 #IP地址 子网掩码</span><br><span class="line">Sw-Floor-1(config-if)# no shutdown #启用虚拟接口</span><br><span class="line">Sw-Floor-1(config-if)# exit</span><br><span class="line">Sw-Floor-1(config)# ip default-gateway 192.168.1.1</span><br></pre></td></tr></table></figure>
<p>在这些命令配置后，交换机即可使用所有 IPv4 要素进行网络通信。</p>
<p><strong>show ip interface brief</strong>命令适用于检验交换机接口的状况。<strong>ping</strong>命令可用于测试与网络上的另一设备或互联网上的一个网站的连接。</p>
<h1 id="第三章-协议与模型"><a href="#第三章-协议与模型" class="headerlink" title="第三章 协议与模型"></a>第三章 协议与模型</h1><h2 id="内容大纲"><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>主题标题</strong></th>
<th style="text-align:left"><strong>主题目标</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>规则</strong></td>
<td style="text-align:left">描述确保成功通信所需的规则类型。</td>
</tr>
<tr>
<td style="text-align:left"><strong>协议</strong></td>
<td style="text-align:left">说明为什么协议对网络通信不可或缺。</td>
</tr>
<tr>
<td style="text-align:left"><strong>协议簇</strong></td>
<td style="text-align:left">说明遵守协议簇的意义所在。</td>
</tr>
<tr>
<td style="text-align:left"><strong>标准组织</strong></td>
<td style="text-align:left">阐述标准组织在建立网络互通协议方面 发挥的作用。</td>
</tr>
<tr>
<td style="text-align:left"><strong>参考模型</strong></td>
<td style="text-align:left">阐述 TCP/IP 模型和 OSI 模型如何帮助促进通信过程的标准化。</td>
</tr>
<tr>
<td style="text-align:left"><strong>数据封装</strong></td>
<td style="text-align:left">说明数据封装如何实现跨网络数据传输。</td>
</tr>
<tr>
<td style="text-align:left"><strong>数据访问</strong></td>
<td style="text-align:left">说明本地主机如何访问本地网络中的资源。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="01-规则"><a href="#01-规则" class="headerlink" title="01 规则"></a>01 规则</h2><h3 id="通信基本知识"><a href="#通信基本知识" class="headerlink" title="通信基本知识"></a>通信基本知识</h3><p>所有通信方法三大共同要素：</p>
<ul>
<li>消息源（发送方）</li>
<li>消息目的地（接收方）</li>
<li>信道（由提供路径的介质组成）</li>
</ul>
<h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>无论是面对面通信还是通过网络通信，消息的发送都是由被称为<strong>协议</strong>的规则来管理的。</p>
<p>不同类型的通信方式，会有不同的特定协议。</p>
<p>对协议的要求：</p>
<ul>
<li>标识出发送方和接收方</li>
<li><strong>通用</strong>语言和语法</li>
<li>传递的速度和时间</li>
<li>证实或确认要求</li>
</ul>
<h3 id="网络协议要求"><a href="#网络协议要求" class="headerlink" title="网络协议要求"></a>网络协议要求</h3><ul>
<li>识别源和目的地</li>
<li>消息编码</li>
<li>消息格式和封装</li>
<li>消息大小</li>
<li>消息时序</li>
<li>消息传输选项</li>
</ul>
<h3 id="消息编码"><a href="#消息编码" class="headerlink" title="消息编码"></a>消息编码</h3><p><strong>编码</strong>是将信息转化为另一种广为接受的形式的过程，目的是为了便于传输信息。</p>
<p><strong>解码</strong>是编码的逆向过程，用来解释信息。</p>
<p>主机之间的编码必须采用适合介质的<strong>格式</strong>。通过网络发送的消息先由发送主机转换成位。每个位被编码成铜线上的电压模式、光纤中的红外光或无线系统的微波。目的主机接收并解码信号，解释收到的消息。</p>
<h3 id="消息格式和封装"><a href="#消息格式和封装" class="headerlink" title="消息格式和封装"></a>消息格式和封装</h3><p>消息格式取决于消息的类型和传递信道。</p>
<p>通过计算机网络发送的消息必须采用正确的格式，一遍传递和处理。正确表示消息的来源及其目的地是格式化过程的一部分。</p>
<p>互联网协议 (IP)是一种具有与信封示例类似功能的协议。在图中，互联网协议版本 6 (IPv6) 数据包的字段标识数据包的来源及其目的地。IP 负责通过一个或多个网络将消息从消息源发送到目的地。</p>
<p><img src="/2021/08/15/ITN-Internet/18.png" alt="18"></p>
<h3 id="消息大小"><a href="#消息大小" class="headerlink" title="消息大小"></a>消息大小</h3><p>发送的消息通常会分成较小的部分或较短的句子。这些句子的大小限制为接收方一次可以处理的大小。</p>
<h3 id="消息时序"><a href="#消息时序" class="headerlink" title="消息时序"></a>消息时序</h3><p>消息时序包括：</p>
<ul>
<li>流量控制：用于管理数据传输速率。定义了可以发送的信息量以及传递信息的速率。</li>
<li>响应超时：指定未获得接收方响应的等待时长，以及在响应超时的情况下执行什么操作。</li>
<li>访问方法：决定发送方可以发送消息的时间。避免同时发送消息造成信息冲突。</li>
</ul>
<h3 id="消息传输方式"><a href="#消息传输方式" class="headerlink" title="消息传输方式"></a>消息传输方式</h3><p>有三种类型的数据通信传输方式：</p>
<ul>
<li>单播（单个终端设备）</li>
<li>组播（一或多个终端设备）</li>
<li>广播（所有终端设备）</li>
</ul>
<p><img src="/2021/08/15/ITN-Internet/19.png" alt="19"></p>
<h2 id="02-协议"><a href="#02-协议" class="headerlink" title="02 协议"></a>02 协议</h2><h3 id="网络协议概述"><a href="#网络协议概述" class="headerlink" title="网络协议概述"></a>网络协议概述</h3><p>要使终端设备能够通过网络进行通信，每个设备都必须遵守相同的一套<strong>规则</strong>，这些规则被称为协议。</p>
<p>它们在网络中有许多功能。本主题概述了网络协议。</p>
<p>协议类型：</p>
<ul>
<li>网络通信协议：使两个或多个设备能在一个或多个网络上通信。</li>
</ul>
<p>例：IP、<strong>传输控制协议（TCP）</strong>、<strong>超文本传输协议（HTTP）</strong>等。</p>
<ul>
<li>网络安全协议：保护数据以提供身份验证、数据完整性和数据加密。</li>
</ul>
<p>包括：安全外壳协议（SSH）、安全套接字层协议(SSL)和传输层安全协议（TLS）。</p>
<ul>
<li>路由协议：使路由器能够交换路由信息，比较路径信息，然后选择到达目标网络的最佳路径。</li>
</ul>
<p>包括：开放最短路径优先协议（OSPF）和便捷网关协议（BGP）。</p>
<ul>
<li>服务发现协议：用于设备或服务的自动监测。服务发现协议的实例包括发现用于<strong>IP地址分配服务的动态主机配置协议（DHCP）</strong>，和用于<strong>执行域名到IP地址转换的域名系统（DNS）</strong>。</li>
</ul>
<h3 id="网络协议功能："><a href="#网络协议功能：" class="headerlink" title="网络协议功能："></a>网络协议功能：</h3><ul>
<li>编址：这使用已定义的编址方案来标识消息的发送者 和预期的接收者。提供编址的协议示例 包括以太网，IPv4和IPv6。</li>
<li>可靠性： 此功能提供了有保证的传输机制， 以防消息在传输过程中丢失或损坏。TCP 提供可靠的传输。</li>
<li>流量控制：此功能可确保数据在两个通信设备之间 高效传输。TCP 提供流量控制服务。</li>
<li>排序：此功能唯一地标记每个传输的数据段。接收设备 使用排序信息正确地 重组信息。如果数据段丢失，延迟或未按顺序接收， 这将很有用。TCP 提供排序服务。</li>
<li>差错检测：此功能用于确定传输过程中数据 是否已损坏。提供差错检测的各种协议包括 以太网，IPv4，IPv6和TCP。</li>
<li>应用接口：此功能包含用于网络应用程序之间的进程间 通信的信息。例如，访问网页时， 使用HTTP或HTTPS协议在客户端和服务器Web进程之间进行通信。</li>
</ul>
<h3 id="协议交互"><a href="#协议交互" class="headerlink" title="协议交互"></a>协议交互</h3><p>设备向web服务器发送web页面请求时使用的一些常见网络协议：</p>
<p>HTTP、TCP、IP、以太网。</p>
<ul>
<li>HTTP（超文本传输协议）：该协议控制Web服务器和Web客户端进行交互的方式。HTTP定义了客户端和服务器之鉴交换的请求和响应的内容与可是。客户端软件和Web服务器软件都将HTTP作为应用程序的一部分来实现。HTTP依靠其他协议来控制客户端和服务器之间传输消息的方式。</li>
<li>TCP（传输控制协议）：此协议管理各个回话。TCP负责保证信息的可靠传递和管理终端设备之间的流量控制。</li>
<li>IP（互联网协议）：负责将消息从发送方传递给接收方。路由器使用IP来夸多个网络转发消息。</li>
<li>以太网：负责将消息从一个NIC传递到同一个以太网局域网（LAN）上的另一个NIC。</li>
</ul>
<h3 id="网络协议簇："><a href="#网络协议簇：" class="headerlink" title="网络协议簇："></a>网络协议簇：</h3><p>协议簇旨在不同玩过协议相互无缝协作。</p>
<p>执行某种通信功能所需的一组内在相关协议称为协议簇。</p>
<p>将协议簇理解成一个堆栈：</p>
<p>协议显示为分层结构，每种上层服务都依赖于其余下层协议所定义的功能。协议栈的下层负责通过网络传输数据和向上层提供服务，而上层则负责处理发送的消息内容。</p>
<p>栗子：</p>
<p>针对这个通话活动，底层是物理层，确定两人以说话的方式进行；中间是规则层，规定了通话的要求，如都使用汉语；顶部是内容层，是说出话的内容。</p>
<p><img src="/2021/08/15/ITN-Internet/20.png" alt="20"></p>
<p>协议簇是共同作用，帮助解决某个问题的规则集。</p>
<h3 id="TCP-IP协议示例"><a href="#TCP-IP协议示例" class="headerlink" title="TCP/IP协议示例"></a>TCP/IP协议示例</h3><p>TCP/IP协议可用于应用层、传输层和互联网层。网络接入层中没有 TCP/IP 协议。最常见的网络接入层LAN协议是以太网和WLAN(无线LAN)协议。网络接入层协议负责通过物理介质传输 IP 数据包。</p>
<p>图中显示了用于在主机的web浏览器和web服务器之间发送数据包的三种TCP/IP协议的示例。HTTP、TCP 和 IP 是所使用的 TCP/IP 协议。在网络接入层，示例中使用了以太网。然而，这里也可以使用一种无线标准，如WLAN或蜂窝服务。</p>
<p><img src="/2021/08/15/ITN-Internet/21.png" alt="21"></p>
<h3 id="TCP-IP协议簇"><a href="#TCP-IP协议簇" class="headerlink" title="TCP/IP协议簇"></a>TCP/IP协议簇</h3><p>当今TCP/IP协议簇包含许多协议，如图较为常见的：</p>
<p><img src="/2021/08/15/ITN-Internet/22.png" alt="22"></p>
<p>TCP/IP协议特性：</p>
<p>开放标准：对公众免费，任何供应商都可在硬件或软件中使用它。</p>
<p>基于标准：已经受到网络行业认可并获得标准组织的批准。着确保了不同制造商的产品能成功地互操作。</p>
<p><strong>应用层</strong></p>
<p>域名系统</p>
<ul>
<li><strong>DNS</strong> - 域名系统。将域名（例如 cisco.com）转换为 IP 地址。</li>
</ul>
<p>主机配置</p>
<ul>
<li><strong>DHCPv4</strong> - IPv4动态主机配置协议。DHCPv4 服务器在启动时动态地将 IPv4 编址信息分配给 DHCPv4 客户端，并允许在不再需要时重新使用这些地址。</li>
<li><strong>DHCPv6</strong> - IPv6动态主机配置协议。DHCPv6类似于DHCPv4。DHCPv6服务器在启动时动态地将IPv6编址信息分配给DHCPv6客户端。</li>
<li><strong>SLAAC</strong> - 无状态地址自动配置。一种允许设备在不使用DHCPv6服务器的情况下获得其IPv6编址信息的方法。</li>
</ul>
<p>邮件</p>
<ul>
<li><strong>SMTP</strong> - 简单邮件传输协议。使客户端能够将邮件发送到邮件服务器，并使服务器能够将邮件发送到其他服务器。</li>
<li><strong>POP3</strong> - 邮局协议第 3 版。使客户端能够从邮件服务器检索电子邮件并将电子邮件下载到客户端本地邮件应用程序。</li>
<li><strong>IMAP</strong> - 互联网消息访问协议。使客户端能够访问存储在邮件服务器上的电子邮件，并在服务器上维护电子邮件。</li>
</ul>
<p>文件传输</p>
<ul>
<li><strong>FTP</strong> - 文件传输协议。它设置规则，使得一台主机上的用户能够通过网络访问另一台主机或向其传输文件。FTP是一种可靠、面向连接且进行确认的文件传输协议。</li>
<li><strong>SFTP</strong> - SSH文件传输协议。作为安全外壳 (SSH)协议的扩展，SFTP可用于建立安全的文件传输会话，在该会话中对文件传输进行加密。SSH 是一种安全远程登录的方法，通常用于访问设备的命令行。</li>
<li><strong>TFTP</strong> - 简单文件传输协议。这是一个简单的，无连接的文件传输协议，使用尽最大努力、无需确认的文件传输方式。它使用的开销比FTP少。</li>
</ul>
<p>Web和Web服务</p>
<ul>
<li><strong>HTTP</strong> - 超文本传输协议。这是有关在万维网上交换文本、图形图像、音频、视频以及其他多媒体文件的一组规则集。</li>
<li><strong>HTTPS</strong> - 安全 HTTP。这是一种安全的HTTP形式，它对在万维网上交换的数据进行加密。</li>
<li><strong>REST</strong> - 具象状态传输协议。它使用应用程序编程接口 (API) 和 HTTP 请求创建 Web 应用程序的 Web 服务。</li>
</ul>
<p><strong>传输层</strong></p>
<p>面向连接</p>
<ul>
<li><strong>TCP</strong> - 传输控制协议。它使运行在不同主机上的进程之间能够进行可靠的通信，并提供可靠的、需要确认的传输，以确保传输成功。</li>
</ul>
<p>无连接</p>
<ul>
<li><strong>UDP</strong> - 用户数据报协议。它允许一台主机上运行的进程向另一台主机上运行的进程发送数据包。但是，UDP不会确认数据报传输是否成功。</li>
</ul>
<p><strong>互联网层</strong></p>
<p>Internet 协议</p>
<ul>
<li><strong>IPv4</strong> - 互联网协议第 4 版。它接收来自传输层的消息段，将消息打包成数据包，并为通过网络进行端到端传递的数据包进行地址分配。IPv4 使用 32 位地址。</li>
<li><strong>IPv6</strong> - 互联网协议第 6 版。与 IPv4 类似，但使用 128 位地址。</li>
<li><strong>NAT</strong> - 网络地址转换。将私有网络 IPv4 地址转换为全球唯一的公有 IPv4 地址。</li>
</ul>
<p>消息传递</p>
<ul>
<li><strong>ICMPv4</strong> - IPv4 互联网控制消息协议。目的主机针对数据包传输中出现的错误，向源主机提供反馈。</li>
<li><strong>ICMPv6</strong> - 用于 IPv6 的ICMP。与 ICMPv4 类似的功能，但用于 IPv6 数据包。</li>
<li><strong>ICMPv6 ND</strong> - IPv6 邻居发现。包括用于地址解析和重复地址检测的四个协议消息。</li>
</ul>
<p>路由协议</p>
<ul>
<li><strong>OSPF</strong> - 开放最短路径优先协议。它使用基于区域的分层设计的链路状态路由协议。OSPF是一种开放式标准内部路由协议。</li>
<li><strong>EIGRP</strong> — 增强型内部网关路由协议这是一种思科开发的开放标准路由协议，使用基于带宽、延迟、负载和可靠性的复合度量。</li>
<li><strong>BGP</strong> - 边界网关协议。这是一种开放标准的外部网关路由协议，用于互联网服务提供商(ISP)之间。BGP 还通常用于 ISP 与其大型私有客户端之间来交换路由信息。</li>
</ul>
<p><strong>网络接入层</strong></p>
<p>地址解析</p>
<ul>
<li><strong>ARP</strong> - 地址解析协议。提供 IPv4 地址与硬件地址之间的动态地址映射。</li>
</ul>
<p><strong>注意</strong>：您可能会看到其他文档状态，表明 ARP 在互联网层（OSI 第 3 层）运行。但是，在本课程中，我们声明 ARP 在网络接入层（OSI 第 2 层）运行，因为它的主要目的是发现目标的 MAC 地址。MAC 地址是第 2 层地址。</p>
<p>数据链路协议</p>
<ul>
<li><strong>以太网</strong> - 为网络接入层的布线和信令标准定义规则。</li>
<li><strong>WLAN</strong> - 无线局域网。定义 2.4 GHz 和 5 GHz 无线电频率的无线信号规则。</li>
</ul>
<h3 id="TCP-IP通信过程"><a href="#TCP-IP通信过程" class="headerlink" title="TCP/IP通信过程"></a>TCP/IP通信过程</h3><p>最内&lt;———————————&gt;最外</p>
<p>数据 —- TCP —- IP —- 以太网</p>
<p>封装过程：由内到外</p>
<p>解码过程：由外到内</p>
<h2 id="03-参考模型"><a href="#03-参考模型" class="headerlink" title="03 参考模型"></a>03 参考模型</h2><h3 id="使用分层模型"><a href="#使用分层模型" class="headerlink" title="使用分层模型"></a>使用分层模型</h3><p>诸如网络运行方式之类的复杂概念可能很难解释和理解。因此，可以使用分层模型将网络的运行模块化为可管理的层。</p>
<p><img src="/2021/08/15/ITN-Internet/23.png" alt="23"></p>
<h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>OSI 模型层</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>7 - 应用层</strong></td>
<td style="text-align:left">应用层包含用于进程间通信 的协议。</td>
</tr>
<tr>
<td style="text-align:left"><strong>6 - 表示层</strong></td>
<td style="text-align:left">表示层用常用方式表示数据在应用层服务之间的传输。</td>
</tr>
<tr>
<td style="text-align:left"><strong>5 - 会话层</strong></td>
<td style="text-align:left">会话层向表示层提供服务，组织对话并管理数据交换。</td>
</tr>
<tr>
<td style="text-align:left"><strong>4 - 传输层</strong></td>
<td style="text-align:left">传输层定义服务以对数据进行分段，传输和 重组，以进行终端设备之间的单独 通信。</td>
</tr>
<tr>
<td style="text-align:left"><strong>3 - 网络层</strong></td>
<td style="text-align:left">网络层为所标识的终端设备之间通过网络交换独立的数据的片段提供服务。</td>
</tr>
<tr>
<td style="text-align:left"><strong>2 - 数据链路层</strong></td>
<td style="text-align:left">数据链路层协议描述了设备之间通过公共介质交换数据帧的方法。</td>
</tr>
<tr>
<td style="text-align:left"><strong>1 - 物理层</strong></td>
<td style="text-align:left">物理层协议描述了机械的、电气的、功能的 和程序化的方法，以激活，维护和解除物理连接， 实现与网络设备之间的位设备。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意</strong>: 我们提及 TCP/IP 模型的各层时只使用其名称，而提及 OSI 模型的七个层时则通常使用编号而非名称。例如，物理层指 OSI 模型的第 1 层，数据链路层指第2层，诸如此类。</p>
<h3 id="TCP-IP协议模型"><a href="#TCP-IP协议模型" class="headerlink" title="TCP/IP协议模型"></a>TCP/IP协议模型</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>TCP/IP 模型层</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>4 - 应用层</strong></td>
<td style="text-align:left">向用户提供数据，以及编码和对话控制。</td>
</tr>
<tr>
<td style="text-align:left"><strong>3 - 传输层</strong></td>
<td style="text-align:left">支持各种设备之间通过不同网络通信。</td>
</tr>
<tr>
<td style="text-align:left"><strong>2 - 互联网层</strong></td>
<td style="text-align:left">确定通过网络的最佳路径。</td>
</tr>
<tr>
<td style="text-align:left"><strong>1 - 网络接入层</strong></td>
<td style="text-align:left">控制组成网络的硬件设备和介质。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="OSI-模型与-TCP-IP-模型的比较"><a href="#OSI-模型与-TCP-IP-模型的比较" class="headerlink" title="OSI 模型与 TCP/IP 模型的比较"></a>OSI 模型与 TCP/IP 模型的比较</h3><p>还可以根据 OSI 参考模型描述构成 TCP/IP 协议簇的协议。在 OSI 模型中，TCP/IP 模型的网络接入层和应用层被进一步划分，用于描述这些协议层需要实现的不同功能。</p>
<p>TCP/IP 协议簇在网络接入层并没有指定通过物理介质传输时使用的协议，而只是描述了从互联网层到物理网络协议的传递。而 OSI 模型第 1 层和第 2 层则论述了接入介质所需的步骤以及通过网络发送数据的物理手段。</p>
<h2 id="04-数据封装"><a href="#04-数据封装" class="headerlink" title="04 数据封装"></a>04 数据封装</h2><h3 id="对消息分段"><a href="#对消息分段" class="headerlink" title="对消息分段"></a>对消息分段</h3><p>消息分段的必要性：</p>
<ul>
<li>高容量信息传输会导致严重延迟</li>
<li>一旦链路出现故障整个重传</li>
</ul>
<p>消息分段：将数据例会划分为更小的单元，以便在通过网络传输的过程。这个单元被称为<strong>数据包</strong>。包含统一目的地数据段的数据包可以通过不同的路径发送。</p>
<p><strong>多路复用</strong>：允许许多不同的对话在同一网络传输路径传输。</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>使用分段和多路复用在网络上传输消息要面临的挑战是增加了该过程的复杂程度。为确保接收方接受到的信息可以顺利重新组装，需要对信息传输顺序进行排序。</p>
<p><img src="/2021/08/15/ITN-Internet/24.png" alt="24"></p>
<h3 id="协议数据单元"><a href="#协议数据单元" class="headerlink" title="协议数据单元"></a>协议数据单元</h3><p><strong>封装过程</strong>：在通过网络介质传输应用程序数据的过程中，随着数据沿协议栈向下传递，每层都要添加各种协议信息。在网络中发送消息时，封装过程自上而下工作。在各层，上层信息被视为封装协议内的数据。</p>
<p><strong>协议数据单元（PDU）</strong>：一段数据在任意协议层的表示形式。</p>
<p>在封装过程中，后续的每一层都根据使用的协议封装其从上一层接收的 PDU。</p>
<p><img src="/2021/08/15/ITN-Internet/25.png" alt="25" style="zoom:150%;"></p>
<ul>
<li>数据：泛指应用层使用的PDU</li>
<li>数据段：传输层PDU</li>
<li>数据包：网络层PDU</li>
<li>帧：数据链路层PDU</li>
<li>位：通过介质实际传输数据时使用的物理层PDU</li>
</ul>
<p><strong>解封过程</strong>：解封是接收设备用来删除一个或多个协议报头的过程。数据在朝着最终用户应用程序沿协议栈向上移动的过程中被解封。</p>
<h2 id="05-数据访问"><a href="#05-数据访问" class="headerlink" title="05 数据访问"></a>05 数据访问</h2><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>为了让网络传输行之有效，需要有效正确的对分段消息编址。</p>
<p><strong>网络层</strong>和<strong>数据链路层</strong>负责将数据从源设备传输到目的设备。如图所示，两层中的协议都包含源地址和目的地址，但它们的地址具有不同的用途。</p>
<ul>
<li>网络层源地址和目的地址-负责将IP数据包从原始原设备传输到可能处于统一网络或远程网络中的最终目的设备。</li>
<li>数据链路层源地址和目的地址-负责将数据链路帧从一个网络接口卡（NIC）传输到同一网络上的另一个NIC。</li>
</ul>
<p><img src="/2021/08/15/ITN-Internet/26.png" alt="26"></p>
<h3 id="第3层逻辑地址-IP地址"><a href="#第3层逻辑地址-IP地址" class="headerlink" title="第3层逻辑地址(IP地址)"></a>第3层逻辑地址(IP地址)</h3><p>IP地址是网路层（第三层）逻辑地址，用于将IP数据包从原始源设备传输到最终目的设备。</p>
<p><img src="/2021/08/15/ITN-Internet/27.png" alt="27"></p>
<p>IP数据包包换两个IP地址：</p>
<ul>
<li>源IP地址</li>
<li>目的IP地址</li>
</ul>
<p>IP地址包含两部分：</p>
<ul>
<li>网络部分（IPV4）或前缀（IPV6）：地址最左边部分，表示IP地址是哪个网络的成员。统一网络中所有设备的地址都有相同的网络部分。</li>
<li>主机部分（IPV4）或接口ID（IPV6）：地址的其余部分，用于识别网络上的特定设备。这部分对于网络中的每个设备或接口都是唯一的。</li>
</ul>
<h3 id="同一网络中的设备"><a href="#同一网络中的设备" class="headerlink" title="同一网络中的设备"></a>同一网络中的设备</h3><p>客户端计算机PC1与同一IP网络中额的FTP服务器进行通信。</p>
<p><img src="/2021/08/15/ITN-Internet/28.png" alt="28"></p>
<p><strong>数据链路层地址作用：相同的IP网络</strong></p>
<p>当 IP 数据包的发送方和接收方处于同一网络中时，数据链路帧将直接发送到接收设备。在以太网中，数据链路地址称为以太网介质访问控制（MAC）地址，在图中突出显示。</p>
<p><strong>MAC地址是以太网网卡的物理地址，长度为48位或12个十六进制数字。IPv4地址和IPv6地址是逻辑的地址。IPv4是32位，而IPv6是128位。</strong></p>
<p>源MAC地址：PC1 以太网网卡的 MAC 地址为 AA-AA-AA-AA-AA-AA，以十六进制表示法表示。</p>
<p>目的MAC地址：FTP服务器的MAC地址： CC-CC-CC-CC-CC-CC-CC，用十六进制记法表示。</p>
<h3 id="远程网络中的设备"><a href="#远程网络中的设备" class="headerlink" title="远程网络中的设备"></a>远程网络中的设备</h3><p>客户端计算机PC1与另一IP网络中名为Web服务器的服务器进行通信。</p>
<p><strong>网络层地址的作用</strong>：</p>
<p>当数据包的发送方与接收方位于不同网络时，源 IP 地址和目的 IP 地址将代表位于不同网络的主机。这将由目的主机 IP 地址的网络部分来表明。</p>
<ul>
<li><strong>源IPv4地址</strong> – 发送设备的IPv4地址，即客户端计算机PC1： 192.168.1.110。</li>
<li><strong>目的IPv4地址</strong> – 接收设备的IPv4地址，即服务器，Web服务器：172.16.1.99。</li>
</ul>
<p><img src="/2021/08/15/ITN-Internet/29.png" alt="29"></p>
<h3 id="数据链路层地址"><a href="#数据链路层地址" class="headerlink" title="数据链路层地址"></a>数据链路层地址</h3><p>作用将数据链路层帧从一个网络接口传输到同一网络中的另一个网络接口。</p>
<p>当 IP 数据包的发送方和接收方位于不同网络时，以太网数据链路帧不能直接发送到目的主机，因为在发送方的网络中无法直接到达该主机。必须将以太网帧发送到称为路由器或默认网关的另一设备。在我们的示例中，默认网关是 R1。R1 有一个以太网数据链路地址与 PC1 位于同一网络中。这使 PC1 能够直接到达路由器。</p>
<p>现在可以将封装有 IP 数据包的以太网帧传送到 R1。R1 将数据包转发到目的地（Web 服务器）。这可能意味着 R1 会将数据包转发到另一个路由器，或者如果目的地所在的网络与 R1 相连的话直接转发到 Web 服务器。</p>
<p><strong>过程：主机-&gt;路由器 路由器-&gt;路由器 路由器-&gt;服务器</strong></p>
<p>当 IP 数据包从主机到路由器、从路由器到路由器和最终从路由器到主机传输时，沿途中的每个点上都会将 <strong>IP 数据包</strong>封装到新的数据链路层帧中。每个数据链路层帧包含发送帧的 NIC 卡的源数据链路层地址和接收帧的 NIC 卡的目的数据链路层地址。</p>
<p>数据链路层帧地址字段<strong>按顺序</strong>由<strong>目的</strong>和<strong>源MAC地址</strong>组成。</p>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>ITN</tag>
      </tags>
  </entry>
  <entry>
    <title>MatLab(1)</title>
    <url>/2022/01/13/MatLab-1/</url>
    <content><![CDATA[<p>美赛MatLab学习第一篇：</p>
<ul>
<li>MatLab系统环境</li>
<li>MatLab数值数据</li>
<li>变量及其操作</li>
<li>MatLab矩阵的表示</li>
<li>矩阵元素的引用</li>
</ul>
<span id="more"></span>
<h1 id="A-MATLAB系统环境"><a href="#A-MATLAB系统环境" class="headerlink" title="A MATLAB系统环境"></a>A MATLAB系统环境</h1><h2 id="A-a-MATLAB操作界面的组成"><a href="#A-a-MATLAB操作界面的组成" class="headerlink" title="A. a MATLAB操作界面的组成"></a>A. a MATLAB操作界面的组成</h2><h3 id="1-Matlab主窗口"><a href="#1-Matlab主窗口" class="headerlink" title="1 Matlab主窗口"></a>1 Matlab主窗口<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70.png" class title="在这里插入图片描述"></h3><p>功能区：提供三个选项卡（主页，绘图，应用程序），各自有不同的工具可供使用。<br>快速访问工具栏：包含一些常用按钮<br>当前文件夹工具栏：用于实现当前文件夹的操作</p>
<h3 id="2-命令行窗口"><a href="#2-命令行窗口" class="headerlink" title="2 命令行窗口"></a>2 命令行窗口</h3><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16420387311952.png" class title="在这里插入图片描述">
<p>命令行窗口用于输入命令并显示命令的执行结果。在命令提示符&gt; &gt; &gt;&gt;&gt;&gt;后输入命令并按下回车键，Matlab就会解释执行输入的命令并显示结果</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16420387489254.png" class title="在这里插入图片描述">
<h3 id="3-当前文件夹窗口"><a href="#3-当前文件夹窗口" class="headerlink" title="3 当前文件夹窗口"></a>3 当前文件夹窗口</h3><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16420387976388.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16420387655886.png" class title="在这里插入图片描述">
<p>注意：一定要先建立文件夹，再将文件夹设为当前文件夹。</p>
<img src="/2022/01/13/MatLab-1/20200225165715889.png" class title="在这里插入图片描述">
<h3 id="4-工作区窗口"><a href="#4-工作区窗口" class="headerlink" title="4 工作区窗口"></a>4 工作区窗口</h3><p>是Matlab用于存储各种变量和结果的空间，可用于变量的显示和操作。</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164203884473911.png" class title="在这里插入图片描述">
<p>在工作区以表格形式显示变量a与x的名称，取值等信息。在工作区还可以对变量进行保存、编辑、删除等操作。</p>
<h2 id="A-b-MATLAB的搜索路径"><a href="#A-b-MATLAB的搜索路径" class="headerlink" title="A. b MATLAB的搜索路径"></a>A. b MATLAB的搜索路径</h2><p>1 用户在命令行窗口输入一条命令后，MATLAB将按照一定顺序依次寻找命令对象。<br>顺序（当以下都同名时）：</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164203886285913.png" class title="在这里插入图片描述">
<p>如（clear清楚工作区的全部变量）：</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164203887654415.png" class title="在这里插入图片描述">
<p>所以定义变量名时要避免与文件名和函数名重复。</p>
<p>2 设置文件搜索路径</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164203890714317.png" class title="在这里插入图片描述">
<p>在命令行输入文件名后，MATLAB是在当前文件夹与搜索路径文件夹中寻找这个文件并执行文件内容的，所以要执行的文件必须放在这两类文件夹中。<br>如果两个文件夹种有同名的M文件，在命令行输入这个文件名执行顺序：当前文件夹&gt;搜索路径文件夹</p>
<h1 id="B-MATLAB数值数据"><a href="#B-MATLAB数值数据" class="headerlink" title="B MATLAB数值数据"></a>B MATLAB数值数据</h1><h2 id="B-a-数值数据类型的分类-class"><a href="#B-a-数值数据类型的分类-class" class="headerlink" title="B. a 数值数据类型的分类(class)"></a>B. a 数值数据类型的分类(class)</h2><h3 id="1-整形："><a href="#1-整形：" class="headerlink" title="1 整形："></a>1 整形：</h3><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204074427619.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204075463521.png" class title="在这里插入图片描述">
<h3 id="2-浮点型"><a href="#2-浮点型" class="headerlink" title="2 浮点型"></a>2 浮点型</h3><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204076549223.png" class title="在这里插入图片描述">
<p>class函数可以得到参数的数据类型。</p>
<img src="/2022/01/13/MatLab-1/20200225173308488.png" class title="在这里插入图片描述">
<h3 id="3-复数型"><a href="#3-复数型" class="headerlink" title="3 复数型"></a>3 复数型</h3><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204079263626.png" class title="在这里插入图片描述">
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="built_in">real</span>() <span class="comment">%求复数的实部</span></span><br><span class="line"><span class="number">2</span> <span class="built_in">imag</span>() <span class="comment">%求复数的虚部</span></span><br></pre></td></tr></table></figure>
<h2 id="B-b-数值数据的输出格式-format"><a href="#B-b-数值数据的输出格式-format" class="headerlink" title="B. b 数值数据的输出格式(format)"></a>B. b 数值数据的输出格式(format)</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> format  格式符  <span class="comment">% 设置数据的输出格式</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204095728428.png" class title="在这里插入图片描述">
<p>不同的格式符输出不同的数据格式。<br>注意：format命令只是影响数据输出的格式，而不影响数据的计算和存储。</p>
<h2 id="B-c-常用数学函数"><a href="#B-c-常用数学函数" class="headerlink" title="B. c 常用数学函数"></a>B. c 常用数学函数</h2><h3 id="1-函数的调用格式"><a href="#1-函数的调用格式" class="headerlink" title="1 函数的调用格式"></a>1 函数的调用格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 函数名（函数自变量的值）</span><br></pre></td></tr></table></figure>
<p>函数的自变量规定为矩阵变量（标量本身是矩阵的一种特例）。<br><strong>函数在运算时是将函数逐项作用于矩阵的每个元素上</strong>，所以最后运算的结果就是一个与自变量同型的矩阵。</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204106105530.png" class title="在这里插入图片描述">
<h3 id="2-常用函数的应用-sin-sind-abs-取整"><a href="#2-常用函数的应用-sin-sind-abs-取整" class="headerlink" title="2 常用函数的应用(sin,sind;abs;取整)"></a>2 常用函数的应用(sin,sind;abs;取整)</h3><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204106618632.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204107305034.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204107678636.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204108180638.png" class title="在这里插入图片描述">
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rem</span>(m,n)   <span class="comment">%求m/n的余数</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204117964540.png" class title="在这里插入图片描述">
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">isprime(n) # 判断n是否是素数，是返回1，否返回0.</span><br></pre></td></tr></table></figure>
<h1 id="C-变量及其操作"><a href="#C-变量及其操作" class="headerlink" title="C 变量及其操作"></a>C 变量及其操作</h1><p>计算机处理的数据都是存放在内存单元中的，而每一个内存单元都有一个唯一的地址，程序就是通过这个地址来访问对应内存单元的。<br>在如Matlab这种高级语言中，只需要给每个内存单元取一个名字，然后通过这个名字就能访问每个内存单元了。</p>
<h2 id="C-a-变量与赋值语句"><a href="#C-a-变量与赋值语句" class="headerlink" title="C. a 变量与赋值语句"></a>C. a 变量与赋值语句</h2><ul>
<li>变量本质上讲是内存单元的一个抽象</li>
<li>在Matlab中，变量名是以字母开头，后接字母、数字或下划线的字母序列，最多63个字符。</li>
</ul>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204220065142.png" class title="在这里插入图片描述">
<ul>
<li><p>变量名区分大小写</p>
</li>
<li><p>标准函数名以及命令名必须用小写字母 </p>
</li>
</ul>
<p>赋值语句两种格式</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 变量=表达式        <span class="comment">% 变量结果会在命令行中显示出来</span></span><br><span class="line"><span class="number">2</span> 变量=表达式；	  <span class="comment">% 变量结果不会在命令行中显示出来</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204227134144.png" class title="在这里插入图片描述">
<h2 id="C-b-预定义变量"><a href="#C-b-预定义变量" class="headerlink" title="C. b 预定义变量"></a>C. b 预定义变量</h2><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204228167446.png" class title="在这里插入图片描述">
<h2 id="C-c-变量的管理"><a href="#C-c-变量的管理" class="headerlink" title="C. c 变量的管理"></a>C. c 变量的管理</h2><h3 id="1-变量的删除和修改（who-whos）"><a href="#1-变量的删除和修改（who-whos）" class="headerlink" title="1  变量的删除和修改（who,whos）"></a>1  变量的删除和修改（who,whos）</h3><p>在工作区选择变量右击即可进行删除和修改。</p>
<img src="/2022/01/13/MatLab-1/20200225190331526.png" class title="在这里插入图片描述">
<p>who命令和whos命令：<br>who命令只显示已存在变量的名称。而whos显示信息更多。</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204232363449.png" class title="在这里插入图片描述">
<h3 id="2-内存变量文件-save-load"><a href="#2-内存变量文件-save-load" class="headerlink" title="2 内存变量文件(save,load)"></a>2 内存变量文件(save,load)</h3><p>用于保存Matlab工作区变量的文件叫做内存变量文件，其扩展名为.mat，也叫MAT文件，是一种标准的二进制格式文件。<br>save命令：创建内存变量文件<br>load命令：载入内存变量文件</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> save mydata a x   <span class="comment">% 将a x保存在mydata.mat文件中</span></span><br><span class="line"><span class="number">2</span> load mydata       <span class="comment">% 载入mydata.mat中的变量</span></span><br></pre></td></tr></table></figure>
<h1 id="D-MATLAB矩阵表示"><a href="#D-MATLAB矩阵表示" class="headerlink" title="D MATLAB矩阵表示"></a>D MATLAB矩阵表示</h1><h2 id="D-a-矩阵的建立"><a href="#D-a-矩阵的建立" class="headerlink" title="D. a 矩阵的建立"></a>D. a 矩阵的建立</h2><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204340867151.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204342140453.png" class title="在这里插入图片描述">
<h2 id="D-b-冒号表达式-linspace"><a href="#D-b-冒号表达式-linspace" class="headerlink" title="D. b 冒号表达式(linspace)"></a>D. b 冒号表达式(linspace)</h2><h3 id="1-用冒号产生行向量t"><a href="#1-用冒号产生行向量t" class="headerlink" title="1 用冒号产生行向量t"></a>1 用冒号产生行向量t</h3><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204343781955.png" class title="在这里插入图片描述">
<h3 id="2-用linspace函数产生行向量x"><a href="#2-用linspace函数产生行向量x" class="headerlink" title="2 用linspace函数产生行向量x"></a>2 用linspace函数产生行向量x</h3><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204344543057.png" class title="在这里插入图片描述">
<h2 id="D-c结构矩阵和单元矩阵"><a href="#D-c结构矩阵和单元矩阵" class="headerlink" title="D. c结构矩阵和单元矩阵"></a>D. c结构矩阵和单元矩阵</h2><h3 id="1-结构矩阵"><a href="#1-结构矩阵" class="headerlink" title="1 结构矩阵"></a>1 结构矩阵</h3><p>在实际应用中，经常会遇到不同类型的数据项组成的实体，例如一个学生的数据实体就包括了年龄，姓名，学号，这些数据是相互联系的。结构数据类型就可以把这些数据类型不同但逻辑上相关的数据组成一个有机的整体。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 结构矩阵元素.成员名=表达式</span><br></pre></td></tr></table></figure>
<p>例如： 学生这个结构数据包含三个成员，分别是年龄，姓名，学号，由结构数据构成的矩阵就是结构矩阵。结构矩阵里的每个元素都是结构数据类型的。即结构矩阵相当于一个班级，结构矩阵里的元素就是这个班级的学生，每个学生有年龄，姓名，学号三个信息（成员）。</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204353200159.png" class title="在这里插入图片描述">
<h3 id="2-单元矩阵"><a href="#2-单元矩阵" class="headerlink" title="2 单元矩阵"></a>2 单元矩阵</h3><p>单元数据类型，也是把不同的数据放在一个变量中，但与结构矩阵所不同的是，结构矩阵的各个元素下还有成员，每个成员都有自己的名字，而单元矩阵的各个元素就是不同类型的数据，每个元素直接由不同类型的数据组成。</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204354044661.png" class title="在这里插入图片描述">
<h1 id="E-矩阵元素的引用"><a href="#E-矩阵元素的引用" class="headerlink" title="E 矩阵元素的引用"></a>E 矩阵元素的引用</h1><h2 id="E-a-矩阵元素的引用方式-sub2ind-ind2sub"><a href="#E-a-矩阵元素的引用方式-sub2ind-ind2sub" class="headerlink" title="E. a 矩阵元素的引用方式(sub2ind,ind2sub)"></a>E. a 矩阵元素的引用方式(sub2ind,ind2sub)</h2><img src="/2022/01/13/MatLab-1/20200225201212298.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204750689263.png" class title="在这里插入图片描述">
<p>如果给出的行下标和列下标大于矩阵的行数和列数，Matlab将自动扩展原来的矩阵，并将扩展后没有赋值的元素赋值为0。</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204751211765.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204751880767.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204752290069.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204753922071.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204756144973.png" class title="在这里插入图片描述">
<h2 id="E-b-利用冒号表达式获得子矩阵-end"><a href="#E-b-利用冒号表达式获得子矩阵-end" class="headerlink" title="E. b 利用冒号表达式获得子矩阵(end)"></a>E. b 利用冒号表达式获得子矩阵(end)</h2><p>子矩阵是指由矩阵中一部分元素构成的矩阵。</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204777353976.png" class title="在这里插入图片描述">
<p>例子:</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204785766578.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204787435480.png" class title="在这里插入图片描述">
<h2 id="E-c利用空矩阵删除矩阵的元素"><a href="#E-c利用空矩阵删除矩阵的元素" class="headerlink" title="E. c利用空矩阵删除矩阵的元素"></a>E. c利用空矩阵删除矩阵的元素</h2><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204788423182.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204788953984.png" class title="在这里插入图片描述">
<h2 id="E-d改变矩阵的形状-reshape"><a href="#E-d改变矩阵的形状-reshape" class="headerlink" title="E. d改变矩阵的形状(reshape)"></a>E. d改变矩阵的形状(reshape)</h2><p>在矩阵总元素保持不变的前提下，将矩阵A重新排成m ∗ n m*nm∗n的二维矩阵。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="built_in">reshape</span>(A,m,n)</span><br></pre></td></tr></table></figure>
<p>注意：reshape函数只是改变原矩阵的行数和列数，但并不改变原矩阵元素个数及其存储顺序。</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204792022986.png" class title="在这里插入图片描述">
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A(:)等价于<span class="built_in">reshape</span>(A,<span class="number">6</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164204792481588.png" class title="在这里插入图片描述">
<h1 id="F-MATLAB基本运算"><a href="#F-MATLAB基本运算" class="headerlink" title="F MATLAB基本运算"></a>F MATLAB基本运算</h1><h2 id="F-a算术运算"><a href="#F-a算术运算" class="headerlink" title="F. a算术运算"></a>F. a算术运算</h2><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326090.png" class title="在这里插入图片描述">
<blockquote>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326291.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326392.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/20200225205645610.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326393.png" class title="在这里插入图片描述">
<p>A^2=A*A<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326394.png" class title="在这里插入图片描述"></p>
</blockquote>
<hr>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326395.png" class title="在这里插入图片描述">
<p>例子：<br><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326396.png" class title="在这里插入图片描述"><br>例题：<br><img src="/2022/01/13/MatLab-1/20200225210349514.png" class title="在这里插入图片描述"></p>
<hr>
<h2 id="F-b-关系运算"><a href="#F-b-关系运算" class="headerlink" title="F. b 关系运算"></a>F. b 关系运算</h2><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326497.png" class title="在这里插入图片描述">
<p>例题：<br><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326498.png" class title="在这里插入图片描述"></p>
<hr>
<h2 id="F-c-逻辑运算-amp"><a href="#F-c-逻辑运算-amp" class="headerlink" title="F. c 逻辑运算(&amp;,|,~)"></a>F. c 逻辑运算(&amp;,|,~)</h2><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164205235326499.png" class title="在这里插入图片描述">
<p>例子：<br><img src="/2022/01/13/MatLab-1/20200225211054779.png" class title="在这里插入图片描述"><br><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642052353265100.png" class title="在这里插入图片描述"></p>
<hr>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642052353265101.png" class title="在这里插入图片描述">
<p>例题：<br><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642052353265102.png" class title="在这里插入图片描述"></p>
<h1 id="G-字符串处理"><a href="#G-字符串处理" class="headerlink" title="G 字符串处理"></a>G 字符串处理</h1><h2 id="G-a-字符串的表示"><a href="#G-a-字符串的表示" class="headerlink" title="G. a 字符串的表示"></a>G. a 字符串的表示</h2><img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053081391119.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053084428121.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053090421123.png" class title="在这里插入图片描述">
<p>要求各行字符数要相等（列数相同）。如果不等，就要用空格调节各行长度，使之数目相等。</p>
<p>例题：<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053113113125.png" class title="在这里插入图片描述"></p>
<h2 id="G-b字符串的操作-strcmp-findstr-strrep"><a href="#G-b字符串的操作-strcmp-findstr-strrep" class="headerlink" title="G. b字符串的操作(strcmp;findstr;strrep)"></a>G. b字符串的操作(strcmp;findstr;strrep)</h2><p>将字符串内容作为MATLAB的命令执行</p>
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053143837127.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053149841129.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053152950131.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053160018133.png" class title="在这里插入图片描述">
<img src="/2022/01/13/MatLab-1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-1642053164397135.png" class title="在这里插入图片描述">
<p><em>原文链接：<a href="https://blog.csdn.net/weixin_44378835/article/details/104499450">https://blog.csdn.net/weixin_44378835/article/details/104499450</a></em></p>
]]></content>
      <tags>
        <tag>美赛</tag>
      </tags>
  </entry>
  <entry>
    <title>MatLab-2</title>
    <url>/2022/01/19/MatLab-2/</url>
    <content><![CDATA[<p>美赛MatLab学习第二篇：</p>
<ul>
<li>特殊矩阵</li>
<li>矩阵变换</li>
<li>矩阵求值</li>
<li>矩阵的特征值与特征向量</li>
<li>稀疏矩阵</li>
</ul>
<span id="more"></span>
<h1 id="A-特殊矩阵"><a href="#A-特殊矩阵" class="headerlink" title="A 特殊矩阵"></a>A 特殊矩阵</h1><h2 id="A-a-通用性矩阵"><a href="#A-a-通用性矩阵" class="headerlink" title="A.a 通用性矩阵"></a>A.a 通用性矩阵</h2><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70.png" class title="在这里插入图片描述">
<p>以上函数调用格式相同，以zeros为例：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793671.png" class title="在这里插入图片描述"><br>例题：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793682.png" class title="在这里插入图片描述"></p>
<hr>
<h2 id="A-b-用于专门学科的特殊矩阵"><a href="#A-b-用于专门学科的特殊矩阵" class="headerlink" title="A.b 用于专门学科的特殊矩阵"></a>A.b 用于专门学科的特殊矩阵</h2><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793693.png" class title="在这里插入图片描述">
<p>例题：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793694.png" class title="在这里插入图片描述"></p>
<hr>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793695.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793706.png" class title="在这里插入图片描述">
<hr>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793707.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793708.png" class title="在这里插入图片描述">
<p>rat:有理数</p>
<hr>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425104793719.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164251047937110.png" class title="在这里插入图片描述">
<hr>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164251047937211.png" class title="在这里插入图片描述">
<p>例子：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164251047937212.png" class title="在这里插入图片描述"></p>
<h1 id="B-矩阵变换"><a href="#B-矩阵变换" class="headerlink" title="B 矩阵变换"></a>B 矩阵变换</h1><h2 id="B-a-对角阵"><a href="#B-a-对角阵" class="headerlink" title="B.a 对角阵"></a>B.a 对角阵</h2><img src="/2022/01/19/MatLab-2/20200225224850695.png" class title="在这里插入图片描述">
<hr>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70.png" class title="在这里插入图片描述">
<hr>
<img src="/2022/01/19/MatLab-2/2020022522511771.png" class title="在这里插入图片描述">
<p>例题：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425583543931.png" class title="在这里插入图片描述"></p>
<hr>
<h2 id="B-b-三角阵"><a href="#B-b-三角阵" class="headerlink" title="B.b 三角阵"></a>B.b 三角阵</h2><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425583543932.png" class title="在这里插入图片描述">
<hr>
<img src="/2022/01/19/MatLab-2/20200225225548956.png" class title="在这里插入图片描述">
<hr>
<h2 id="B-c-矩阵的转置"><a href="#B-c-矩阵的转置" class="headerlink" title="B.c 矩阵的转置"></a>B.c 矩阵的转置</h2><img src="/2022/01/19/MatLab-2/20200225225648324.png" class title="在这里插入图片描述">
<p>例子：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425583543943.png" class title="在这里插入图片描述"></p>
<hr>
<h2 id="B-d-矩阵的旋转"><a href="#B-d-矩阵的旋转" class="headerlink" title="B.d 矩阵的旋转"></a>B.d 矩阵的旋转</h2><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425583543954.png" class title="在这里插入图片描述">
<hr>
<h2 id="B-e-矩阵的翻转"><a href="#B-e-矩阵的翻转" class="headerlink" title="B.e 矩阵的翻转"></a>B.e 矩阵的翻转</h2><img src="/2022/01/19/MatLab-2/20200225225949126.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425583543955.png" class title="在这里插入图片描述">
<hr>
<h2 id="B-f-矩阵的求逆"><a href="#B-f-矩阵的求逆" class="headerlink" title="B.f 矩阵的求逆"></a>B.f 矩阵的求逆</h2><img src="/2022/01/19/MatLab-2/20200225230905195.png" class title="在这里插入图片描述">
<p>例题：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-16425583543966.png" class title="在这里插入图片描述"></p>
<h1 id="C-矩阵求值"><a href="#C-矩阵求值" class="headerlink" title="C 矩阵求值"></a>C 矩阵求值</h1><h2 id="C-a-矩阵的行列式"><a href="#C-a-矩阵的行列式" class="headerlink" title="C.a 矩阵的行列式"></a>C.a 矩阵的行列式</h2><img src="/2022/01/19/MatLab-2/20200225231300980.png" class title="在这里插入图片描述">
<p>例题：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837906620.png" class title="在这里插入图片描述"></p>
<hr>
<h2 id="C-b-矩阵的秩"><a href="#C-b-矩阵的秩" class="headerlink" title="C.b 矩阵的秩"></a>C.b 矩阵的秩</h2><img src="/2022/01/19/MatLab-2/2020022523151992.png" class title="在这里插入图片描述">
<p>例题：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837906721.png" class title="在这里插入图片描述"></p>
<h2 id="C-c-矩阵的迹"><a href="#C-c-矩阵的迹" class="headerlink" title="C.c 矩阵的迹"></a>C.c 矩阵的迹</h2><img src="/2022/01/19/MatLab-2/20200225231809926.png" class title="在这里插入图片描述">
<p>例子：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837906822.png" class title="在这里插入图片描述"></p>
<hr>
<h2 id="C-d-向量和矩阵的范数"><a href="#C-d-向量和矩阵的范数" class="headerlink" title="C.d 向量和矩阵的范数"></a>C.d 向量和矩阵的范数</h2><p>矩阵或向量的范数用来度量矩阵或向量在某种意义下的长度。<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837906823.png" class title="在这里插入图片描述"><br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837906924.png" class title="在这里插入图片描述"><br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837906925.png" class title="在这里插入图片描述"><br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837906926.png" class title="在这里插入图片描述"></p>
<hr>
<h2 id="C-e-矩阵的条件数"><a href="#C-e-矩阵的条件数" class="headerlink" title="C.e 矩阵的条件数"></a>C.e 矩阵的条件数</h2><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837907027.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837907028.png" class title="在这里插入图片描述">
<p>例题：<br><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255837907029.png" class title="在这里插入图片描述"></p>
<h1 id="D-矩阵的特征值与特征向量"><a href="#D-矩阵的特征值与特征向量" class="headerlink" title="D 矩阵的特征值与特征向量"></a>D 矩阵的特征值与特征向量</h1><h2 id="D-a-矩阵特征值的数学定义"><a href="#D-a-矩阵特征值的数学定义" class="headerlink" title="D.a 矩阵特征值的数学定义"></a>D.a 矩阵特征值的数学定义</h2><img src="/2022/01/19/MatLab-2/20200226010535257.png" class title="在这里插入图片描述">
<p>D.b 求矩阵的特征值和特征向量</p>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255850733044.png" class title="在这里插入图片描述">
<p>例子：A<em>X(:,1)=D(1)</em>X(:,1)</p>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255851613546.png" class title="在这里插入图片描述">
<p>例题：<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255852734348.png" class title="在这里插入图片描述"></p>
<p>X3对角为X1和X2</p>
<h2 id="D-c-特征值的几何意义"><a href="#D-c-特征值的几何意义" class="headerlink" title="D.c 特征值的几何意义"></a>D.c 特征值的几何意义</h2><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255859461450.png" class title="在这里插入图片描述">
<p>y1和y2分别是x1和x2经过A矩阵变换得到的。把λ 1 、 λ 2  当作伸缩因子，y1和y2是x1和x2经过λ 1 、 λ 2 伸缩以后的结果，如图所示。<br>更进一步地，连续取单位向量x，让它大小保持唯一，那么Ax就将圆弧拉伸，变成椭圆弧。</p>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255860386352.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255862002954.png" class title="在这里插入图片描述">
<h1 id="E-稀疏矩阵"><a href="#E-稀疏矩阵" class="headerlink" title="E 稀疏矩阵"></a>E 稀疏矩阵</h1><p>稀疏矩阵指的是零元素个数远远多于非零元素个数的矩阵，如果将大量的零元素也存储起来，必将导致存储空间的浪费。为此，MATLAB为稀疏矩阵提供特殊的存储方式。</p>
<h2 id="E-a矩阵的存储方式"><a href="#E-a矩阵的存储方式" class="headerlink" title="E.a矩阵的存储方式"></a>E.a矩阵的存储方式</h2><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255866639256.png" class title="在这里插入图片描述">
<p>例子：</p>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255867153958.png" class title="在这里插入图片描述">
<h2 id="E-b-稀疏存储方式的产生"><a href="#E-b-稀疏存储方式的产生" class="headerlink" title="E.b 稀疏存储方式的产生"></a>E.b 稀疏存储方式的产生</h2><img src="/2022/01/19/MatLab-2/20200226023122506.png" class title="在这里插入图片描述">
<p>例子：</p>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255868790261.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255869642163.png" class title="在这里插入图片描述">
<p>例子：</p>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255870017665.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255870666067.png" class title="在这里插入图片描述">
<p>用A的一行元素表示一个稀疏矩阵的元素，相当于A每一行的每个元素是相应的稀疏矩阵元素的一个信息。这些信息组合经过spconvert就可以得到相应的稀疏矩阵元素。<br>例子：<br>A描述的稀疏矩阵：[2，2，1：第二行第二列的1；2，1，-1：第二行第一列的-1；2，4，3：第二行第四列的3；其他为0。]经过spconvert实现A描述的稀疏矩阵。</p>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255872102169.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/20200226024731653.png" class title="在这里插入图片描述">
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255873477772.png" class title="在这里插入图片描述">
<p>例子：<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255877359074.png" class title="在这里插入图片描述"></p>
<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255878315476.png" class title="在这里插入图片描述">
<p>A的稀疏存储<img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255879032178.png" class title="在这里插入图片描述">：</p>
<h2 id="E-c-稀疏矩阵应用举例"><a href="#E-c-稀疏矩阵应用举例" class="headerlink" title="E.c 稀疏矩阵应用举例"></a>E.c 稀疏矩阵应用举例</h2><img src="/2022/01/19/MatLab-2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3ODgzNQ==,size_16,color_FFFFFF,t_70-164255882042680.png" class title="在这里插入图片描述">
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear</span><br><span class="line">kf1= [<span class="number">1</span>;<span class="number">1</span>;<span class="number">2</span>;<span class="number">1</span>;<span class="number">0</span>];     <span class="comment">% 主对角线以下第一条元素</span></span><br><span class="line">k0 = [<span class="number">2</span>;<span class="number">4</span>;<span class="number">6</span>;<span class="number">6</span>;<span class="number">1</span>];     <span class="comment">% 主对角线元素</span></span><br><span class="line">k1 = [<span class="number">0</span>;<span class="number">3</span>;<span class="number">1</span>;<span class="number">4</span>;<span class="number">2</span>];     <span class="comment">% 主对角线以上第一条元素</span></span><br><span class="line">B = [kf1,k0,k1];</span><br><span class="line">d = [<span class="number">-1</span>;<span class="number">0</span>;<span class="number">1</span>];</span><br><span class="line">A = spdiags(B,d,<span class="number">5</span>,<span class="number">5</span>); <span class="comment">% 产生稀疏存储的稀疏矩阵</span></span><br><span class="line">f = [<span class="number">0</span>;<span class="number">3</span>;<span class="number">2</span>;<span class="number">1</span>;<span class="number">5</span>];</span><br><span class="line">x = A\f               <span class="comment">%求出解</span></span><br></pre></td></tr></table></figure>
<img src="/2022/01/19/MatLab-2/20200226031806642.png" class title="在这里插入图片描述">
<p>原文链接：<a href="https://blog.csdn.net/weixin_44378835/article/details/104499754">https://blog.csdn.net/weixin_44378835/article/details/104499754</a></p>
]]></content>
      <tags>
        <tag>美赛</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL初步</title>
    <url>/2021/07/14/MySQL%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>MySQL 是最流行的关系型数据库管理系统，后端必会！！</p>
<p>下面我们对MySQL做一个系统的介绍：</p>
<span id="more"></span>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>常见的数据库SQLlite、MySQL、 SQLServer、postgreSQL、Oracle</p>
<p>主流的关系型数据库，类似的还有postgreSQL</p>
<p>关系型数据库：</p>
<p>用表来存一类数据。</p>
<p>表结构设计的三大范式：《漫画数据库》</p>
<h3 id="MySQL知识点"><a href="#MySQL知识点" class="headerlink" title="MySQL知识点"></a>MySQL知识点</h3><p>SQL语句</p>
<p>DDL: 操作数据库的</p>
<p>DML: 表的增删改查</p>
<p>DCL：用户及权限</p>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p><em>MySQL 支持插件式的存储引擎。</em></p>
<p><em>常见的存储引擎：MylSAM和InnoDB</em></p>
<p><em>MyLSAM：</em></p>
<p>​    <em>1.查询速度快</em></p>
<p>​    <em>2.只支持表锁</em></p>
<p>​    <em>3.不支持事务</em></p>
<p><em>InnoDB：</em></p>
<p>​    <em>1.整体速度快</em></p>
<p>​    <em>2.支持表锁和行锁</em></p>
<p>​    <em>3.支持事务</em></p>
<p><em>事务：</em></p>
<p><em>把多个操作当成一个整体</em></p>
<p><em>事务的特点：</em></p>
<p><em>ACID:</em></p>
<p>​    <em>1.原子性：事务要么成功要么失败，没有中间状态。</em></p>
<p>​    <em>2.一致性：数据库的完整性没有被破坏。</em></p>
<p>​    <em>3.隔离性：事务之间是相互隔离的。</em></p>
<p>​        <em>（1）隔离的四个级别</em></p>
<p>​    <em>4.持久性：事务操作的结果是不会丢失的。</em></p>
<p><em>索引：</em></p>
<p><em>索引的原理：B树和B+树</em></p>
<p><em>索引的类型</em></p>
<p><em>索引的命中</em></p>
<p><em>分库分表</em></p>
<p><em>SQL注入</em></p>
<p><em>SQL慢查询优化</em></p>
<p><em>MySQL主从：</em></p>
<p>​    <em>binlog</em></p>
<p><em>MySQL读写分离</em></p>
<h3 id="Mysql安装"><a href="#Mysql安装" class="headerlink" title="Mysql安装"></a>Mysql安装</h3><p><strong>①安装服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --install</span><br></pre></td></tr></table></figure>
<p><strong>②初始化</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　mysqld --initialize --console</span><br></pre></td></tr></table></figure>
<p><strong>③开启服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
<p><strong>④关闭服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>
<p> <strong>⑤登录mysql：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>　Enter Password：(密码）</p>
<p><strong>⑥修改密码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;root&#39;(by 接着的是密码)</span><br></pre></td></tr></table></figure>
<p> <strong>⑦标记删除mysql服务</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc delete mysql</span><br></pre></td></tr></table></figure>
<h3 id="Go操作MySQL："><a href="#Go操作MySQL：" class="headerlink" title="Go操作MySQL："></a>Go操作MySQL：</h3><h4 id="database-sql"><a href="#database-sql" class="headerlink" title="database/sql"></a>database/sql</h4><p>原生支持连接池，是并发安全的</p>
<p>这个标准库没有具体的实现，知识列出了一些需要第三方库实现的具体内容</p>
<h4 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>
<p><code>go get</code>包的路径就是下载第三方的依赖</p>
<p>将第三方的依赖默认保存在<code>&amp;GOPATH/src</code></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="初始化连接"><a href="#初始化连接" class="headerlink" title="初始化连接"></a>初始化连接</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   _<span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//Go连接MySQL示例my</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//连数据库</span></span><br><span class="line">   dsn:= <span class="string">&quot;root:Polaris6G123@tcp127.0.0.1:3306/sql_test&quot;</span></span><br><span class="line">   <span class="comment">//连接数据库</span></span><br><span class="line">   db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>,dsn)<span class="comment">//不会校验用户名和密码是否匹配和正确</span></span><br><span class="line">   <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;<span class="comment">//dsn格式不正确的时候会报错</span></span><br><span class="line">      fmt.Printf(<span class="string">&quot;dsn:%s invaild, err:%v\n&quot;</span>,dsn,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   err = db.Ping()<span class="comment">//尝试连接数据库（真正需要密码匹配）</span></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;<span class="comment">//密码不正确会报错</span></span><br><span class="line">      fmt.Printf(<span class="string">&quot;open %s failes, err:%v\n&quot;</span>,dsn,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;连接数据库资源成功！&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="SetMaxOpenConns"><a href="#SetMaxOpenConns" class="headerlink" title="SetMaxOpenConns"></a>SetMaxOpenConns</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">SetMaxOpenConns</span><span class="params">(n <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure>
<p><code>SetMaxOpenConns</code>设置与数据库建立连接的最大数目。 如果n大于0且小于最大闲置连接数，会将最大闲置连接数减小到匹配最大开启连接数的限制。 如果n&lt;=0，不会限制最大开启连接数，默认为0（无限制）。</p>
<h5 id="SetMaxIdleConns"><a href="#SetMaxIdleConns" class="headerlink" title="SetMaxIdleConns"></a>SetMaxIdleConns</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">SetMaxIdleConns</span><span class="params">(n <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>SetMaxIdleConns设置连接池中的最大闲置连接数。 如果n大于最大开启连接数，则新的最大闲置连接数会减小到匹配最大开启连接数的限制。 如果n&lt;=0，不会保留闲置连接。</p>
<h5 id="单条-多条查询"><a href="#单条-多条查询" class="headerlink" title="单条+多条查询"></a>单条+多条查询</h5><p><em>单行查询<code>db.QueryRow()</code>执行一次查询，并期望返回最多一行结果（即Row）。QueryRow总是返回非nil的值，直到返回值的Scan方法被调用时，才会返回被延迟的错误。（如：未找到结果）</em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">QueryRow</span><span class="params">(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">Row</span></span></span><br></pre></td></tr></table></figure>
<p><em>多行查询db.Query()执行一次查询，返回多行结果（即Rows），一般用于执行select命令。参数args表示query中的占位参数。</em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">Query</span><span class="params">(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*Rows, error)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   _<span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//Go连接MySQL示例my</span></span><br><span class="line"><span class="keyword">var</span> db *sql.DB <span class="comment">//定义一个全局变量，是一个数据库连接池对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span><span class="params">(err error)</span></span>&#123;</span><br><span class="line">   <span class="comment">//数据库信息</span></span><br><span class="line">   <span class="comment">//用户名：密码@tcp(ip:端口)/数据库名字</span></span><br><span class="line">   dsn:= <span class="string">&quot;root:Polaris6G@tcp(127.0.0.1:3306)/sql_test&quot;</span></span><br><span class="line">   <span class="comment">//连接数据库</span></span><br><span class="line">   db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>,dsn)<span class="comment">//不会校验用户名和密码是否匹配和正确//是=不是:=这里细节拉满</span></span><br><span class="line">   <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;<span class="comment">//dsn格式不正确的时候会报错</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   err = db.Ping()<span class="comment">//尝试连接数据库（真正需要密码匹配）</span></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   db.SetMaxOpenConns(<span class="number">10</span>)<span class="comment">//设置数据库连接池的最大连接数</span></span><br><span class="line">   db.SetMaxIdleConns(<span class="number">5</span>)<span class="comment">//设置最大空闲连接数</span></span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">   id <span class="keyword">int</span></span><br><span class="line">   name <span class="keyword">string</span></span><br><span class="line">   age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询单个记录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryOne</span><span class="params">(id <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">   <span class="keyword">var</span> u1 user</span><br><span class="line">   <span class="comment">//1.查询单条记录的sql语句</span></span><br><span class="line">   sqlStr := <span class="string">`select id, name, age from user where id=?;`</span><span class="comment">//?占位符表示不确定，由下面的代码确定，也可写死</span></span><br><span class="line">   <span class="comment">//2.执行</span></span><br><span class="line">   rowObj :=db.QueryRow(sqlStr,id)<span class="comment">//从连接池里拿出来一个连接去数据库查询单条记录</span></span><br><span class="line">   <span class="comment">//3.拿到结果</span></span><br><span class="line">   rowObj.Scan(&amp;u1.id, &amp;u1.name, &amp;u1.age )<span class="comment">//必须对rowObj对象调用Scan方法，因为该方法会释放数据库链接</span></span><br><span class="line">   <span class="comment">//打印结果</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;u1: %v\n&quot;</span>, u1)</span><br><span class="line">   <span class="comment">//或者合并</span></span><br><span class="line">   <span class="comment">//db.QueryRow(sqlStr, 1).Scan(&amp;u1.id, &amp;u1.name, &amp;u1.age)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询多行记录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryMore</span><span class="params">(n <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">	<span class="comment">//1.sql语句</span></span><br><span class="line">	sqlStr := <span class="string">`select id ,name,age from user where id&gt;=?;`</span></span><br><span class="line">	<span class="comment">//2.执行</span></span><br><span class="line">	rows, err :=db.Query(sqlStr, n)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;exed %s query failed, err:%v\n&quot;</span>,sqlStr, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3.一定要关闭rows</span></span><br><span class="line">	<span class="keyword">defer</span> rows.Close()</span><br><span class="line">	<span class="comment">//4.循环取值</span></span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">		<span class="keyword">var</span> u2 user</span><br><span class="line">		err := rows.Scan(&amp;u2.id, &amp;u2.name, &amp;u2.age)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;scan failed,err=%v\n &quot;</span>,err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;u2:%v\n&quot;</span>,u2)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   err := initDB()</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;init DB failed, err:%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;连接数据库成功！&quot;</span>)</span><br><span class="line">   queryOne(<span class="number">2</span>)</span><br><span class="line">   queryMore(<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>插入、更新和删除操作都使用<code>Exec</code>方法。</em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">Exec</span><span class="params">(query <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(Result, error)</span></span></span><br></pre></td></tr></table></figure>
<h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//1.写sql语句</span></span><br><span class="line">   sqlStr :=<span class="string">`insert into user(name, age)values(?, ?)`</span></span><br><span class="line">   <span class="comment">//2.exec</span></span><br><span class="line">   ret, err := db.Exec(sqlStr,<span class="string">&quot;Jason&quot;</span>, <span class="number">23</span>)</span><br><span class="line">   <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;insert failed,err:%v\n&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//3.如果是插入数据的操作，能拿到插入数据的id和被影响行数</span></span><br><span class="line">   id, err := ret.LastInsertId()</span><br><span class="line">   <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;get id failed,err:%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;id:&quot;</span>,id)</span><br><span class="line">   num, err :=ret.RowsAffected()</span><br><span class="line">   <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;get row number failed,err:%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;affected row:&quot;</span>,num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updaterow</span><span class="params">(newage <span class="keyword">int</span>, id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   sqlStr := <span class="string">&quot;update user set age=? where id =?&quot;</span></span><br><span class="line">   ret, err := db.Exec(sqlStr, newage, id)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;update failed,err:%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   n, err := ret.RowsAffected()</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;get RowsAffected failed, err:%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;update success, affected rows:%d\n&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleterow</span><span class="params">(id <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">   sqlStr := <span class="string">`delete from user where id=?`</span></span><br><span class="line">   ret, err :=db.Exec(sqlStr, id)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;delete failed,err:%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   n, err := ret.RowsAffected()</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;get RowsAffected failed, err:%v\n&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;delete success, affected rows:%d\n&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h5><p><strong>什么是预处理？</strong></p>
<p>普通SQL语句执行过程：</p>
<ol>
<li>客户端对SQL语句进行占位符替换得到完整的SQL语句。</li>
<li>客户端发送完整SQL语句到MySQL服务端</li>
<li>MySQL服务端执行完整的SQL语句并将结果返回给客户端。</li>
</ol>
<p>预处理执行过程：</p>
<ol>
<li>把SQL语句分成两部分，命令部分与数据部分。</li>
<li>先把命令部分发送给MySQL服务端，MySQL服务端进行SQL预处理。</li>
<li>然后把数据部分发送给MySQL服务端，MySQL服务端对SQL语句进行占位符替换。</li>
<li>MySQL服务端执行完整的SQL语句并将结果返回给客户端。</li>
</ol>
<p><strong>为什么要预处理？</strong></p>
<ol>
<li>优化MySQL服务器重复执行SQL的方法，可以提升服务器性能，提前让服务器编译，一次编译多次执行，节省后续编译的成本。</li>
<li>避免SQL注入问题。</li>
</ol>
<p><strong>具体实现</strong></p>
<p><code>database/sql</code>中使用下面的<code>Prepare</code>方法来实现预处理操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">Prepare</span><span class="params">(query <span class="keyword">string</span>)</span> <span class="params">(*Stmt, error)</span></span></span><br></pre></td></tr></table></figure>
<p><code>Prepare</code>方法会先将sql语句发送给MySQL服务端，返回一个准备好的状态用于之后的查询和命令。返回值可以同时执行多个查询和命令。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareinsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">   sqlStr :=<span class="string">`insert into user(name, age)values(?,?)`</span><span class="comment">//把sql语句先发给MySQL预处理</span></span><br><span class="line">   stmt, err := db.Prepare(sqlStr)</span><br><span class="line">   <span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;prepare failed,err:%v\n&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> stmt.Close()</span><br><span class="line">   <span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">      <span class="string">&quot;王铁柱&quot;</span>:<span class="number">33</span>,</span><br><span class="line">      <span class="string">&quot;田二妞&quot;</span>:<span class="number">32</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//后续只需要拿到stmt去执行一些操作</span></span><br><span class="line">   <span class="keyword">for</span> k, v :=<span class="keyword">range</span> m&#123;</span><br><span class="line">      stmt.Exec(k,v)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应关系：</p>
<p>数据表&lt;—&gt;结构体</p>
<p>数据行&lt;—&gt;结构体实例</p>
<p>字段&lt;—&gt;结构体字段</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span>&#123;</span><br><span class="line">	ID <span class="keyword">uint</span></span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Gender <span class="keyword">string</span></span><br><span class="line">	Hobby <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	u1:=UserInfo&#123;<span class="number">1</span>,<span class="string">&quot;Polaris&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;足球&quot;</span>&#125;</span><br><span class="line">	<span class="comment">//将u1数据存入数据库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch笔记</title>
    <url>/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<p>毕设的PyTorch学习之旅~~</p>
<span id="more"></span>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda&#x3D;11.8 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure>
<p>验证程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">x &#x3D; torch.rand(5, 3)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>查看GPU驱动和CUDA是否可用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure>
<p>实战好用的<strong>两大法宝</strong>：</p>
<ul>
<li>dir()函数：能让我们知道工具箱以及工具箱中的分隔区有什么东西</li>
<li>help()函数：能让我们知道每个工具使如何使用的（工具的使用方法）</li>
</ul>
<p>平台区别：</p>
<ul>
<li>python文件：以文件全部为块运行</li>
<li>python控制台：以每一行为块运行</li>
<li>jupyter：以任意行为块运行</li>
</ul>
<h1 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h1><p>Dataset：提供一种方式去获取数据以及label</p>
<p>Dataloader：为后面的网络提供不同的数据形式</p>
<ul>
<li>如何获取每一个数据及其label</li>
<li>告诉我们总共有多少个数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">from PIL import Image</span><br><span class="line">class MyData(DataSet):  # 管理一个文件夹(root_dir&#x2F;label_dir)下的图片集</span><br><span class="line">    def __init__(self, root_dir, label_dir):</span><br><span class="line">        self.root_dir &#x3D; root_dir</span><br><span class="line">        self.label_dir &#x3D; label_dir</span><br><span class="line">        self.path &#x3D; os.path.join(self.root_dir, self,label_dir)</span><br><span class="line">        self.img_path &#x3D; os.listdir(self.path)</span><br><span class="line">        </span><br><span class="line">    def __getitem__(self, idx):</span><br><span class="line">        img_name &#x3D; self.img_path[idx]</span><br><span class="line">        img_item_path &#x3D; os.path.join(self.root_dir, self,label_dir, img_name)</span><br><span class="line">        img &#x3D; Image.open(img_item_path)</span><br><span class="line">        label &#x3D; self.label_dir</span><br><span class="line">        return img, label</span><br><span class="line">    </span><br><span class="line">    def __len(self):</span><br><span class="line">        retrun len(self.img_path)</span><br><span class="line"></span><br><span class="line">root_dir &#x3D; &quot;dataset&#x2F;train&quot;</span><br><span class="line">ants_label_dir &#x3D; &quot;ant&quot;</span><br><span class="line">bees_label_dir &#x3D; &quot;bee&quot;</span><br><span class="line">ants_dataset &#x3D; MyData(root_dir, ants_label_dir)</span><br><span class="line">bees_dataset &#x3D; MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line"># 加和数据集</span><br><span class="line">train_dataset &#x3D; ants_dataset + bees_dataset</span><br><span class="line">len(ants_data)  # 124</span><br><span class="line">len(bees_dataset)  # 121</span><br><span class="line">len(train_dataset)  # 245</span><br></pre></td></tr></table></figure>
<h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><h2 id="tensorboard"><a href="#tensorboard" class="headerlink" title="tensorboard"></a>tensorboard</h2><p>需要先安装tensorboard</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install tensorboard</span><br></pre></td></tr></table></figure>
<p><code>add_scalar</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># writer.add_image()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;y=x&quot;</span>, i, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p>生成logs文件夹，其中包含tensorboad的事件文件</p>
<p>打开方式(默认端口6006)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tensorboard --logdir-logs -port=6007</span><br></pre></td></tr></table></figure>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240225220111820.png" class title="image-20240225220111820">
<p><code>add_image</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">image_path = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">img_PIL = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">img_array = np.array(img_PIL)</span><br><span class="line">writer.add_images(<span class="string">&quot;test&quot;</span>, img_array, <span class="number">1</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tag (str): Data identifier</span><br><span class="line">img_tensor (torch.Tensor, numpy.ndarray, or string/blobname): Image data</span><br><span class="line">global_step (int): Global step value to record</span><br><span class="line">walltime (float): Optional override default walltime (time.time())</span><br><span class="line">  seconds after epoch of event</span><br><span class="line">dataformats (str): Image data format specification of the form</span><br><span class="line">  CHW, HWC, HW, WH, etc.</span><br></pre></td></tr></table></figure>
<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p>核心文件：transforms.py</p>
<ul>
<li><code>ToTenser</code></li>
<li><code>resize</code><br>python的用法 -&gt; tensor数据类型<br>通过 transforms.ToTensor去看两个问题</li>
</ul>
<ol>
<li>tranfroms该如何使用</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"></span><br><span class="line">tensor_trans = transfroms.ToTensor()  <span class="comment"># image类型 -&gt; tensor类型</span></span><br><span class="line">tensor_img = tensor_trans(img)</span><br></pre></td></tr></table></figure>
<ol>
<li>为什么我们需要Tensor数据类型</li>
</ol>
<p>tensor数据类型是神经网络的专用数据类型，包含了神经网络所需的参数</p>
<p>常见的transform用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">print(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ToTensor</span></span><br><span class="line">tensor_totensor = transforms.ToTensor()</span><br><span class="line">img_tensor = trans_totensor(img)</span><br><span class="line">writer.add_imgae(<span class="string">&quot;ToTensor&quot;</span>, img_tensor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize 归一化  output[channel] = (input[channel] - mean[channel]) / std[channel])</span></span><br><span class="line"><span class="comment"># Given mean: ``(mean[1],...,mean[n])`` and std: ``(std[1],..,std[n])`` for ``n``</span></span><br><span class="line">trans_norm = transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">img_norm = trans_norm(img_tensor)</span><br><span class="line">writer.add_imge(<span class="string">&quot;Normalize&quot;</span>, img_norm, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize 调整图片大小</span></span><br><span class="line">print(img.size)</span><br><span class="line">trans_size = transforms.Resize((<span class="number">512</span>, <span class="number">512</span>))</span><br><span class="line">img_resize = trans_size(img)  <span class="comment"># PIL image</span></span><br><span class="line">img_size = trans_totensor(img_resize)  <span class="comment"># ToTensor</span></span><br><span class="line">writer.add_image(<span class="string">&quot;Resize&quot;</span>, img_size, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compose - resize - 2</span></span><br><span class="line">trans_resize_2 = transforms.Resize(<span class="number">512</span>)</span><br><span class="line">trans_compose = transforms.Compose([trans_resize_2, trans_totensor])</span><br><span class="line">img_resize_2 = trans_compose(img)</span><br><span class="line">writer.add_image(<span class="string">&quot;Resize&quot;</span>, img_resize_2, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RandomCrop  随机裁剪</span></span><br><span class="line">trans_random = transforms.RandomCrop(<span class="number">512</span>)</span><br><span class="line">trans_compose_2 = transforms.Compose([trans_random, trans_totensor])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img_crop = trans_compose_2(img)</span><br><span class="line">    writer.add_image(<span class="string">&quot;RandomCrop&quot;</span>, img_crop, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<h1 id="datasets"><a href="#datasets" class="headerlink" title="datasets"></a>datasets</h1><p>插入数据集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import torchvision</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transform &#x3D; torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"># 调用数据集(官网可查看) root 下载根目录 train 是否设定为训练集 否则为测试集</span><br><span class="line">train_set &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&quot;&#x2F;dataset&quot;, train&#x3D;True, transform&#x3D;dataset_transform, download&#x3D;True)</span><br><span class="line">test_set &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&quot;&#x2F;dataset&quot;, train&#x3D;False, transform&#x3D;dataset_transform, download&#x3D;True)</span><br><span class="line"></span><br><span class="line"># 单个显示操作</span><br><span class="line">img, target &#x3D; test_set[0]</span><br><span class="line">print(img, target)</span><br><span class="line">print(test_set.classes[target])</span><br><span class="line">img.show()</span><br><span class="line"></span><br><span class="line"># 与tensorboard结合实现</span><br><span class="line">writer &#x3D; SummaryWriter(&quot;logs&quot;)</span><br><span class="line">for i in range(10):</span><br><span class="line">    img, target &#x3D; test_set[i]</span><br><span class="line">    writer.add_image(&quot;test_set&quot;, img, i)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<h1 id="dataloader"><a href="#dataloader" class="headerlink" title="dataloader"></a>dataloader</h1><p>从dataset数据集中取数据，加载数据提供给神经网络</p>
<p>讲解：<a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader">https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用数据集(官网可查看) root 下载根目录 train 是否设定为训练集 否则为测试集</span></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;/dataset&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">test_loader = DataLoader(dataset=test_data, batch_size=<span class="number">4</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数据集中第一章图片及target</span></span><br><span class="line">img, target = test_data[<span class="number">0</span>]</span><br><span class="line">print(img.shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs, targets = data  <span class="comment"># 已打包</span></span><br><span class="line">    print(imgs.shape)</span><br><span class="line">    print(targets)</span><br></pre></td></tr></table></figure>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240227213050466.png" class title="image-20240227213050466">
<h1 id="torch-nn"><a href="#torch-nn" class="headerlink" title="torch.nn"></a>torch.nn</h1><p>教程：<a href="https://pytorch.org/docs/stable/nn.html#module-torch.nn">https://pytorch.org/docs/stable/nn.html#module-torch.nn</a></p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span></span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">network = NetWork()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">print(x)</span><br><span class="line">x = network(x)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<h2 id="卷积层-Convolution-Layers"><a href="#卷积层-Convolution-Layers" class="headerlink" title="卷积层(Convolution Layers)"></a>卷积层(Convolution Layers)</h2><p><a href="https://pytorch.org/docs/stable/nn.html#convolution-layers">https://pytorch.org/docs/stable/nn.html#convolution-layers</a></p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240228111833413.png" class title="image-20240228111833413">
<p>Stride = 2时得到2 * 2矩阵</p>
<p>计算公式：</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240229101731080.png" class title="image-20240229101731080">
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">kernel = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">input</span>.shape)</span><br><span class="line">print(kernel.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))  <span class="comment"># input tensor of shape(minibatch, in_channels, iH, iW)</span></span><br><span class="line">kernel = torch.reshape(kernel, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">input</span>.shape)</span><br><span class="line">print(kernel.shape)</span><br><span class="line">output = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">1</span>)  <span class="comment"># stride为步长</span></span><br><span class="line">print(output)</span><br><span class="line"></span><br><span class="line">output2 = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">2</span>)</span><br><span class="line">print(output2)</span><br><span class="line"></span><br><span class="line">output3 = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">1</span>, padding=<span class="number">1</span>)  <span class="comment"># padding设置外边距(扩增)</span></span><br><span class="line">print(output3)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240228112401374.png" class title="image-20240228112401374">
<p>padding参数的用法：</p>
<p>padding为1：使input四周拓展一格</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240228112345050.png" class title="image-20240228112345050">
<p><code>torch.nn.Conv2d(*in_channels*, *out_channels*, *kernel_size*, *stride=1*, *padding=0*, *dilation=1*, *groups=1*, *bias=True*, *padding_mode=&#39;zeros&#39;*, *device=None*, *dtype=None*)</code></p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240228181914415.png" class title="image-20240228181914415">
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240228182137330.png" class title="image-20240228182137330">
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line">        self.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = NetWork()</span><br><span class="line">print(net)</span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    output = net(imgs)</span><br><span class="line">    print(imgs.shape)</span><br><span class="line">    print(output.shape)</span><br><span class="line">    <span class="comment"># torch.size([64, 3, 32, 32])</span></span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    <span class="comment"># torch.size([64, 6, 30, 30]) -&gt; [xxx, 3, 30, 30]</span></span><br><span class="line">    output = torch.reshape(output, (-<span class="number">1</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    print(output.shape)</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240228184456015.png" class title="image-20240228184456015">
<h2 id="池化层-Pooling-Layers"><a href="#池化层-Pooling-Layers" class="headerlink" title="池化层(Pooling Layers)"></a>池化层(Pooling Layers)</h2><img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240228202305711.png" class title="image-20240228202305711">
<p><code>torch.nn.MaxPool2d(*kernel_size*, *stride=None*, *padding=0*, *dilation=1*, *return_indices=False*, *ceil_mode=False*)</code></p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240228202412255.png" class title="image-20240228202412255">
<p>池化作用：保留数据特征，减少数据量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype=torch.int64)</span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line">        self.maxpoll1 = MaxPool2d(kernel_size=(<span class="number">3</span>, <span class="number">3</span>), ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.maxpoll1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">network = NetWork()</span><br><span class="line">output = network(<span class="built_in">input</span>)</span><br><span class="line">print(output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[[[2, 3],</span></span><br><span class="line"><span class="comment">#           [5, 1]]]])</span></span><br></pre></td></tr></table></figure>
<p>图像处理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line">        self.maxpoll1 = MaxPool2d(kernel_size=(<span class="number">3</span>, <span class="number">3</span>), ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.maxpoll1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    output = network(imgs)</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果相当于马赛克</span></span><br></pre></td></tr></table></figure>
<h2 id="非线性激活-Non-linear-Activations"><a href="#非线性激活-Non-linear-Activations" class="headerlink" title="非线性激活(Non-linear Activations)"></a>非线性激活(Non-linear Activations)</h2><p>导航：<a href="https://pytorch.org/docs/stable/nn.html#non-linear-activations-weighted-sum-nonlinearity">https://pytorch.org/docs/stable/nn.html#non-linear-activations-weighted-sum-nonlinearity</a></p>
<p>relu：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>, -<span class="number">0.5</span>], [-<span class="number">1</span>, <span class="number">3</span>]])</span><br><span class="line">output = torch.reshape(<span class="built_in">input</span>, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">print(output.shape)</span><br><span class="line">print(output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line">        self.relu1 = ReLU()  <span class="comment"># inplace = True input会被改变 False(默认)则input不会被改变</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.relu1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = NetWork()</span><br><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>
<h2 id="Normalization-Layers"><a href="#Normalization-Layers" class="headerlink" title="Normalization Layers"></a>Normalization Layers</h2><p> 加快神经网络的训练速度</p>
<p>参考：<a href="https://pytorch.org/docs/stable/nn.html#normalization-layers">https://pytorch.org/docs/stable/nn.html#normalization-layers</a></p>
<p>典型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># With Learnable Parameters</span></span><br><span class="line">m = nn.BatchNorm2d(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># Without Learnable Parameters</span></span><br><span class="line">m = nn.BatchNorm2d(<span class="number">100</span>, affine=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">20</span>, <span class="number">100</span>, <span class="number">35</span>, <span class="number">45</span>)</span><br><span class="line">output = m(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;nn.BatchNorm2d的参数affine决定了该层是否学习仿射变换的参数。当affine=True时，该层会学习两个可学习的参数：gamma和beta，这两个参数分别用于缩放和偏移归一化后的数据。具体来说，归一化后的数据乘以gamma并加上beta。当affine=False时，gamma和beta被设置为1和0，这意味着归一化后的数据不会被进一步缩放或偏移。&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="recurrent-Layers"><a href="#recurrent-Layers" class="headerlink" title="recurrent Layers"></a>recurrent Layers</h2><p>参考：<a href="https://pytorch.org/docs/stable/nn.html#recurrent-layers">https://pytorch.org/docs/stable/nn.html#recurrent-layers</a></p>
<ul>
<li>RNN：<strong>Recurrent Neural Network</strong></li>
<li>LSTM：<strong>Long Short-Term Memory</strong></li>
<li>GRU：<strong>Gated Recurrent Unit</strong></li>
</ul>
<h2 id="transformer-Layers"><a href="#transformer-Layers" class="headerlink" title="transformer Layers"></a>transformer Layers</h2><p>参考：<a href="https://pytorch.org/docs/stable/nn.html#transformer-layers">https://pytorch.org/docs/stable/nn.html#transformer-layers</a></p>
<h2 id="Linear-Layers"><a href="#Linear-Layers" class="headerlink" title="Linear Layers"></a>Linear Layers</h2><p>参考：<a href="https://pytorch.org/docs/stable/nn.html#linear-layers">https://pytorch.org/docs/stable/nn.html#linear-layers</a></p>
<p>nn.Linear</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line">        self.linear1 = Linear(<span class="number">196608</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.linear1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">network = NetWork()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    print(imgs.shape)  <span class="comment"># torch.Size([64, 3, 32, 32])</span></span><br><span class="line">    output = torch.reshape(imgs, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>))  </span><br><span class="line">    <span class="comment"># output = torch.flatten(imgs)  # 或者直接拉展为一行 </span></span><br><span class="line">    print(output.shape)  <span class="comment"># torch.Size([1, 1, 1, 196608])</span></span><br><span class="line">    output = network(output)</span><br><span class="line">    print(output.shape)  <span class="comment"># torch.Size([1, 1, 1, 10])</span></span><br></pre></td></tr></table></figure>
<h2 id="Dropout-Layers"><a href="#Dropout-Layers" class="headerlink" title="Dropout Layers"></a>Dropout Layers</h2><p>主要为了防止过拟合(随机变0)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = nn.Dropout(p=<span class="number">0.2</span>)</span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">20</span>, <span class="number">16</span>)</span><br><span class="line">output = m(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Sparse-Layers"><a href="#Sparse-Layers" class="headerlink" title="Sparse Layers"></a>Sparse Layers</h2><p>处理<strong>稀疏数据</strong>时展现出良好效能，常用于自然语言处理、推荐系统、图像处理等</p>
<ul>
<li>Embedding(嵌入)：将稀疏类别数据转换为密集向量表示</li>
</ul>
<h2 id="Distance-Functions"><a href="#Distance-Functions" class="headerlink" title="Distance Functions"></a>Distance Functions</h2><ul>
<li><p>CosineSimilarity</p>
</li>
<li><p>PairwiseDistance</p>
</li>
</ul>
<h2 id="Loss-Functions"><a href="#Loss-Functions" class="headerlink" title="Loss Functions"></a>Loss Functions</h2><p>损失函数</p>
<p>参考：<a href="https://pytorch.org/docs/stable/nn.html#loss-functions">https://pytorch.org/docs/stable/nn.html#loss-functions</a></p>
<ul>
<li><code>nn.L1Loss</code>：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss</span><br><span class="line"></span><br><span class="line">inputs = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.float32)</span><br><span class="line">targets = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.float32)</span><br><span class="line"></span><br><span class="line">inputs = torch.reshape(inputs, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">targets = torch.reshape(targets, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)  <span class="comment"># or mean</span></span><br><span class="line">result = loss(inputs, targets)</span><br><span class="line"></span><br><span class="line">print(result)  <span class="comment"># 0.667(mean) 2.(sum)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>nn.MSELoss</code>：（均方误差）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss_mse = nn.MSELoss()</span><br><span class="line">result_mse = loss_mse(inputs, targets)</span><br><span class="line"></span><br><span class="line">print(result_mse)  <span class="comment"># tensor(1.3333)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>nn.CrossEntropyLoss()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">result = loss(inputs, targets)</span><br><span class="line">result.backward()  <span class="comment"># 反向传播</span></span><br></pre></td></tr></table></figure>
<h1 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h1><p><code>toch.optim</code></p>
<p>参考：<a href="https://pytorch.org/docs/stable/optim.html">https://pytorch.org/docs/stable/optim.html</a></p>
<p>栗子：一个图像识别的实战</p>
<p>CIFAR-10 -&gt; 根据图片识别为10个类的其中一个</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240229095154881.png" class title="image-20240229095154881">
<p>网络结构：</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240229095214644.png" class title="image-20240229095214644">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)  <span class="comment"># 每64个数据为一组去训练模型参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">network = NetWork()</span><br><span class="line">optimizer = torch.optim.SGD(network.parameters(), lr=<span class="number">0.01</span>, )</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># 对整个数据集遍历10次</span></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = network(imgs)</span><br><span class="line">        result_loss = loss(outputs, targets)  <span class="comment"># targets会转化为独热码进行损失计算</span></span><br><span class="line">        optimizer.zero_grad()  <span class="comment"># 梯度设为零</span></span><br><span class="line">        result_loss.backward()  <span class="comment"># 反向传播</span></span><br><span class="line">        optimizer.step()  <span class="comment"># 对模型参数进行调优</span></span><br><span class="line">        running_loss = running_loss + result_loss</span><br><span class="line">    print(running_loss)</span><br></pre></td></tr></table></figure>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240229171613272.png" class title="image-20240229171613272">
<p><strong>Epoch和batch_size的区别</strong>：</p>
<ol>
<li><strong>范围</strong>：Epoch 是对整个数据集的遍历次数，而 Batch Size 是每次权重更新时使用的样本数量。</li>
<li><strong>影响</strong>：Epoch 的数量通常会影响模型的训练程度和过拟合的风险。Batch Size 的大小可以影响训练的速度和稳定性，以及模型最终的性能。</li>
<li><strong>计算</strong>：一个 epoch 中的批次数量（Number of Batches per Epoch）可以通过将数据集大小除以批处理大小来计算（忽略不能整除的余数）。例如，对于 50000 个样本的数据集和 64 的批处理大小，将有 781 个完整的批次（50000 / 64 = 781.25，取整为 781）。</li>
<li><strong>权重更新</strong>：在每个 epoch 中，模型会根据每个批次的梯度进行多次权重更新。一个 epoch 结束时，模型已经根据整个数据集的梯度进行了权重更新。</li>
</ol>
<h1 id="模型的保存与加载"><a href="#模型的保存与加载" class="headerlink" title="模型的保存与加载"></a>模型的保存与加载</h1><p>方式一：保存模型参数和结构</p>
<p>保存：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(network, <span class="string">&quot;CIFAR10_net1.pth&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>加载：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要在py文件中包含network类</span></span><br><span class="line">model = torch.load(<span class="string">&quot;CIFAR10_net1.pth&quot;</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure>
<p>方式二：只保存模型参数</p>
<p>保存：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(network.state_dict(), <span class="string">&quot;CIFAR10_net2.pth&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>加载：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = NetWork()</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&quot;CIFAR10_net2.pth&quot;</span>))</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure>
<h1 id="完整的模型训练套路"><a href="#完整的模型训练套路" class="headerlink" title="完整的模型训练套路"></a>完整的模型训练套路</h1><p><code>example.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line"><span class="comment"># 训练数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;data&quot;</span>, train=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 测试数据集</span></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line">print(<span class="string">&quot;训练数据集的长度为: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">print(<span class="string">&quot;测试数据集的长度为: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入网络模型</span></span><br><span class="line">network = NetWork()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learning_rate = <span class="number">1e-2</span></span><br><span class="line">optimizer = torch.optim.SGD(network.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的一些参数</span></span><br><span class="line"><span class="comment"># 记录训练次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    print(<span class="string">&quot;------第 &#123;&#125; 轮训练开始------&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    network.train()  <span class="comment"># 设置模型进入训练状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = network(imgs)</span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step = total_train_step + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;训练次数:&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))  <span class="comment"># loss: tensor(1)  loss.item(): 1</span></span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    network.<span class="built_in">eval</span>()  <span class="comment"># 设置模型进入验证状态</span></span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 整体正确个数</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  <span class="comment"># 指定在其内部执行的代码块中不需要计算梯度</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line">            outputs = network(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss = total_test_loss + loss</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()  <span class="comment"># outputs.argmax(1) 1: 横向 0: 纵向 横向最大值</span></span><br><span class="line">            total_accuracy = total_accuracy + accuracy</span><br><span class="line">    print(<span class="string">&quot;整体测试集上的loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    print(<span class="string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy / test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_loss&quot;</span>, total_test_loss, i)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy / test_data_size, i)</span><br><span class="line">    torch.save(network, <span class="string">&quot;network_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    <span class="comment"># 另一种保存方式</span></span><br><span class="line">    <span class="comment"># torch.save(network.state_dict(), &quot;network_&#123;&#125;.pth&quot;.format(i))</span></span><br><span class="line">    print(<span class="string">&quot;模型已保存&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p><code>model.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建神经网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证正确性</span></span><br><span class="line">network = NetWork()</span><br><span class="line"><span class="built_in">input</span> = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">output = network(<span class="built_in">input</span>)</span><br><span class="line">print(output.shape)</span><br></pre></td></tr></table></figure>
<p>结果展示：</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240301204539098.png" class title="image-20240301204539098">
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240301204602744.png" class title="image-20240301204602744">
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240301204618853.png" class title="image-20240301204618853">
<h1 id="使用GPU训练"><a href="#使用GPU训练" class="headerlink" title="使用GPU训练"></a>使用GPU训练</h1><p><code>.cuda</code></p>
<ul>
<li>网络模型</li>
<li>损失函数</li>
<li>数据（输入，标注）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from model import *</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NetWork, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line"><span class="comment"># 训练数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;data&quot;</span>, train=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 测试数据集</span></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line">print(<span class="string">&quot;训练数据集的长度为: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">print(<span class="string">&quot;测试数据集的长度为: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入网络模型</span></span><br><span class="line">network = NetWork()</span><br><span class="line">network = network.cuda()  <span class="comment"># GPU</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line">loss_fn = loss_fn.cuda()  <span class="comment"># GPU</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learning_rate = <span class="number">1e-2</span></span><br><span class="line">optimizer = torch.optim.SGD(network.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的一些参数</span></span><br><span class="line"><span class="comment"># 记录训练次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    print(<span class="string">&quot;------第 &#123;&#125; 轮训练开始------&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    network.train()  <span class="comment"># 设置模型进入训练状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        imgs = imgs.cuda()  <span class="comment"># GPU</span></span><br><span class="line">        targets = targets.cuda()  <span class="comment"># GPU</span></span><br><span class="line">        outputs = network(imgs)</span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step = total_train_step + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            print(end_time - start_time)</span><br><span class="line">            print(<span class="string">&quot;训练次数:&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))  <span class="comment"># loss: tensor(1)  loss.item(): 1</span></span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    network.<span class="built_in">eval</span>()  <span class="comment"># 设置模型进入验证状态</span></span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 整体正确个数</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  <span class="comment"># 指定在其内部执行的代码块中不需要计算梯度</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line">            imgs = imgs.cuda()  <span class="comment"># GPU</span></span><br><span class="line">            targets = targets.cuda()  <span class="comment"># GPU</span></span><br><span class="line">            outputs = network(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss = total_test_loss + loss</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()  <span class="comment"># outputs.argmax(1) 1: 横向 0: 纵向 横向最大值</span></span><br><span class="line">            total_accuracy = total_accuracy + accuracy</span><br><span class="line">    print(<span class="string">&quot;整体测试集上的loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    print(<span class="string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy / test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_loss&quot;</span>, total_test_loss, i)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy / test_data_size, i)</span><br><span class="line">    torch.save(network, <span class="string">&quot;network_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    <span class="comment"># 另一种保存方式</span></span><br><span class="line">    <span class="comment"># torch.save(network.state_dict(), &quot;network_&#123;&#125;.pth&quot;.format(i))</span></span><br><span class="line">    print(<span class="string">&quot;模型已保存&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p>方式二<code>to</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义训练的设备</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cpu&quot;</span>)  <span class="comment"># or cuda or cuda:num</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">network.to(device)</span><br><span class="line"></span><br><span class="line">loss_fn.to(device)</span><br><span class="line"></span><br><span class="line">imgs = imgs.to(device)</span><br><span class="line">targets = targets.to(device)</span><br></pre></td></tr></table></figure>
<p>白嫖google colab：</p>
<p><a href="https://colab.research.google.com/">https://colab.research.google.com/</a></p>
<h1 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h1><p>在已有模型的基础上进行调整</p>
<p>ps: <code>pretrained = True</code>表示该本地模型继承开源模型的参数；False则模型为初始化参数</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240229180700715.png" class title="image-20240229180700715">
<p>添加：</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240229182011967.png" class title="image-20240229182011967">
<p>修改：</p>
<img src="/2024/03/02/PyTorch%E7%AC%94%E8%AE%B02/image-20240229182032132.png" class title="image-20240229182032132">
<h1 id="完整的模型验证套路"><a href="#完整的模型验证套路" class="headerlink" title="完整的模型验证套路"></a>完整的模型验证套路</h1><p>利用已经训练好的模型，给它提供输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">transform = torchvision.transforms.Compose([torchvision.transfroms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">                                           torchvision.transforms.ToTensor()])</span><br><span class="line">image = transform(image)</span><br><span class="line">print(image.shape)</span><br><span class="line"></span><br><span class="line">model = network.load(<span class="string">&quot;network_0.pth&quot;</span>)</span><br><span class="line">print(model)</span><br><span class="line"></span><br><span class="line">image = torch.reshape(image, (<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">	output = model(image)</span><br><span class="line">print(output)</span><br><span class="line">print(output.argmax(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>深度学</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2023/01/02/Mybatis/</url>
    <content><![CDATA[<p>学习Mybatis框架~</p>
<span id="more"></span>
<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>环境：</p>
<ul>
<li>JDK 1.8</li>
<li>Mysql 5.7</li>
<li>maven 3.6.1</li>
<li>IDEA</li>
</ul>
<p>回顾：</p>
<ul>
<li>JDBC</li>
<li>Mysql</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p>框架：配置文案</p>
<p>官网：<a href="https://mybatis.net.cn/">https://mybatis.net.cn/</a></p>
<h2 id="Mabatis"><a href="#Mabatis" class="headerlink" title="Mabatis"></a>Mabatis</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><img src="/2023/01/02/Mybatis/image-20221222184526088.png" class title="image-20221222184526088">
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持自定义 SQL、存储过程以及高级映射</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis本是apache的一个<a href="https://baike.baidu.com/item/开源项目/3406069?fromModule=lemma_inlink">开源项目</a>iBatis，2010年这个<a href="https://baike.baidu.com/item/项目/477803?fromModule=lemma_inlink">项目</a>由apache software foundation迁移到了<a href="https://baike.baidu.com/item/google code/2346604?fromModule=lemma_inlink">google code</a>，并且改名为MyBatis</li>
<li>2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341?fromModule=lemma_inlink">Github</a>。</li>
</ul>
<p>如何获得：</p>
<ul>
<li><p>Maven仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Github <a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p>
</li>
</ul>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>数据持久化：就是将程序的数据在持久状态和瞬时状态转化的过程</p>
<p>内存：单点即失</p>
<p>数据库(jdbc)，io文件持续化</p>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p>Dao层、Service层、Controller层</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h3 id="为什么需要mybatis"><a href="#为什么需要mybatis" class="headerlink" title="为什么需要mybatis"></a>为什么需要mybatis</h3><ul>
<li>帮助将数据存入到数据库中</li>
<li>方便</li>
<li>传统JDBC代码太复杂了，简化，框架，自动化</li>
<li>优点：<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件。易于学习，易于使用。通过文档和源代码，可以比较完全的掌握它的设计思路和实现</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性</li>
<li>提供映射标签，支持对象与数据库的ORM字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql</li>
</ul>
</li>
</ul>
<h2 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h2><p>搭建环境</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis-01-learn<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>mybatis-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Polaris6G&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zwl/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>导入Mybatis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlsessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlsessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span></span><br><span class="line">    <span class="comment">// 可以通过 SqlSession 实例来直接执行已映射的 SQL 语句</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlsessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写代码</p>
<ul>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zwl.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据ID查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口实现类由原来的UserDaoImpl转换为Mapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zwl.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (name, pwd) VALUES (#&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;, pwd=#&#123;pwd&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zwl.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.zwl.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zwl.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一步:获取SqlSession对象</span></span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = MybatisUtils.getSqlSession()) &#123;</span><br><span class="line">            <span class="comment">//方式一:getMapper</span></span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">            <span class="comment">//方式二:(过时)</span></span><br><span class="line">            <span class="comment">//List&lt;User&gt; userList = sqlSession.selectList(&quot;com.zwl.dao.UserMapper.getUserList&quot;);</span></span><br><span class="line">            <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = MybatisUtils.getSqlSession()) &#123;</span><br><span class="line">            <span class="comment">//方式一:getMapper</span></span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改需要提交事务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = MybatisUtils.getSqlSession()) &#123;</span><br><span class="line">            <span class="comment">//方式一:getMapper</span></span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="keyword">int</span> res = mapper.addUser(<span class="keyword">new</span> User(<span class="string">&quot;zyb&quot;</span>, <span class="string">&quot;mist&quot;</span>));</span><br><span class="line">            <span class="keyword">if</span> (res &gt; <span class="number">0</span>) System.out.println(res + <span class="string">&quot;条数据成功插入&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = MybatisUtils.getSqlSession()) &#123;</span><br><span class="line">            <span class="comment">//方式一:getMapper</span></span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="keyword">int</span> res = mapper.updateUser(<span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">&quot;zyb&quot;</span>, <span class="string">&quot;mist2&quot;</span>));</span><br><span class="line">            <span class="keyword">if</span> (res &gt; <span class="number">0</span>) System.out.println(res + <span class="string">&quot;条数据修改成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = MybatisUtils.getSqlSession()) &#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="keyword">int</span> res = mapper.deleteUser(<span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span>(res &gt; <span class="number">0</span>)System.out.println(<span class="string">&quot;删除了&quot;</span> + res + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>可能存在问题：</p>
<ul>
<li><code>org.apache.ibatis.binding.BindingException: Type interface com.zwl.dao.UserDao is not known to the MapperRegistry.</code></li>
</ul>
<p>每一个Mapper.xml都需要Mybatis核心配置文件中注册</p>
<p>注意要在mabatis-config.xml中注册：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zwl/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>pom.xml</code>maven的资源定位配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources,来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>注意数据库连接URL：时区UTC</p>
</li>
<li><p>绑定接口错误</p>
<p>namespace中的包名要和接口包名一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zwl.dao.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法名不对、返回类型不对</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zwl.pojo.User&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><ul>
<li>id: 就是对应的namespace中的方法名</li>
<li>resultType：Sql语句执行的返回值</li>
<li>parameterType：参数类型</li>
</ul>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>增删改需要提交事务</p>
<h3 id="万能Map"><a href="#万能Map" class="headerlink" title="万能Map"></a>万能Map</h3><p>假设我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map</p>
<p>Map传递参数，直接在sql中却出key即可【parameterType=”map”】</p>
<p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p>
<p>多个参数用Map，<strong>或者注解</strong>！</p>
<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ol>
<li><p>Java代码执行的时候，传递通配符 % %</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%wl%&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在sql拼接中使用通配符（会产生sql注入的可能）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><ul>
<li><p>mybatis-config.xml</p>
<img src="/2023/01/02/Mybatis/image-20221222225614997.png" class title="image-20221222225614997">
<ul>
<li><p>环境配置(environments)</p>
<p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境</p>
<ul>
<li><p><strong>事务管理器（transactionManager）</strong></p>
<p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）<strong>默认：JDBC</strong></p>
</li>
<li><p><strong>数据源（dataSource）</strong></p>
<p><strong>默认：pooled</strong></p>
<img src="/2023/01/02/Mybatis/image-20221222230929324.png" class title="image-20221222230929324">
</li>
</ul>
</li>
</ul>
</li>
<li><p>属性（properties）</p>
<p>可以通过properties属性来实现引用配置文件</p>
<p>这些属性都是可外部配置且可动态替换的，既可以在典型的Java属性文件中配置，亦可以通过properties元素的子元素来传递</p>
<p>编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">Polaris6G</span></span><br></pre></td></tr></table></figure>
<p>要注意顺序！</p>
<img src="/2023/01/02/Mybatis/image-20221222231646124.png" class title="image-20221222231646124">
<ul>
<li><p>可以直接引入外部文件</p>
<p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在其中增加一些属性配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果两个文件有同一个字段，优先使用外部配置文件的</p>
</li>
</ul>
</li>
<li><p>类型别名（typeAliases）</p>
<p>类型别名可为 Java 类型设置一个缩写名字 </p>
<p>它仅用于 XML 配置，意在降低冗余的全限定类名书写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.zwl.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以指定一个包名,mybatis会在包名下面搜索需要的Java Bean，比如：</p>
<p>扫描实体类的包，它的默认别名就为这个类的类名首字母小写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zwl.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在实体类比较少的时候，使用第一种方式</p>
<p>如果实体类比较多，建议使用第二种</p>
<p>如果非要改，需要在实体类上加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置（settings）</p>
<p>| 设置名                   | 描述                                                         | 有效值                                                       | 默认值 |<br>| :———————————- | :—————————————————————————————- | :—————————————————————————————- | :——- |<br>| cacheEnabled             | 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。     | true | false                                                | true   |<br>| lazyLoadingEnabled       | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。 | true | false                                                | false  |<br>| logImpl                  | 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。        | SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING | 未设置 |<br>| mapUnderscoreToCamelCase | 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 | true | false                                                | False  |</p>
</li>
<li><p>​    其他配置：</p>
<ul>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
</li>
<li><p>映射器（mappers）</p>
<p>MapperRegistry：注册绑定mapper.xml文件</p>
<img src="/2023/01/02/Mybatis/image-20221222235332738.png" class title="image-20221222235332738">
<p>使用class、package时：<strong>注意</strong></p>
<ul>
<li>接口和它的Mapper配置文件必须同名</li>
<li>接口和它的Mapper配置文件必须在同一个包下</li>
</ul>
</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的并发问题</p>
<img src="/2023/01/02/Mybatis/image-20221222215145585.png" class title="image-20221222215145585">
<p>SqlSessionFactoryBuilder：</p>
<ul>
<li>一旦创建了SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p>SqlSessionFactory:</p>
<ul>
<li>说白了就是数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li>
</ul>
<p>SqlSession：</p>
<ul>
<li>连接到连接池的一个请求</li>
<li>用完之后需要赶紧关闭，否则资源被占用</li>
</ul>
<img src="/2023/01/02/Mybatis/image-20221223001243017.png" class title="image-20221223001243017">
<p>关系：</p>
<img src="/2023/01/02/Mybatis/image-20221223001255910.png" class title="image-20221223001255910">
<p>这里面的每一个mapper，就代表一个具体的业务</p>
<h2 id="解决属性名和字段名不一致的问题"><a href="#解决属性名和字段名不一致的问题" class="headerlink" title="解决属性名和字段名不一致的问题"></a>解决属性名和字段名不一致的问题</h2><p>类型处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现password查询出来为null，说明匹配不到</p>
<p>解决方式：</p>
<ul>
<li><p>起别名</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select id, name, pwd as password from mybatis.user where id = #&#123;id&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ResultMap 结果集映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column数据库中的字段 property实体类中的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</p>
<p>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了</p>
</li>
</ul>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手</p>
<p>曾经：sout、debug</p>
<p>现在：日志工厂</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>logImpl</th>
<th>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</th>
<th>SLF4J \</th>
<th>LOG4J \</th>
<th>LOG4J2 \</th>
<th>JDK_LOGGING \</th>
<th>COMMONS_LOGGING \</th>
<th>STDOUT_LOGGING \</th>
<th>NO_LOGGING</th>
<th>未设置</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>SLF4J</p>
</li>
<li><p>LOG4J【掌握】</p>
</li>
<li><p>LOG4J2</p>
</li>
<li><p>JDK_LOGGING</p>
</li>
<li><p>COMMONS_LOGGING</p>
</li>
<li><p>STDOUT_LOGGING【掌握】</p>
</li>
<li><p>NO_LOGGING</p>
</li>
</ul>
<p>在Mybatis中具体使用哪个日志实现，在设置中设定</p>
<p>STDOUT_LOGGING标准日志输出</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/2023/01/02/Mybatis/image-20221223094151664.png" class title="image-20221223094151664">
<h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><ul>
<li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</li>
<li>可以控制每一条日志的输出格式，通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li>
<li>这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码</li>
</ul>
<p>导入log4j：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>log4j.properties:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/zwl.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>配置log4j为日志的实现：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>简单使用：</p>
<ul>
<li><p>在要使用Log4j的类中，导入包import org.apache.log4j.Logger</p>
</li>
<li><p>日志对象，参数为当前类的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(MyTest.class);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><ul>
<li>减少数据的处理量</li>
</ul>
<p>使用Limit分页</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit startIndex, pageSize</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3</span>; #[<span class="number">1</span>,n]</span><br></pre></td></tr></table></figure>
<h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><ul>
<li>在真正开发中，很多时候我们会选择面向接口编程</li>
<li>根本原因：解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，是的开发边的容易，规范性更好</li>
<li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现的，对于系统设计人员来讲就不那么重要了</li>
<li>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都要考虑，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程</li>
</ul>
<h3 id="关于接口的理解"><a href="#关于接口的理解" class="headerlink" title="关于接口的理解"></a>关于接口的理解</h3><ul>
<li>接口从更深层次的理解，应该是定义（规范、约束）与实现（名实分离的原则）的分离</li>
<li>接口的本身反映了系统设计对系统的抽象理解</li>
<li>接口应有两类：<ul>
<li>对一个个体的抽象，它可对应一个抽象体（abstract class）</li>
<li>对一个个体某一方面的抽象，即形成一个抽象面（interface）</li>
</ul>
</li>
<li>一个个体有可能有多个抽象面。抽象体和抽象面是由区别的</li>
</ul>
<h3 id="三个面向区别"><a href="#三个面向区别" class="headerlink" title="三个面向区别"></a>三个面向区别</h3><ul>
<li>面向对象：我们考虑问题时，以对象为单位，考虑它的属性及方法</li>
<li>面向过程：我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现</li>
<li>面向接口设计：更多的体现就是对系统整体的架构</li>
</ul>
<h3 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h3><p>注解在接口上实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>在核心配置文件中绑定：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>本质：反射机制实现</p>
<p>底层：动态代理</p>
<h3 id="注解的CRUD"><a href="#注解的CRUD" class="headerlink" title="注解的CRUD"></a>注解的CRUD</h3><p>自动提交autoCommit开启：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlsessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CRUD注解如下：</p>
<img src="/2023/01/02/Mybatis/image-20221223122553078.png" class title="image-20221223122553078">
<p>关于@Param()注解：</p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是还是建议加上</li>
<li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名</li>
</ul>
<h1 id="和"><a href="#和" class="headerlink" title="{}和${}:"></a>{}和${}:</h1><img src="/2023/01/02/Mybatis/image-20221223123105572.png" class title="image-20221223123105572">
<h2 id="Mybatis执行流程"><a href="#Mybatis执行流程" class="headerlink" title="Mybatis执行流程"></a>Mybatis执行流程</h2><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.d0349c9eff48128be73736c8f8047f80?rik=mxCooFOW%2fQpj7A&amp;riu=http%3a%2f%2fwww.wisestudy.cn%2fjava_opensource%2fmybatis_index_clip_image002.png&amp;ehk=DXUxuKQXafEs8VUGXZeovOmR%2fRqIkFQFswPmtDubHZQ%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="See the source image"></p>
<h2 id="LomBok"><a href="#LomBok" class="headerlink" title="LomBok"></a>LomBok</h2><ul>
<li>java library</li>
<li>plugs</li>
<li>build tools</li>
<li>with one annotation your class</li>
</ul>
<p>使用步骤：</p>
<ul>
<li><p>在IDEA安装LomBok插件</p>
</li>
<li><p>在maven导入LomBok的包</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用：</p>
<p><strong>Data</strong></p>
<p>整合了Getter、Setter、ToString、Equals、HashCode</p>
<p><strong>Getter</strong></p>
<p>快速构建Getter方法</p>
<p><strong>Setter</strong></p>
<p>快速构建Setter方法</p>
<p><strong>ToString</strong></p>
<p>快速将当前对象转换成字符串类型，便于log</p>
<p><strong>EqualsAndHashCode</strong></p>
<p>快速进行相等判断</p>
<p><strong>NonNull</strong></p>
<p>判断变量（对象）是否为空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><p>关联（association）：多对一</p>
<p>集合（collection）：一对多</p>
<p>sql：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(</span><br><span class="line">    id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(id, name) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;秦老师&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="keyword">null</span>,</span><br><span class="line">    tid <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (id),</span><br><span class="line">    key fk_tid (tid),</span><br><span class="line">    <span class="keyword">constraint</span> fk_tid <span class="keyword">foreign</span> key (tid) <span class="keyword">references</span> teacher (id)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id, name, tid) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id, name, tid) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id, name, tid) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id, name, tid) <span class="keyword">values</span> (<span class="number">4</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id, name, tid) <span class="keyword">values</span> (<span class="number">5</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//学生需要关联一个老师</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Teacher实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="按照查询嵌套处理（子查询）"><a href="#按照查询嵌套处理（子查询）" class="headerlink" title="按照查询嵌套处理（子查询）"></a>按照查询嵌套处理（子查询）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  按照查询嵌套处理:</span></span><br><span class="line"><span class="comment">        1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">        2. 根据查询出来的学生的tid，寻找对应的老师 子查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="按照结果嵌套处理（联表查询）"><a href="#按照结果嵌套处理（联表查询）" class="headerlink" title="按照结果嵌套处理（联表查询）"></a>按照结果嵌套处理（联表查询）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  按照查询结果处理  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Teacher实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//一个老师对应多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname, t.id tid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    javaType=&quot;&quot; 指定属性的类型(基本类型)</span></span><br><span class="line"><span class="comment">                集合中的泛型信息,我们使用ofType获取</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher3&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>小结：</p>
<ol>
<li>关联-association 【多对一】</li>
<li><p>集合-collection【一对多】</p>
</li>
<li><p>javaType &amp; ofType</p>
<ol>
<li>javaType 用来指定实体类中属性的类型</li>
<li>ofType 用来指定映射到List或者结合鄂中的pojo类型，泛型中的约束类型</li>
</ol>
</li>
<li>id &amp; result<ol>
<li>两者基本相同 标签用法相同</li>
<li>id用于表示符（如主键、外键等）result虽然也可以代替但会影响查询效率</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证sql可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题</li>
<li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li>
</ul>
<p><strong>面试高频：</strong></p>
<ul>
<li>mysql引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化</li>
</ul>
<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态SQL就是根据不同的条件生成不同的SQL语句</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><p>相当于switch，只会选其中的一个去实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h3><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlogSet&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所谓的动态SQL，本质还是SQL语句，知识我们可以在SQL层面，去执行一个逻辑代码</p>
<h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<ol>
<li><p>使用SQL标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要使用的地方使用include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注意事项：</p>
<ul>
<li>最好基于单标来定义SQL片段</li>
<li>不要存在where标签</li>
</ul>
<h2 id="ForEach"><a href="#ForEach" class="headerlink" title="ForEach"></a>ForEach</h2><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。</p>
<p>栗子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ids.add(<span class="number">1</span>);</span><br><span class="line">ids.add(<span class="number">2</span>);</span><br><span class="line">map.put(<span class="string">&quot;ids&quot;</span>, ids);</span><br><span class="line">List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br></pre></td></tr></table></figure>
<p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>查询：连接数据库，耗资源</p>
<p>一次查询的结果，可以暂存在一个可以直接渠道的地方-&gt;内存中的缓存</p>
<p>这样我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</p>
<ol>
<li>什么是缓存？<ul>
<li>存在内存中的临时数据</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
</li>
<li>为什么使用缓存？<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率</li>
</ul>
</li>
<li>什么样的数据能使用缓存？<ul>
<li>经常查询并且不经常改变的数据</li>
</ul>
</li>
</ol>
<h3 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h3><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地订制和配置缓存。缓存可以极大的提升查询效率</li>
<li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul>
<li>默认情况下，只有一级缓存开启（SqlSession级别的缓存,也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存</li>
<li>为了提高扩展性，Mybatis定义了缓存接口Cache，我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<p>可用的清除策略有：</p>
<ul>
<li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象</li>
<li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们</li>
<li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象</li>
<li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象</li>
</ul>
<p>默认的清除策略是 LRU</p>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul>
<li>一级缓存也叫本地缓存：SqlSession<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>开启日志</li>
<li>测试在一个Session中，查询相同的两次得到的结果对象是否相同</li>
<li>查看日志输出</li>
</ol>
<img src="/2023/01/02/Mybatis/image-20221231181242652.png" class title="image-20221231181242652">
<p>缓存失效的情况：</p>
<ol>
<li>查询不同的东西</li>
<li>增删改操作，可能会改变原来的数据，所以必定会刷新缓存</li>
<li>查询不同的Mapper</li>
<li>手动清理缓存<code>sqlSession.clearCache()</code></li>
</ol>
<p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是得到连接到关闭连接这个</p>
<p><strong>一级缓存就是一个map</strong></p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中</li>
</ul>
</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显式地开启全局缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在要使用二级缓存的Mapper.xml中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在当前Mapper.xml中使用二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以自定义参数：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<img src="/2023/01/02/Mybatis/image-20221231185129547.png" class title="image-20221231185129547">
<p>结果为true</p>
<ul>
<li><p>我们需要将实体类序列化(implement Serializable)，否则会报错：（或者在cache标签中加readOnly=true）</p>
<p><code>Caused by: java.io.NotSerializableException: com.zwl.pojo.User</code></p>
</li>
</ul>
</li>
</ol>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中</li>
</ul>
<h3 id="Mybatis缓存原理"><a href="#Mybatis缓存原理" class="headerlink" title="Mybatis缓存原理"></a>Mybatis缓存原理</h3><img src="/2023/01/02/Mybatis/image-20221231185805141.png" class title="image-20221231185805141">
<p>缓存顺序：</p>
<ul>
<li>先看二级缓存有无（每个mapper一个二级缓存，相同namespace的mapper共享一个二级缓存）</li>
<li>再看一级缓存有无（每个SqlSession一个）</li>
<li>查询数据库</li>
</ul>
<h2 id="自定义缓存-ehcache"><a href="#自定义缓存-ehcache" class="headerlink" title="自定义缓存 ehcache"></a>自定义缓存 ehcache</h2><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存。</p>
<p>除了上述自定义缓存的方式，你也可以通过实现你自己的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;com.domain.something.MyCustomCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个示例展示了如何使用一个自定义的缓存实现。type 属性指定的类必须实现 org.apache.ibatis.cache.Cache 接口，且提供一个接受 String 参数作为 id 的构造器。 这个接口是 MyBatis 框架中许多复杂的接口之一，但是行为却非常简单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span></span>;</span><br><span class="line">  <span class="function">Object <span class="title">getObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(Object key)</span></span>;</span><br><span class="line">  <span class="function">Object <span class="title">removeObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了对你的缓存进行配置，只需要简单地在你的缓存实现中添加公有的 JavaBean 属性，然后通过 cache 元素传递属性值，例如，下面的例子将在你的缓存实现上调用一个名为 <code>setCacheFile(String file)</code> 的方法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;com.domain.something.MyCustomCache&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/tmp/my-custom-cache.tmp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2023/01/02/Spring/</url>
    <content><![CDATA[<p>学习Spring框架</p>
<span id="more"></span>
<h2 id="Sping"><a href="#Sping" class="headerlink" title="Sping"></a>Sping</h2><ul>
<li><p>Spring是一个轻量级控制反转（IOC）和面向切面（AOP）的容器框架</p>
</li>
<li><p>历史：</p>
<ul>
<li>2002，首次退出了Spring框架的雏形：interface 21框架</li>
<li>Spring框架以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日发布了1.0正式版</li>
<li>spring理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架</li>
<li>SSH：Struct2+Spring + Hibernate</li>
<li>SSM：SpringMVC+Spring+Mybatis</li>
</ul>
</li>
<li><p>中文文档：<a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/">https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/</a></p>
<p>英文文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">https://docs.spring.io/spring-framework/docs/current/reference/html/</a></p>
<p>github源码地址：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>Spring是一个开源的免费的框架（容器）</li>
<li>Spring是一个轻量级的、非入侵式的框架</li>
<li>控制反转（IOC），面向切面编程（AOP）</li>
<li>支持事务的处理，对框架整合的支持</li>
</ul>
<p>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><img src="/2023/01/02/Spring/image-20221216220212596.png" class title="image-20221216220212596">
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>在Spring的官网有这个介绍：现代化的Java开发，说白就是基于Spring的开发</p>
<img src="/2023/01/02/Spring/image-20221216220321042.png" class title="image-20221216220321042">
<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务</li>
<li>约定大于配置！</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>SpringCloud是基于SpringBoot实现的</li>
</ul>
</li>
</ul>
<p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！承上启下的作用</p>
<p>弊端：发展了太久之后违背了原来的理念！配置十分繁琐，人称：”配置地狱”</p>
<h2 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h2><ol>
<li>UserDao接口</li>
<li>UserDaoImpl</li>
<li>UserService业务接口</li>
<li>UserServiceImpl业务实现类</li>
</ol>
<p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们根据用户的需求去修改源代码！如果程序代码量巨大，修改一次的成本代价十分昂贵！</p>
<p>我们使用一个Set接口实现，已经发生了革命性的变化！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用set进行动态实现值的注入!</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> UserDaoMysqlImpl());</span><br><span class="line"></span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>之前，程序是主动创建对象！控制权在程序员手上</li>
<li>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象</li>
</ul>
<p>这种思想，从本质上解决了问题，程序员不用再去管理对象的创建了。系统的耦合性大大降低，可以专注在业务的实现上！这是IOC的原型！</p>
<h2 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h2><img src="/2023/01/02/Spring/image-20221218123322204.png" class title="image-20221218123322204">
<p>控制反转IoC(Inversion of Conrol)，是一种设计思想DI(依赖注入)是实现IoC的一种方法，也有人认为DI(Dependency Injection)只是IoC的另一种说法。</p>
<p>没有IoC的程序中，我们面向对象编程，对象的创建与对象的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方。</p>
<p>所谓控制反转就是：<strong>获得依赖对象的方式反转了</strong></p>
<p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p>
<p>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方式是依赖注入（DI）</p>
<h2 id="Hello-Spring"><a href="#Hello-Spring" class="headerlink" title="Hello Spring"></a>Hello Spring</h2><p>Hello：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>beans.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用Spring来创建对象，在Spring中这些都被称为Bean</span></span><br><span class="line"><span class="comment">        类型 变量名 = new 类型()</span></span><br><span class="line"><span class="comment">        Hello hello = new hello();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        id = 变量名</span></span><br><span class="line"><span class="comment">        class = new 的对象</span></span><br><span class="line"><span class="comment">        property 相当于给对象的属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mainTest：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zwl.pojo.Hello;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//我们的对象现在都在Spring中的管理了，我们要使用，直接去里面取出来</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Hello 对象有谁创建？</p>
<p>hello对象由Spring创建</p>
</li>
<li><p>Hello对象的属性怎么设置？</p>
<p>hello对象的属性是由Spring容器设置</p>
</li>
</ul>
<p>这个过程就叫控制反转：</p>
<p>控制：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建</p>
<p>反转：程序本身不创建对象，而变为被动的接收对象</p>
<p>依赖注入：就是利用set方法来进行注入的</p>
<p>IOC是一种编程思想，由主动的编程编程被动的接受</p>
<p>可以通过new ClassPathXmlApplicationContext 去浏览一下底层源码</p>
<p>到了现在，我们彻底不用同在程序中取改动了，要实现不同的操作，只需要在xml配置文件中进行，所谓的IoC，一句话搞定：对象由Spring来创建，管理，装配</p>
<h2 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h2><ol>
<li><p>使用无参构造创建对象，默认！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zwl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>要使用有参构造创建对象：</p>
</li>
</ol>
<ul>
<li><p>index参数位置序号 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zwl2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>type：只存在这一个类型时使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zwl2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>name最为常用，只需掌握这个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zwl2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了（所有bean在运行中都会被实例化，无论是否程序中会用到）</p>
<h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果添加了别名，我们也可以使用别名获取到这个对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id: bean 的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">class: bean 对象所对应的全限定名 : 包名 + 类名</span></span><br><span class="line"><span class="comment">name: 也是别名,  而且name可以取多个别名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u2 u3, u4; u5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>import一般用于团队开发使用，可以将多个配置文件导入合并成一个</p>
<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>见前面<code>constructor-tag</code></p>
<h3 id="Set方式注入-重点"><a href="#Set方式注入-重点" class="headerlink" title="Set方式注入[重点]"></a>Set方式注入[重点]</h3><ul>
<li>依赖注入：Set注入<ul>
<li>依赖：bean对象的创建依赖于容器</li>
<li>注入：bean对象中的所有属性，由容器来注入</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;山西&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通值注入, value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zwl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Bean注入，ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--List--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>打豆豆<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111111222222223333&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;132132132132132132123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>2020091203027<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Polaris6G<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="拓展方式注入"><a href="#拓展方式注入" class="headerlink" title="拓展方式注入"></a>拓展方式注入</h3><p>我们可以使用p命名和c命名空间进行注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;haha&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.Address&quot;</span> <span class="attr">c:address</span>=<span class="string">&quot;山西&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><ol>
<li>单例模式：singleton（默认机制）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = (User) context.getBean(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">User user2 = (User) context.getBean(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(user == user2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ol>
<li>原型模式：每次从容器中get的时候，都会产生一个新对象！</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.Address&quot;</span> <span class="attr">c:address</span>=<span class="string">&quot;山西&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Address address = (Address) context.getBean(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">Address address2 = (Address) context.getBean(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">System.out.println(address ==  address2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<ol>
<li>其余的request、session、application，这些只能在web开发中使用到</li>
</ol>
<h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><ul>
<li>自动装配是Spring满足bean依赖一种方式</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性！</li>
</ul>
<p>在Spring中有三种装配的方式</p>
<ol>
<li>在xml中显式配置</li>
<li>在java中显式配置</li>
<li>隐式自动装配bean（重要）</li>
</ol>
<p>自动装配：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	byName: 会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanId</span></span><br><span class="line"><span class="comment">	byType: 会自动在容器上下文中查找，和自己对象属性类型相同的bean!</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	byName: 会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanId</span></span><br><span class="line"><span class="comment">	byType: 会自动在容器上下文中查找，和自己对象属性类型相同的bean!</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>小结：</p>
<ul>
<li>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法值一致</li>
<li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li>
</ul>
<h2 id="使用注解实现自动装配"><a href="#使用注解实现自动装配" class="headerlink" title="使用注解实现自动装配"></a>使用注解实现自动装配</h2><p>jdk1.5支持的注解，Spring2.5就支持注解了</p>
<p>要使用注解须知：</p>
<ol>
<li>导入约束    context约束</li>
<li>配置注解的支持：<strong><code>context:annotation-config/</code></strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开启注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>@AutoWired</strong></p>
<p>直接在属性上使用即可，也可以在constuctor、set方式上使用</p>
<p>使用Autowired我们可以不用编写Set方法了，前提是这个自动装配的属性在IOC(Spring)容器中存在，并且首先符合byType，或符合byName</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Nullable 注解可以使用在方法、属性、参数上，分别表示方法返回可以为空、属性值可以为空、参数值可以为空</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span>  <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifier(value=”xxx”)去配置@Autowire的使用，指定一个唯一的bean对象注入！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;cat111&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;dog222&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Resource注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name=&quot;cat2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name=&quot;dog2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小结：</p>
<p>@Resource和@Autowired的区别：</p>
<ul>
<li>都是用来自动装配的，都可以放在属性字段上</li>
<li>@Autowired默认通过byType的方式实现，如果找不到则通过byName</li>
<li>@Resource默认通过byName的方式实现，如果找不到名字则通过byType，如果两个都找不到的情况下，就报错</li>
<li>执行顺序不同</li>
</ul>
<h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入了</p>
<ol>
<li><p>bean</p>
<ul>
<li><code>@Component</code>：组件、放到类上，说明这个类被Spring管理了，这是一个bean</li>
</ul>
</li>
<li><p>属性如何注入</p>
<p><code>@Value</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    相当于&lt;property name=&quot;address&quot; value=&quot;山西&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;山西&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;山东&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>衍生的注解</p>
<p><code>@Component</code>有几个衍生注解，我们在web开发中，会按照mvc三层架构分层</p>
<ul>
<li>dao    <code>@Repository</code></li>
<li>service <code>@Service</code></li>
<li>controller <code>@Controller</code></li>
</ul>
<p>这四个注解功能都是一样的，都是代表将某个类将某个类注册到Spring中，装配Bean</p>
</li>
<li><p>自动装配</p>
<ul>
<li><p><code>@Autowired</code>：自动装配通过类型、名字</p>
<p>如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value=”xxx”)</p>
</li>
<li><p><code>@Nullable</code>：字段标记了这个注解，说明这个字段可以为null</p>
</li>
<li><p><code>@Resource</code>：自动装配通过名字、类型</p>
</li>
</ul>
</li>
<li><p>作用域</p>
<p><code>@Scope</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span><span class="comment">//单例模式</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span><span class="comment">//原型模式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>小结</p>
<p>xml与注解：</p>
<ul>
<li>xml更加万能，适用于任何场合！维护简单方便</li>
<li>注解 不是自己的类使用不了，维护相对复杂</li>
</ul>
<p>xml与注解的最佳实践：</p>
<ul>
<li>xml用来管理bean</li>
<li>注解只负责完成属性的注入</li>
<li>我们在使用的过程中，只需要注意一个问题：必须让注解生效，需要开启注解的支持</li>
</ul>
</li>
<li><p>使用Java的方式配置Spring</p>
<p><em>Configuration类中的方法成员变量是@Value注解，方法上的注解是@Bean</em></p>
<p><em>Component类中的方法和成员变量没有任何限制</em></p>
<p>现在完全不适用Spring的xml配置，全权交给Java来做</p>
<p>JavaConfig是Spring的一个子项目，在Spring 4之后，成为了核心功能</p>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//可不加</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;zwl&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zwl.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//可不加,相当于beans标签</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zwl&quot;)</span><span class="comment">//可不加</span></span><br><span class="line"><span class="meta">@Import(zwlConfig2.class)</span><span class="comment">//同import用法，可联合多个配置类</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;applicationContext-configuration.xml&quot;)</span><span class="comment">//可联合xml文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zwlConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个bean，就相当于在beans.xml中的bean标签</span></span><br><span class="line">    <span class="comment">//这里方法的名字，就相当于bean标签中的id属性</span></span><br><span class="line">    <span class="comment">//方法的返回值就相当于bean标签的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();<span class="comment">//就是返回要注入到bean的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zwl.User;</span><br><span class="line"><span class="keyword">import</span> com.zwl.config.zwlConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注解配置类</span></span><br><span class="line">        <span class="comment">//如果完全使用了配置类方式去做,我们就智能通过AnnotationConfig上下文来获取容器，通过配置类的class对象加载</span></span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(zwlConfig.class);</span><br><span class="line">        User user = context.getBean(<span class="string">&quot;getUser&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种纯Java的配置方式，在SpringBoot中随处可见！</p>
</li>
</ol>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>为什么要学习代理模式：</p>
<p>因为这就是Spring AOP的底层</p>
<p>【Spring AOP 和 Spring MVC】</p>
<p>代理模式的分类：</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>角色分析：</p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li>
<li>客户：访问代理对象的人</li>
</ul>
<p>代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li>
<li>公共业务就交给代理角色，实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li>
</ul>
<p>关于AOP：</p>
<img src="/2023/01/02/Spring/image-20221220220739510.png" class title="image-20221220220739510">
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类是动态生成和的，不是我们直接写好的</li>
<li>动态代理分为两大类：基于接口的动态代理、基于类的动态代理<ul>
<li>基于接口—JDK动态代理【学习的内容】</li>
<li>基于类：cglib</li>
<li>java字节码实现：JAVAssist</li>
</ul>
</li>
</ul>
<p>需要了解两个类：Proxy：代理， InvocationHandler：调用处理程序</p>
<ul>
<li><p>Proxy：生成动态代理实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[] &#123; Foo.class &#125;, handler);</span><br></pre></td></tr></table></figure>
</li>
<li><p>InvocationHandler：调用处理程序并返回结果(实现invoke)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invoke(Object proxy, Method method, Object[] args)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通用栗子：</p>
<p><code>ProxyInvokeHandler.class</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvokeHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(),  <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;采用了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>UserServiceImpl.class</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>Main.class</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色</span></span><br><span class="line">        ProxyInvokeHandler pih = <span class="keyword">new</span> ProxyInvokeHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要代理的对象</span></span><br><span class="line">        pih.setTarget(userService);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态生成代理类</span></span><br><span class="line">        UserService proxy = (UserService) pih.getProxy();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//可以通过代理调用方法啦</span></span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态代理的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li>
<li>公共业务就交给代理角色，实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理</li>
<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li>
<li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li>
</ul>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP(Aspect Oriented Programming)意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<img src="/2023/01/02/Spring/image-20221221095223756.png" class title="image-20221221095223756">
<h3 id="AOP在Spring中的作用"><a href="#AOP在Spring中的作用" class="headerlink" title="AOP在Spring中的作用"></a>AOP在Spring中的作用</h3><img src="/2023/01/02/Spring/image-20221221095455818.png" class title="image-20221221095455818">
<img src="/2023/01/02/Spring/image-20221221095622760.png" class title="image-20221221095622760">
<h3 id="使用Spring实现AOP"><a href="#使用Spring实现AOP" class="headerlink" title="使用Spring实现AOP"></a>使用Spring实现AOP</h3><p>【重点】使用AOP，需要导入依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--https://mvnrepository.com/artifact/org.aspectj/aspectjweaver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方式一：使用Spring的API接口</p>
<p><code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一:使用原生Spring API接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop:导入aop的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点:expression:表达式：返回类型(*表示所有返回类型) 要执行的位置(包名 类名 方法名) 参数 (..)代表可以有不一样的参数)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zwl.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>BeforeLog.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeLog</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AfterLog.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+method.getName()+<span class="string">&quot;方法，返回结果为&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyTest.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zwl.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.zwl.service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//动态代理的是接口</span></span><br><span class="line">        UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二：自定义类来实现AOP</p>
<p><code>aop:aspect</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--注册bean--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.zwl.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--方式二: 自定义类 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;log&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.zwl.log.Log&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!-- 自定义切面 ref 要引用的类 --&gt;</span><br><span class="line">        &lt;aop:aspect ref=<span class="string">&quot;log&quot;</span>&gt;</span><br><span class="line">            &lt;aop:pointcut id=<span class="string">&quot;point&quot;</span> expression=<span class="string">&quot;execution(* com.zwl.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br><span class="line">            &lt;!-- 通知 --&gt;</span><br><span class="line">            &lt;aop:before method=<span class="string">&quot;before&quot;</span> pointcut-ref=<span class="string">&quot;point&quot;</span>/&gt;</span><br><span class="line">            &lt;aop:after method=<span class="string">&quot;after&quot;</span> pointcut-ref=<span class="string">&quot;point&quot;</span>/&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">        &lt;!-- 切入点 --&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<p>方式三：使用注解实现</p>
<p><code>AnnoPointCut.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三:使用注解方式实现AOP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.zwl.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========方法执行前==========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.zwl.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========方法执行后==========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.zwl.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在环绕增强中，我们可以给定一个参数ProceedingJoinPoint连接点，代表我们要获取处理切入的点</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.zwl.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object proceed = jp.proceed();<span class="comment">//执行方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式三:使用注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.annotation.AnnoPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解支持 proxy-target-class:false(默认):JDK动态代理 true:cglib--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<img src="/2023/01/02/Spring/image-20221221124507934.png" class title="image-20221221124507934">
<h2 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h2><p>步骤：</p>
<ol>
<li><p>导入相关jar包</p>
<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql数据库</li>
<li>spring先关的</li>
<li>aop织入</li>
<li>mybatis-spring【new】</li>
</ul>
<p><code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-07-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring操作数据库的话，还需要一个Spring-jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>测试</p>
</li>
</ol>
<h3 id="回忆mybatis"><a href="#回忆mybatis" class="headerlink" title="回忆mybatis"></a>回忆mybatis</h3><ol>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写核心配置文件（mybatis-config.xml)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!-- 配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zwl.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span><span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span><span class="comment">&lt;!-- 环境变量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Polaris6G&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zwl.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zwl.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zwl.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.zwl.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Spring-Mybatis"><a href="#Spring-Mybatis" class="headerlink" title="Spring-Mybatis"></a>Spring-Mybatis</h2><ol>
<li>编写数据源</li>
</ol>
<p><code>spring-dao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring来管理数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Polaris6G&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>sqlSessionFactory</li>
</ol>
<p><code>spring-dao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定mybatis配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/zwl/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>sqlSessionTemplate</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SqlSessionTemplate:就是我们使用的sqlSession--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory,因为没有set方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>需要给接口加实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwl.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zwl.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="comment">//我们在原来的所有操作，都使用sqlSession来执行，现在都使用SqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>将自己写的实现类，注入到Spring中，测试使用即可</li>
</ol>
<p><code>application.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zwl.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">         ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectUser();</span><br><span class="line">        <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二（引入SqlSessionDaoSupport）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>事务：</p>
<ul>
<li>要么都成功，要么都失败</li>
<li>事务在项目开发中，十分的重要，设计到数据的一致性问题，不能马虎</li>
<li>确保完整性和一致性</li>
</ul>
<p>事务的ACID原则：</p>
<ul>
<li>原子性（Atomicity）：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li>一致性（Consistency）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>
<li>隔离性（Isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>
<li>持久性（Durability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<h3 id="spring中的事务管理"><a href="#spring中的事务管理" class="headerlink" title="spring中的事务管理"></a>spring中的事务管理</h3><ul>
<li><p>声明式事务：AOP</p>
<p>横切方式</p>
<img src="/2023/01/02/Spring/image-20230102171001544.png" class title="image-20230102171001544">
</li>
<li><p>编程式事务：需要在代码中进行事务的管理（try-catch)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TransactionStatus txStatus =</span><br><span class="line">    transactionManager.getTransaction(<span class="keyword">new</span> DefaultTransactionDefinition());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    userMapper.insertUser(user);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    transactionManager.rollback(txStatus);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br><span class="line">transactionManager.commit(txStatus);</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot实战</title>
    <url>/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<ul>
<li>环境搭建<ul>
<li>虚拟机Centos7安装</li>
<li>MySQL5.7安装</li>
<li>node.js安装</li>
</ul>
</li>
<li>SpringBoot后端<ul>
<li>基础知识</li>
<li>框架整合</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="SpringBoot后端"><a href="#SpringBoot后端" class="headerlink" title="SpringBoot后端"></a>SpringBoot后端</h1><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li>约定优先配置</li>
</ol>
<p>SpringBoot是所有基于Spring开发项目的起点。SpringBoot的设计是为了尽可能快的跑起来Spring应用程序并且尽可能减少配置文件。</p>
<ol>
<li>起步依赖：</li>
</ol>
<p>起步依赖就是将具有某种功能的坐标打包到一起，并提供一些默认的功能。</p>
<p>项目的pom.xml文件有两个核心依赖，分别是：</p>
<ul>
<li>spring-boot-starter-parent</li>
<li>spring-boot-starter-web</li>
</ul>
<p><strong>3. 项目代码结构</strong></p>
<p><strong>采用经典三层架构</strong>：</p>
<ul>
<li>controller层：与前端进行交互，接口暴露，信息校验</li>
<li>service层：根据具体业务需求，定义API接口，定义当前系统用户可以做哪些操作</li>
<li>dao层：数据访问对象，对数据库进行操作(SysclassroomDao)</li>
</ul>
<p><strong>注解</strong>：</p>
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704184912247.png" class title="image-20220704184912247">
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704184928101.png" class title="image-20220704184928101">
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704184947011.png" class title="image-20220704184947011">
<h3 id="框架整合"><a href="#框架整合" class="headerlink" title="框架整合"></a>框架整合</h3><p>SpringBoot整合MyBatis-Plus</p>
<ul>
<li>在pom.xml导入依赖包</li>
</ul>
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704185343035.png" class title="image-20220704185343035">
<ul>
<li>在applicaion.yml文件里面进行配置：</li>
</ul>
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704185642426.png" class title="image-20220704185642426">
<ul>
<li>编写实体类：</li>
</ul>
<p>sys/entity/SysCaptchaEntity</p>
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704185820741.png" class title="image-20220704185820741">
<ul>
<li>编写Dao层，加入注解@Mapper</li>
</ul>
<p>sys/dao/SysConfigDao</p>
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704190026868.png" class title="image-20220704190026868">
<ul>
<li>编写Mapper.xml映射文件</li>
</ul>
<p>resouces/mapper/sys/SysConfigDao.xml</p>
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704190311528.png" class title="image-20220704190311528">
<h3 id="vue-element-UI前端"><a href="#vue-element-UI前端" class="headerlink" title="vue+element-UI前端"></a>vue+element-UI前端</h3><ul>
<li>路由跳转</li>
</ul>
<p>在前后端分离框架汇总，前后端是通过数据进行交互，相比于传统的web框架，有一个显著地区别就是前端负责路由跳转</p>
<p>全局路由展示：</p>
<p>src/router/index.js</p>
<img src="/2022/07/05/SpringBoot%E5%AE%9E%E6%88%98/image-20220704191023753.png" class title="image-20220704191023753">
<p><em>ps：</em></p>
<ol>
<li><em>Springboot使用maven作为包管理工具</em></li>
<li><em>nodejs使用npm作为包管理工具</em></li>
<li><em>mybatisplus中，数据库表名使用@tablename注解对实体类进行标注</em></li>
<li><em>mybatisplus中，主键名使用@tableId注解对实体类进行标注</em></li>
</ol>
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码分析</title>
    <url>/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ul>
<li>UML图</li>
<li>springboot核心流程源码</li>
<li>springboot企业扩展最佳实践</li>
</ul>
<span id="more"></span>
<p><em>自我测评：</em></p>
<ol>
<li><em>基于spingboot，谈谈springloc底层原理：</em><ul>
<li><em>三个平面的关系和创建过程</em></li>
<li><em>appcontext和bean工厂平面的内部细节，怎么加载bean定义，和bean如何实例化、初始化</em></li>
</ul>
</li>
<li><em>描述一下bean生命周期：</em><ul>
<li><em>实例化bean的实现-反射；填充bean过程-循环依赖+三级缓存</em></li>
<li><em>调用aware接口，调用beanPostProcessor方法，调用initmethod方法</em></li>
</ul>
</li>
<li><em>spring是如何解决循环依赖的问题：</em><ul>
<li><em>怎么产生的；实例化和初始化分离；流程</em></li>
</ul>
</li>
<li><em>BeanFactory与FactroyBean从底层源码层面解读它们的区别：</em><ul>
<li><em>第三平面的源码实现</em></li>
</ul>
</li>
<li><em>基于springboot，怎么进行插件开发：</em><ul>
<li><em>扩展线</em></li>
</ul>
</li>
</ol>
<h2 id="课程架构"><a href="#课程架构" class="headerlink" title="课程架构"></a>课程架构</h2><img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220706100302008.png" class title="image-20220706100302008">
<p><strong>UML-DEMO制作</strong></p>
<img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220706100403673.png" class title="image-20220706100403673">
<p><strong>spring到springboot演进</strong></p>
<img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220706101009490.png" class title="image-20220706101009490">
<p><strong>spring源码课程边界</strong></p>
<img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220706101955802.png" class title="image-20220706101955802">
<h2 id="三大平面"><a href="#三大平面" class="headerlink" title="三大平面"></a>三大平面</h2><ul>
<li><p>SpringApplication平面：Springboot.jar</p>
<ul>
<li><p>前置处理</p>
<ul>
<li>事件触发</li>
<li>环境配置</li>
<li>预装IOC</li>
</ul>
</li>
<li><p>进入第二平面处理refreshContext()</p>
</li>
<li>后置处理<ul>
<li>事件触发</li>
<li>异常处理</li>
</ul>
</li>
</ul>
</li>
<li><p>ApplicationContext平面：Springcontext.jar</p>
<p>完成bean定义加载</p>
<ul>
<li>前置处理<ul>
<li>第三平面的预处理</li>
</ul>
</li>
<li>自动装配<ul>
<li>第二平面事件触发</li>
<li>处理自动配置类、注解、扫包</li>
<li>完成bean定义加载</li>
<li>对bean定义的后置处理</li>
</ul>
</li>
<li>对接tomcat</li>
<li>进入第三平面处理refreshContext()</li>
</ul>
</li>
<li><p>BeanFactory平面：springbean.jar</p>
<p>对所有bean定义轮询处理（完成bean的实例化）</p>
<ul>
<li>三级缓存</li>
<li>创建bean</li>
<li>填充属性</li>
<li>bean初始化</li>
</ul>
</li>
</ul>
<h2 id="三大注解"><a href="#三大注解" class="headerlink" title="三大注解"></a>三大注解</h2><img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220707101448574.png" class title="image-20220707101448574">
<p>容器内加组件</p>
<img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220707101720910.png" class title="image-20220707101720910">
<p>组件给属性</p>
<img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220707101829471.png" class title="image-20220707101829471">
<h2 id="面向平面插件深度扩展"><a href="#面向平面插件深度扩展" class="headerlink" title="面向平面插件深度扩展"></a>面向平面插件深度扩展</h2><ul>
<li>前两个平面以事件为主</li>
<li>bean工厂平面扩展线分析<ul>
<li>配置中心、属性注入</li>
<li>常见配件开发的注入点</li>
</ul>
</li>
</ul>
<h2 id="面向技术组件化插件沉淀"><a href="#面向技术组件化插件沉淀" class="headerlink" title="面向技术组件化插件沉淀"></a>面向技术组件化插件沉淀</h2><img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220707110901000.png" class title="image-20220707110901000">
<h2 id="某springboot框架组件分布"><a href="#某springboot框架组件分布" class="headerlink" title="某springboot框架组件分布"></a>某springboot框架组件分布</h2><p>整体基于模块化快速服务开发（功能开箱即用，配置简单，测试简单）、多协议发布（支持HTTP,SOAP,DUBBO协议，一次编写多种协议调用，架构切换业务代码复用），内置各种监控指标的服务层开发框架。</p>
<p><strong>服务开发及运行框架功能</strong></p>
<img src="/2022/07/07/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220707111910879.png" class title="image-20220707111910879">
<p><strong>开发流程</strong></p>
<ul>
<li>开发环境准备<ul>
<li>JDK1.8以上</li>
<li>maven私服配置</li>
<li>IDEA开发工具配置</li>
</ul>
</li>
<li>业务功能建模<ul>
<li>新建Maven工程</li>
<li>确定系统需要的组件</li>
<li>引入组件对应的starter</li>
</ul>
</li>
<li>服务开发<ul>
<li>编写InDto</li>
<li>编写服务接口</li>
<li>实现服务逻辑</li>
</ul>
</li>
<li>配置相关组件<ul>
<li>连接池配置</li>
<li>mybatis配置</li>
<li>服务发布配置</li>
</ul>
</li>
<li>测试<ul>
<li>单元测试</li>
<li>打包运行</li>
</ul>
</li>
</ul>
<p><strong>可视化监控</strong></p>
<p><em>ps:</em></p>
<ol>
<li><em>看源码经常用到类图和时序图两个UML图</em></li>
<li><em>针对bean实例化的beanfactory平面，常见扩展手段是：实现接口</em></li>
<li><em>spring.factories的扩展机制是仿照java中的SPI思想</em></li>
</ol>
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud实战</title>
    <url>/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<ul>
<li>springcloud由来</li>
<li>springcloud体系</li>
<li>springcloud企业最佳实践架构分析</li>
</ul>
<span id="more"></span>
<h2 id="springcloud由来"><a href="#springcloud由来" class="headerlink" title="springcloud由来"></a>springcloud由来</h2><ul>
<li><p>自由演进期：</p>
<ul>
<li>单体应用阶段</li>
</ul>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220707211910946.png" class title="image-20220707211910946">
<ul>
<li><p>垂直应用阶段（重复造轮子）</p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220707212006867.png" class title="image-20220707212006867">
</li>
<li><p>分布式系统阶段（应用相互调用杂乱）</p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220707212020502.png" class title="image-20220707212020502">
</li>
</ul>
</li>
</ul>
<ul>
<li><p>治理期</p>
<ul>
<li><p>服务治理阶段（ESB总线）</p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220707212436477.png" class title="image-20220707212436477">
</li>
<li><p>微服务阶段（回归应用）</p>
</li>
<li><p>服务网络（再次抽离）</p>
</li>
</ul>
</li>
</ul>
<h2 id="springcloud体系"><a href="#springcloud体系" class="headerlink" title="springcloud体系"></a><strong>springcloud体系</strong></h2><img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220707211510857.png" class title="image-20220707211510857">
<p>重点：</p>
<ol>
<li>注册中心（服务注册和发现）：<strong>eureka</strong></li>
</ol>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220707215816645.png" class title="image-20220707215816645">
<p>（1）springboot扩展点</p>
<p>（2）核心流程</p>
<p>（3）三级缓存作用</p>
<ol>
<li>配置中心（分布式，版本化配置）：<strong>config</strong></li>
</ol>
<p>集成：与注册中心衔接</p>
<p>为什么必须要用bootstrap.yml</p>
<ol>
<li>网关集群（路由，负载和断路器）：<strong>zuul</strong></li>
</ol>
<p>基于springboot扩展</p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220708104620506.png" class title="image-20220708104620506">
<p><strong>API网关</strong>是微服务体系对外进行能力开放和服务调用管控的重要手段；API网关通过收敛接口服务和策略控制完成微服务对外的能力开放和接口管控，<strong>包括</strong>：</p>
<ul>
<li>认证与授权：支持cookie/session与共享session机制，支持基于OAuth2的单点登录与AccessToken认证等</li>
<li>API开放：支持API服务注册，API服务发布，API服务生命周期管理</li>
<li>路由管理：支持路由策略挂管理（URL路由，HttpHead路由等），负载均衡管理（随机/轮训/权重），基于注册中心的动态路由</li>
<li>API运维：监控网关自身健康状态，以及API的调用的次数，响应时间，异常信息等，并能够对接日志中心与调用链</li>
<li>API安全：对服务内容加解密并签名</li>
<li>中介转换：可以支持部分业务内容和协议转换（Restfuk转Dubbo)</li>
</ul>
<p><em>认证授权：spring Security Oauth</em></p>
<p>事件</p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220707214444547.png" class title="image-20220707214444547">
<p>内生态：</p>
<ul>
<li>日志体系</li>
<li>tomcat,springmvc</li>
<li>druid,datasource</li>
</ul>
<h2 id="springcloud架构实践"><a href="#springcloud架构实践" class="headerlink" title="springcloud架构实践"></a>springcloud架构实践</h2><ul>
<li>基本形态</li>
</ul>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220708102857150.png" class title="image-20220708102857150">
<p>运行部署：</p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220708103145039.png" class title="image-20220708103145039">
<ul>
<li>阿里形态（nacos）:</li>
</ul>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220708103202156.png" class title="image-20220708103202156">
<p>部署运行：</p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220708103217537.png" class title="image-20220708103217537">
<p><strong>MVC分层模式</strong></p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220708103436432.png" class title="image-20220708103436432">
<p>外网：微服务与外来调用请求</p>
<p>内网：各组件之间的通讯</p>
<p><strong>鉴权过程</strong></p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220708103650852.png" class title="image-20220708103650852">
<p>鉴权与微服务开发分离</p>
<p><strong>springcloud开发服务架构</strong></p>
<img src="/2022/07/08/SpringCloud%E5%AE%9E%E6%88%98/image-20220708103955762.png" class title="image-20220708103955762">
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>Wx-Programming_1</title>
    <url>/2021/10/28/Wx-Programming-1/</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>根据微信小程序官方文档来学习WXML、WXSS吧！开干~</p>
<span id="more"></span>
<h1 id="WXML-模板"><a href="#WXML-模板" class="headerlink" title="WXML 模板"></a>WXML 模板</h1><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>用户界面呈现会因为当前时刻数据不同而有所不同，或者是因为用户的操作发生动态改变，这就要求程序的运行过程中，要有动态的去改变渲染界面的能力。</p>
<p>在 Web 开发中，开发者使用 JavaScript 通过Dom 接口来完成界面的实时更新。在小程序中，使用 WXML 语言所提供的数据绑定功能，来完成此项功能。</p>
<p>栗子：</p>
<p>1.</p>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    time: (<span class="keyword">new</span> <span class="built_in">Date</span>()).toString()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>index.wxml</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>当前时间：&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过 来绑定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正确的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">data-test</span>=<span class="string">&quot;&#123;&#123;test&#125;&#125;&quot;</span>&gt;</span> hello world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 错误的写法  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">data-test</span>=<span class="string">&#123;&#123;test&#125;&#125;</span>&gt;</span> hello world &lt;/text &gt;</span><br></pre></td></tr></table></figure>
<p>属性值也可以动态的去改变，有所不同的是，属性值必须被包裹在双引号中。</p>
<p><strong>变量名是大小写敏感的，  和  是两个不同的变量</strong>。</p>
<h2 id="逻辑语法"><a href="#逻辑语法" class="headerlink" title="逻辑语法"></a>逻辑语法</h2><p>三元运算：<code>&#123;&#123; a === 10? "变量 a 等于10": "变量 a 不等于10"&#125;&#125;</code></p>
<p>算数运算：<code>&#123;&#123;a + b&#125;&#125;</code></p>
<p>字符串拼接：<code>&#123;&#123;"hello " + name&#125;&#125;</code></p>
<p>常量：<code>&#123;&#123;"hello world"&#125;&#125;</code></p>
<h2 id="条件逻辑"><a href="#条件逻辑" class="headerlink" title="条件逻辑"></a>条件逻辑</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;length &gt; 2&#125;&#125;&quot;</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>block封装：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> view1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> view2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>index.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [&#123;</span><br><span class="line">      message: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      message: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>index.wxml：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> wx:for-index 指定数组当前下标的变量名</p>
<p> wx:for-item 指定数组当前元素的变量名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;idx&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;itemName&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;idx&#125;&#125;: &#123;&#123;itemName.message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>类似 <code>block wx:if</code> ，也可以将 <code>wx:for</code> 用在 <code>&lt;block/&gt;</code> 标签上，以渲染一个包含多节点的结构块。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3]&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;index&#125;&#125;: <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>wx:key</strong></p>
<p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <code>&lt;input/&gt;</code> 中的输入内容， <code>&lt;switch/&gt;</code> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p>
<p><code>wx:key</code> 的值以两种形式提供：</p>
<ol>
<li>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中<strong>唯一</strong>的字符串或数字，且<strong>不能动态改变</strong>。</li>
<li>保留关键字 this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：</li>
</ol>
<p>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</p>
<p>大栗子：</p>
<p>index.wxml:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">switch</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;objectArray&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;unique&quot;</span> &gt;</span> &#123;&#123;item.id&#125;&#125; <span class="tag">&lt;/<span class="name">switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;switch&quot;</span>&gt;</span> Switch <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;addToFront&quot;</span>&gt;</span> Add to the front <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">switch</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;numberArray&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;*this&quot;</span> &gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;addNumberToFront&quot;</span>&gt;</span> Add Number to the front <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>index.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    objectArray: [</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_5&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_4&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_3&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_2&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_1&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">unique</span>: <span class="string">&#x27;unique_0&#x27;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    numberArray: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">switch</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="built_in">this</span>.data.objectArray.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">      <span class="keyword">const</span> x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * length)</span><br><span class="line">      <span class="keyword">const</span> y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * length)</span><br><span class="line">      <span class="keyword">const</span> temp = <span class="built_in">this</span>.data.objectArray[x]</span><br><span class="line">      <span class="built_in">this</span>.data.objectArray[x] = <span class="built_in">this</span>.data.objectArray[y]</span><br><span class="line">      <span class="built_in">this</span>.data.objectArray[y] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      objectArray: <span class="built_in">this</span>.data.objectArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  addToFront: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="built_in">this</span>.data.objectArray.length</span><br><span class="line">    <span class="built_in">this</span>.data.objectArray = [&#123;<span class="attr">id</span>: length, <span class="attr">unique</span>: <span class="string">&#x27;unique_&#x27;</span> + length&#125;].concat(<span class="built_in">this</span>.data.objectArray)</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      objectArray: <span class="built_in">this</span>.data.objectArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  addNumberToFront: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data.numberArray = [     <span class="built_in">this</span>.data.numberArray.length + <span class="number">1</span> ].concat(<span class="built_in">this</span>.data.numberArray)</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      numberArray: <span class="built_in">this</span>.data.numberArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板定义：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;msgItem&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> Time: &#123;&#123;time&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>模板使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;msgItem&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;...item&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中index.js中的data有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">item: &#123;</span><br><span class="line">  index: <span class="number">0</span>,</span><br><span class="line">  msg: <span class="string">&#x27;this is a template&#x27;</span>,</span><br><span class="line">  time: <span class="string">&#x27;2016-06-18&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板的选择：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;odd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> odd <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;even&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> even <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3, 4, 5]&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;&#123;&#123;item % 2 == 0 ? &#x27;even&#x27; : &#x27;odd&#x27;&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出</span></span><br><span class="line"><span class="comment">odd</span></span><br><span class="line"><span class="comment">even</span></span><br><span class="line"><span class="comment">odd</span></span><br><span class="line"><span class="comment">even</span></span><br><span class="line"><span class="comment">odd</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>WXML 提供两种文件引用方式import和include。</p>
<ul>
<li>import：在该文件中使用目标文件定义的 template</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- item.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;item.wxml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;item&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;text: &#x27;forbar&#x27;&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件中 import 的 template，简言之就是 import 不具有递归的特性。</strong></p>
<ul>
<li>include：可以将目标文件中除了 <code>&lt;template/&gt; &lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 include 位置</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- header.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> header <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- footer.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> footer <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;header.wxml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> body <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;footer.wxml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="共同属性"><a href="#共同属性" class="headerlink" title="共同属性"></a>共同属性</h2><p>所有wxml标签均支持：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>属性名</strong></th>
<th style="text-align:left"><strong>类型</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
<th style="text-align:left"><strong>注解</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">String</td>
<td style="text-align:left">组件的唯一标识</td>
<td style="text-align:left">整个页面唯一</td>
</tr>
<tr>
<td style="text-align:left">class</td>
<td style="text-align:left">String</td>
<td style="text-align:left">组件的样式类</td>
<td style="text-align:left">在对应的 WXSS 中定义的样式类</td>
</tr>
<tr>
<td style="text-align:left">style</td>
<td style="text-align:left">String</td>
<td style="text-align:left">组件的内联样式</td>
<td style="text-align:left">可以动态设置的内联样式</td>
</tr>
<tr>
<td style="text-align:left">hidden</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">组件是否显示</td>
<td style="text-align:left">所有组件默认显示</td>
</tr>
<tr>
<td style="text-align:left">data-*</td>
<td style="text-align:left">Any</td>
<td style="text-align:left">自定义属性</td>
<td style="text-align:left">组件上触发的事件时，会发送给事件处理函数</td>
</tr>
<tr>
<td style="text-align:left">bind<em>/catch</em></td>
<td style="text-align:left">EventHandler</td>
<td style="text-align:left">组件的事件</td>
</tr>
</tbody>
</table>
</div>
<h1 id="WXSS样式"><a href="#WXSS样式" class="headerlink" title="WXSS样式"></a>WXSS样式</h1><p>为了更适合小程序开发，WXSS对CSS做了一些补充以及修改。</p>
<h2 id="文件组成"><a href="#文件组成" class="headerlink" title="文件组成"></a>文件组成</h2><ul>
<li>项目公共样式：根目录中的app.wxss为项目公共样式，它会被注入到小程序的每个页面</li>
<li>其它样式：其它样式可以被项目公共样式和页面样式引用</li>
</ul>
<h2 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="尺寸单位"></a>尺寸单位</h2><p>为了应对因不同型号手机大小不同的问题，引入rpx（response pixel）尺寸单位。</p>
<p>小程序编译后，rpx会做一次px换算。换算是以375个物理像素为基准，也就是在一个宽度为375物理像素的屏幕下，1rpx = 1px。</p>
<p>举个例子：iPhone6屏幕宽度为375px，共750个物理像素，那么1rpx = 375 / 750 px = 0.5px。</p>
<p>即会按固定的比例进行缩放以适应屏幕。</p>
<h2 id="WXSS引用"><a href="#WXSS引用" class="headerlink" title="WXSS引用"></a>WXSS引用</h2><p>CSS引用另一个样式文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./test_0.css&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>WXSS依然可以实现样式的引用，格式有所不同：(必须使用相对路径)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./test_0.wxss&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>与Web开发基本一致（但不支持通配符* 如下）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小程序中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 48rpx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>小程序支持动态更新内联样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  eleColor: &#x27;red&#x27;,</span></span><br><span class="line"><span class="comment">  eleFontsize: &#x27;48rpx&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;color: &#123;&#123;eleColor&#125;&#125;; font-size: &#123;&#123;eleFontsize&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>类型</strong></th>
<th style="text-align:left"><strong>选择器</strong></th>
<th style="text-align:left"><strong>样例</strong></th>
<th style="text-align:left"><strong>样例描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">类选择器</td>
<td style="text-align:left">.class</td>
<td style="text-align:left">.intro</td>
<td style="text-align:left">选择所有拥有 class=”intro” 的组件</td>
</tr>
<tr>
<td style="text-align:left">id选择器</td>
<td style="text-align:left">#id</td>
<td style="text-align:left">#firstname</td>
<td style="text-align:left">选择拥有 id=”firstname” 的组件</td>
</tr>
<tr>
<td style="text-align:left">元素选择器</td>
<td style="text-align:left">element</td>
<td style="text-align:left">view checkbox</td>
<td style="text-align:left">选择所有文档的 view 组件和所有的 checkbox 组件</td>
</tr>
<tr>
<td style="text-align:left">伪元素选择器</td>
<td style="text-align:left">::after</td>
<td style="text-align:left">view::after</td>
<td style="text-align:left">在 view 组件后边插入内容</td>
</tr>
<tr>
<td style="text-align:left">伪元素选择器</td>
<td style="text-align:left">::before</td>
<td style="text-align:left">view::before</td>
<td style="text-align:left">在 view 组件前边插入内容</td>
</tr>
</tbody>
</table>
</div>
<p><strong>优先级</strong>：</p>
<p><code>!important</code>:无穷&gt;<code>style=&quot;&quot;</code>（1000）&gt;<code>#id</code>（100）&gt;<code>.class</code>（10）&gt;<code>element</code>（1）</p>
<p>在优先级相同的情况下，后设置的样式优先级高于先设置的样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">view&#123; // 权重为 <span class="number">1</span></span><br><span class="line">  <span class="attribute">color</span>: blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ele</span>&#123; // 权重为 <span class="number">10</span></span><br><span class="line">  <span class="attribute">color</span>: red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ele</span>&#123; // 权重为 <span class="number">100</span></span><br><span class="line">  <span class="attribute">color</span>: pink</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">view#ele&#123; // 权重为 1 + 100 = 101，优先级最高，元素颜色为orange</span><br><span class="line">  <span class="attribute">color</span>: orange</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">view.ele&#123; // 权重为 1 + 10 = 11</span><br><span class="line">  <span class="attribute">color</span>: green</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官方文档：</p>
<p>上链接：<a href="https://github.com/Tencent/weui-wxss">https://github.com/Tencent/weui-wxss</a></p>
<p>简单学了WXML、CSS，就先酱</p>
]]></content>
  </entry>
  <entry>
    <title>Wx-Programming-2</title>
    <url>/2021/12/10/Wx-Programming-2/</url>
    <content><![CDATA[<p>了解json配置文件、基本语法加数据绑定实例</p>
<span id="more"></span>
<h1 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h1><p>参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html</a></p>
<h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p>用于设置小程序的状态栏、导航条、标题、窗口背景色。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">最低版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">navigationBarBackgroundColor</td>
<td style="text-align:left">HexColor</td>
<td style="text-align:left">#000000</td>
<td style="text-align:left">导航栏背景颜色，如 <code>#000000</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">navigationBarTextStyle</td>
<td style="text-align:left">string</td>
<td style="text-align:left">white</td>
<td style="text-align:left">导航栏标题颜色，仅支持 <code>black</code> / <code>white</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">navigationBarTitleText</td>
<td style="text-align:left">string</td>
<td style="text-align:left"></td>
<td style="text-align:left">导航栏标题文字内容</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">navigationStyle</td>
<td style="text-align:left">string</td>
<td style="text-align:left">default</td>
<td style="text-align:left">导航栏样式，仅支持以下值： <code>default</code> 默认样式 <code>custom</code> 自定义导航栏，只保留右上角胶囊按钮。参见注 2。</td>
<td style="text-align:left">iOS/Android 微信客户端 6.6.0，Windows 微信客户端不支持</td>
</tr>
<tr>
<td style="text-align:left">backgroundColor</td>
<td style="text-align:left">HexColor</td>
<td style="text-align:left">#ffffff</td>
<td style="text-align:left">窗口的背景色</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">backgroundTextStyle</td>
<td style="text-align:left">string</td>
<td style="text-align:left">dark</td>
<td style="text-align:left">下拉 loading 的样式，仅支持 <code>dark</code> / <code>light</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">backgroundColorTop</td>
<td style="text-align:left">string</td>
<td style="text-align:left">#ffffff</td>
<td style="text-align:left">顶部窗口的背景色，仅 iOS 支持</td>
<td style="text-align:left">微信客户端 6.5.16</td>
</tr>
<tr>
<td style="text-align:left">backgroundColorBottom</td>
<td style="text-align:left">string</td>
<td style="text-align:left">#ffffff</td>
<td style="text-align:left">底部窗口的背景色，仅 iOS 支持</td>
<td style="text-align:left">微信客户端 6.5.16</td>
</tr>
<tr>
<td style="text-align:left">enablePullDownRefresh</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">是否开启全局的下拉刷新。 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onpulldownrefresh">Page.onPullDownRefresh</a></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">onReachBottomDistance</td>
<td style="text-align:left">number</td>
<td style="text-align:left">50</td>
<td style="text-align:left">页面上拉触底事件触发时距页面底部距离，单位为 px。 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onreachbottom">Page.onReachBottom</a></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">pageOrientation</td>
<td style="text-align:left">string</td>
<td style="text-align:left">portrait</td>
<td style="text-align:left">屏幕旋转设置，支持 <code>auto</code> / <code>portrait</code> / <code>landscape</code> 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html">响应显示区域变化</a></td>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a> (auto) / <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.5.0</a> (landscape)</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#restartStrategy">restartStrategy</a></td>
<td style="text-align:left">string</td>
<td style="text-align:left">homePage</td>
<td style="text-align:left">重新启动策略配置</td>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.8.0</a></td>
</tr>
<tr>
<td style="text-align:left">initialRenderingCache</td>
<td style="text-align:left">string</td>
<td style="text-align:left"></td>
<td style="text-align:left">页面<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/initial-rendering-cache.html">初始渲染缓存</a>配置，支持 <code>static</code> / <code>dynamic</code></td>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.1</a></td>
</tr>
<tr>
<td style="text-align:left">visualEffectInBackground</td>
<td style="text-align:left">string</td>
<td style="text-align:left">none</td>
<td style="text-align:left">切入系统后台时，隐藏页面内容，保护用户隐私。支持 <code>hidden</code> / <code>none</code></td>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.15.0</a></td>
</tr>
</tbody>
</table>
</div>
<h2 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h2><p>如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">必填</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">最低版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left">HexColor</td>
<td style="text-align:left">是</td>
<td style="text-align:left"></td>
<td style="text-align:left">tab 上的文字默认颜色，仅支持十六进制颜色</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">selectedColor</td>
<td style="text-align:left">HexColor</td>
<td style="text-align:left">是</td>
<td style="text-align:left"></td>
<td style="text-align:left">tab 上的文字选中时的颜色，仅支持十六进制颜色</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">backgroundColor</td>
<td style="text-align:left">HexColor</td>
<td style="text-align:left">是</td>
<td style="text-align:left"></td>
<td style="text-align:left">tab 的背景色，仅支持十六进制颜色</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">borderStyle</td>
<td style="text-align:left">string</td>
<td style="text-align:left">否</td>
<td style="text-align:left">black</td>
<td style="text-align:left">tabbar 上边框的颜色， 仅支持 <code>black</code> / <code>white</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">list</td>
<td style="text-align:left">Array</td>
<td style="text-align:left">是</td>
<td style="text-align:left"></td>
<td style="text-align:left">tab 的列表，详见 <code>list</code> 属性说明，最少 2 个、最多 5 个 tab</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">position</td>
<td style="text-align:left">string</td>
<td style="text-align:left">否</td>
<td style="text-align:left">bottom</td>
<td style="text-align:left">tabBar 的位置，仅支持 <code>bottom</code> / <code>top</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">custom</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">否</td>
<td style="text-align:left">false</td>
<td style="text-align:left">自定义 tabBar，见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">详情</a></td>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.5.0</a></td>
</tr>
</tbody>
</table>
</div>
<p>其中 list 接受一个数组，<strong>只能配置最少 2 个、最多 5 个 tab</strong>。tab 按数组的顺序排序，每个项都是一个对象，其属性值如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">pagePath</td>
<td style="text-align:left">string</td>
<td style="text-align:left">是</td>
<td style="text-align:left">页面路径，必须在 pages 中先定义</td>
</tr>
<tr>
<td style="text-align:left">text</td>
<td style="text-align:left">string</td>
<td style="text-align:left">是</td>
<td style="text-align:left">tab 上按钮文字</td>
</tr>
<tr>
<td style="text-align:left">iconPath</td>
<td style="text-align:left">string</td>
<td style="text-align:left">否</td>
<td style="text-align:left">图片路径，icon 大小限制为 40kb，建议尺寸为 81px <em> 81px，不支持网络图片。 <em>*当 <code>position</code> 为 <code>top</code> 时，不显示 icon。</em></em></td>
</tr>
<tr>
<td style="text-align:left">selectedIconPath</td>
<td style="text-align:left">string</td>
<td style="text-align:left">否</td>
<td style="text-align:left">选中时的图片路径，icon 大小限制为 40kb，建议尺寸为 81px <em> 81px，不支持网络图片。 <em>*当 <code>position</code> 为 <code>top</code> 时，不显示 icon。</em></em></td>
</tr>
</tbody>
</table>
</div>
<img src="/2021/12/10/Wx-Programming-2/tabbar.ce1b3c5b.png" class title="img">
<h1 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h1><p>参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html</a></p>
<p><code>page.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;微信接口功能演示&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;backgroundColor&quot;</span>: <span class="string">&quot;#eeeeee&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;light&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="sitemap配置"><a href="#sitemap配置" class="headerlink" title="sitemap配置"></a>sitemap配置</h1><p>参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html</a></p>
<p><code>sitemap.json</code></p>
<p>配置其小程序页面是否允许微信索引。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p><code>page.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Page Oblect</span></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">    data: &#123;</span><br><span class="line">      msg:<span class="string">&quot;hello bing&quot;</span>,</span><br><span class="line">      num:<span class="number">100000</span>,</span><br><span class="line">      isGirl:<span class="literal">true</span>,</span><br><span class="line">      person:&#123;</span><br><span class="line">          age:<span class="number">74</span>,</span><br><span class="line">          height:<span class="number">145</span>,</span><br><span class="line">          weight:<span class="number">200</span>,</span><br><span class="line">          name:<span class="string">&quot;富婆&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      isChecked:<span class="literal">false</span>,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                id:<span class="number">0</span>,</span><br><span class="line">                name:<span class="string">&quot;猪八戒&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id:<span class="number">1</span>,</span><br><span class="line">                name:<span class="string">&quot;天蓬元帅&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id:<span class="number">2</span>,</span><br><span class="line">                name:<span class="string">&quot;悟能&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)<span class="comment">//Page Oblect</span></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">    data: &#123;</span><br><span class="line">      msg:<span class="string">&quot;hello bing&quot;</span>,</span><br><span class="line">      num:<span class="number">100000</span>,</span><br><span class="line">      isGirl:<span class="literal">true</span>,</span><br><span class="line">      person:&#123;</span><br><span class="line">          age:<span class="number">74</span>,</span><br><span class="line">          height:<span class="number">145</span>,</span><br><span class="line">          weight:<span class="number">200</span>,</span><br><span class="line">          name:<span class="string">&quot;富婆&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      isChecked:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>page.wxml</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/demo/demo03.wxml--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1 text -&gt; span标签 行内元素 不会换行</span></span><br><span class="line"><span class="comment">    2 view -&gt; div标签 块级元素 会换行</span></span><br><span class="line"><span class="comment">    3 checkbox -&gt; 以前的复选框标签</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>3<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1 字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 数字类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 bool类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>是否是女生：&#123;&#123;isGirl&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4 object类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;person.height&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;person.weight&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5 在标签的属性中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">data-num</span>=<span class="string">&quot;&#123;&#123;num&#125;&#125;&quot;</span>&gt;</span>自定义属性<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 6 使用bool类型充当属性 checked</span></span><br><span class="line"><span class="comment">        1 字符串和花括号之间一定不要存在空格 否则会导致识别失败</span></span><br><span class="line"><span class="comment">         &lt;checkbox checked=&quot;    &#123;&#123;isChecked&#125;&#125;&gt; &lt;/checkbox&gt;&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;isChecked&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 7 运算-》表达式</span></span><br><span class="line"><span class="comment">        1 可以在花括号忠厚加入 表达式 --</span></span><br><span class="line"><span class="comment">        2 表达式</span></span><br><span class="line"><span class="comment">          指的是一些简单 运算 数字运算 字符串 拼接 逻辑运算 </span></span><br><span class="line"><span class="comment">          1 数字的加减</span></span><br><span class="line"><span class="comment">          2 字符串拼接</span></span><br><span class="line"><span class="comment">          3 三元表达式</span></span><br><span class="line"><span class="comment">        3 语句</span></span><br><span class="line"><span class="comment">          1 复杂的代码段</span></span><br><span class="line"><span class="comment">            1 if else</span></span><br><span class="line"><span class="comment">            2 Switch</span></span><br><span class="line"><span class="comment">            3 do while...</span></span><br><span class="line"><span class="comment">            4 for ...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;1+1&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;&#x27;1&#x27;+&#x27;1&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; 11%2 == 0 ? &#x27;偶数&#x27; : &#x27;奇数&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    8 列表循环</span></span><br><span class="line"><span class="comment">        1 wx:for=&quot;&#123;&#123;数组或者对象&#125;&#125;&quot;  wx:for-item=&quot;循环项的名称&quot; wx:for-index=&quot;循环项的索引&quot;</span></span><br><span class="line"><span class="comment">        2 wx:key=&quot;唯一的值&quot;用来提高列表渲染的性能</span></span><br><span class="line"><span class="comment">            1 wx:key 绑定一个普通的字符串的时候 那么这个字符串的名称 一定是循环数组中的对象的唯一属性</span></span><br><span class="line"><span class="comment">            2 wx:key = *this 就表示 你的数组 是一个普通数组 *this 表示是循环项</span></span><br><span class="line"><span class="comment">            [1,2,3,4,5]</span></span><br><span class="line"><span class="comment">            [1,&#x27;nihao&#x27;,&quot;22&quot;]</span></span><br><span class="line"><span class="comment">        3 当出现 数组的嵌套循环的时候 尤其要注意 一下绑定的名称 不要重名</span></span><br><span class="line"><span class="comment">            wx:for-item=&quot;item wx:for-index=&quot;index&quot;</span></span><br><span class="line"><span class="comment">        4 默认情况下 我们 不写</span></span><br><span class="line"><span class="comment">            wx:for-item=&quot;item&quot; wx:for-index=&quot;index&quot;</span></span><br><span class="line"><span class="comment">            小程序也会把 循环项的名称 和索引的名称 item 和 index</span></span><br><span class="line"><span class="comment">            只有一层循环的话 （wx:for-item=&quot;item&quot; wx:for-index=&quot;index&quot; ）可以省略</span></span><br><span class="line"><span class="comment">    9 对象循环</span></span><br><span class="line"><span class="comment">        1 wx:for=&quot;&#123;&#123;对象&#125;&#125;&quot; wx:for-item=&quot;对象的值&quot; wx:for-index=&quot;对象的属性&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;list&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">wx:for-index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">wx:key</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        索引：&#123;&#123;index&#125;&#125;</span><br><span class="line">        --</span><br><span class="line">        值：&#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>对象循环<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;person&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">wx:for-item</span>=<span class="string">&quot;value&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">wx:for-index</span>=<span class="string">&quot;key&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">wx:key</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        属性：&#123;&#123;key&#125;&#125;</span><br><span class="line">        --</span><br><span class="line">        值：&#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    10 block</span></span><br><span class="line"><span class="comment">        1 占位符的标签</span></span><br><span class="line"><span class="comment">        2 写代码的时候 可以看到这个标签存在</span></span><br><span class="line"><span class="comment">        3 页面渲染 小程序会移除</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;list&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">wx:for-index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">wx:key</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;my_list&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        索引：&#123;&#123;index&#125;&#125;</span><br><span class="line">        --</span><br><span class="line">        值：&#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    11 条件渲染</span></span><br><span class="line"><span class="comment">        1 wx:if=&quot;&#123;&#123;true/false&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment">        wx:if</span></span><br><span class="line"><span class="comment">        wx:elif</span></span><br><span class="line"><span class="comment">        wx:else</span></span><br><span class="line"><span class="comment">        2 hidden</span></span><br><span class="line"><span class="comment">            1 在标签上直接加入属性 hidden</span></span><br><span class="line"><span class="comment">            2 hidden=&quot;&#123;&#123;true&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment">        3 什么场景下用哪个</span></span><br><span class="line"><span class="comment">            1 当标签不是频繁的切换显示 优先使用 wx:if</span></span><br><span class="line"><span class="comment">                直接把标签从页面结构给移除掉</span></span><br><span class="line"><span class="comment">            2 当标签频繁切换显示 优先使用 hidden </span></span><br><span class="line"><span class="comment">                通过添加样式的方式来切换显示</span></span><br><span class="line"><span class="comment">                hidden（相当于style=&quot;display:none;&quot;）与样式dieplay不要混用，display会把hidden覆盖</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">view</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>------------------------<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>&gt;</span>hidden1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span>hidden2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>----------000-------------<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span>wx:if<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>&gt;</span>hidden<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h1 id="数据绑定实例"><a href="#数据绑定实例" class="headerlink" title="数据绑定实例"></a>数据绑定实例</h1><p><code>demo.wxml</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1 需要给input标签绑定 input事件</span></span><br><span class="line"><span class="comment">        绑定关键字 bindinput</span></span><br><span class="line"><span class="comment">    2 如何获取 输入框的值</span></span><br><span class="line"><span class="comment">        通过事件源对象来获取</span></span><br><span class="line"><span class="comment">        e 事件原对象</span></span><br><span class="line"><span class="comment">        e.detail.value</span></span><br><span class="line"><span class="comment">    3 把输入框的值 赋值到 data 当中  setData()</span></span><br><span class="line"><span class="comment">        不能直接</span></span><br><span class="line"><span class="comment">        1 this.data.num = e.detail.value</span></span><br><span class="line"><span class="comment">        2 this.num = e.detail.value</span></span><br><span class="line"><span class="comment">        正确的写法</span></span><br><span class="line"><span class="comment">        this.setData(&#123;</span></span><br><span class="line"><span class="comment">            num:e.detail.value</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    4 需要加入一个点击事件</span></span><br><span class="line"><span class="comment">        1 bindtap</span></span><br><span class="line"><span class="comment">        2 无法在小程序当中 直接 传参  handtap(1)错误 不能带参数 不能带括号</span></span><br><span class="line"><span class="comment">        3 通过自定义属性的方式(data-...)来传递参数</span></span><br><span class="line"><span class="comment">        4 事件源中获取 自定义属性(e.currentTarget.dataset)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;handleInput&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;handletap&quot;</span> <span class="attr">data-operation</span>=<span class="string">&quot;&#123;&#123;1&#125;&#125;&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;handletap&quot;</span> <span class="attr">data-operation</span>=<span class="string">&quot;&#123;&#123;-1&#125;&#125;&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>demo.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/demo/demo.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    num:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handleInput</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        num:<span class="built_in">Number</span>(e.detail.value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//加 减 按钮的事件</span></span><br><span class="line">  <span class="function"><span class="title">handletap</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//  console.log(e);</span></span><br><span class="line">    <span class="comment">// 1 获取自定义属性 operation</span></span><br><span class="line">    <span class="keyword">const</span> operation=e.currentTarget.dataset.operation;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        num: <span class="built_in">this</span>.data.num + operation</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Wx-Programming</category>
      </categories>
  </entry>
  <entry>
    <title>gin框架</title>
    <url>/2021/07/14/gin%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="gin框架"><a href="#gin框架" class="headerlink" title="gin框架"></a>gin框架</h1><h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，已经发布了1.0版本。具有快速灵活，容错方便等特点。其实对于golang而言，web框架的依赖要远比Python，Java之类的要小。自身的net/http足够简单，性能也非常不错。框架更像是一些常用函数或者工具的集合。借助框架开发，不仅可以省去很多常用的封装带来的时间，也有助于团队的编码风格和形成规范。</p>
<p>下面就Gin的用法做系统的讲解。</p>
<span id="more"></span>
<h3 id="web简介："><a href="#web简介：" class="headerlink" title="web简介："></a>web简介：</h3><p>web是基于http协议进行交互的应用网络</p>
<p>web就是通过使用浏览器/app访问的各种资源</p>
<p>浏览器——（request）——》服务器</p>
<p>服务器——（response）——》浏览器</p>
<p><strong>一个请求对应一个响应</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">   b, _ := ioutil.ReadFile(<span class="string">&quot;./hello.txt&quot;</span>)<span class="comment">//打开hello.txt</span></span><br><span class="line">    _, _ =fmt.Fprintln(w,<span class="keyword">string</span>(b))<span class="comment">//输出hello.txt中的内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/hello&quot;</span>,sayHello)<span class="comment">//request;response</span></span><br><span class="line">   err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">   <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;http serve failed, err:%v\n&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hello.txt(html)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#x27;color:orange&#x27;</span>&gt;</span>welcome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>how are you?<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&#x27;i1&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;https://img1.baidu.com/it/u=1980119653,2367229126&amp;fm=11&amp;fmt=auto&amp;gp=0.jpg&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用特点"><a href="#使用特点" class="headerlink" title="使用特点"></a>使用特点</h2><p>1）go的web框架</p>
<p>2）性能比较好</p>
<p>3）使用简单</p>
<h2 id="gin的安装"><a href="#gin的安装" class="headerlink" title="gin的安装"></a>gin的安装</h2><p>1）确保已安装go环境（环境配置）</p>
<p>2）go get gopkg.in/gin-gonic/gin.v1</p>
<p>​      git clone <a href="https://github.com/gin-gonic/gin.git(生成gin文件夹">https://github.com/gin-gonic/gin.git(生成gin文件夹</a>)</p>
<p>3）gin拷贝到gopath下面的src/github.com/gin-ginic/gin</p>
<p>4）其他依赖-&gt;放到src/github.com下</p>
<p>​      gin-contrib;</p>
<p>​      gin-gonic;</p>
<p>​      golang;</p>
<p>​      ugorji</p>
<p><strong>初步运行代码</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	router :=gin.Default()<span class="comment">//创建一个默认的路由引擎</span></span><br><span class="line">    <span class="comment">//GET:http协议相关操作</span></span><br><span class="line">	router.GET(<span class="string">&quot;/hello&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span>&#123;<span class="comment">//内置函数</span></span><br><span class="line">		context.String(http.StatusOK,<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	router.Run(<span class="string">&quot;:2333&quot;</span>)</span><br><span class="line">    <span class="comment">// listen and serve on 0.0.0.0:2333</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有：（性质相同）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   r := gin.Default()</span><br><span class="line">   r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">      c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">         <span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">//制定永辉使用GET请求访问/ping时，执行内置函数</span></span><br><span class="line">   r.Run() <span class="comment">//启动服务</span></span><br><span class="line">    <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在安装gin框架过程中遇到的大坑："><a href="#在安装gin框架过程中遇到的大坑：" class="headerlink" title="在安装gin框架过程中遇到的大坑："></a>在安装gin框架过程中遇到的大坑：</h3><p><strong>1.文件配置问题：</strong></p>
<p>我们知道，go项目的目录格式推荐在工作区的文件夹下添加名为bin，pkg，src的三个文件夹；</p>
<p>注意：每个项目放到src子文件夹中最优。</p>
<p>由于gin是github上的开源项目，我们直接拉取可能会连接超时，所以我们需要梯子或代理，我选择使用代理。</p>
<img src="/2021/07/14/gin%E6%A1%86%E6%9E%B6/gin%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89.png" class title="gin学习（1）">
<p><strong>代理：</strong></p>
<p>查看环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure>
<p>修改环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE&#x3D;on</span><br><span class="line">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io,direct</span><br></pre></td></tr></table></figure>
<p>代理配置完成。</p>
<p>2.设置go.mod, go.sum文件</p>
<p>在<strong>项目文件夹下</strong>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod init 项目名</span><br><span class="line">go get -u github.com&#x2F;gin-gonic&#x2F;gin</span><br></pre></td></tr></table></figure>
<p>这样，就会自动添加go.sum。</p>
<p>有关gin的主体代码会放在ginproject\pkg\mod文件夹中。</p>
<img src="/2021/07/14/gin%E6%A1%86%E6%9E%B6/gin%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89.png" class title="gin学习（2）">
<p>运行程序：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> r = gin.Default()</span><br><span class="line">   r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">      c.JSON(</span><br><span class="line">         <span class="number">200</span>,</span><br><span class="line">         gin.H&#123;</span><br><span class="line">         <span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      )</span><br><span class="line">   &#125;)</span><br><span class="line">   err := r.Run()</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;http serve failed, err:%v\n&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125; <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若系统不报错，github.com/gin-gonic/gin不飘红则成功！</p>
<h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><p>REST与技术无关，代表的是一种软件架构的风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”或“表现层状态转化”。</p>
<p>　　（1）每一个URI代表一种资源；</p>
<p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p>
<p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>
<p>简单来说，REST就是客户端与web服务器之间进行交互的时候，<strong>使用HTTP协议中的4个请求方法代表不同的动作</strong>。</p>
<ul>
<li><p>GET用来获取资源；</p>
</li>
<li><p>POST用来新建资源</p>
</li>
<li>PUT用来更新资源</li>
<li>DETELE用来删除资源</li>
</ul>
<p>详见：</p>
<p><a href="https://www.runoob.com/w3cnote/restful-architecture.html">https://www.runoob.com/w3cnote/restful-architecture.html</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p>
<p>实例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(c *gin.Context)</span></span>  &#123;</span><br><span class="line">   c.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello golang!&quot;</span>,</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   r := gin.Default()</span><br><span class="line"></span><br><span class="line">   r.GET(<span class="string">&quot;/hello&quot;</span>,sayhello)</span><br><span class="line">   <span class="comment">//原版风格</span></span><br><span class="line">   <span class="comment">//r.GET(&quot;/book&quot;,...)</span></span><br><span class="line">   <span class="comment">//r.GET(&quot;/create_book&quot;,...)</span></span><br><span class="line">   <span class="comment">//r.GET(&quot;update_ book&quot;,...)</span></span><br><span class="line">   <span class="comment">//r.GET(&quot;delete_book&quot;,...)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//restful风格</span></span><br><span class="line">   r.GET(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">      c.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line">         <span class="string">&quot;method&quot;</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">   r.POST(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">      c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">         <span class="string">&quot;method&quot;</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">   r.PUT(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">      c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">         <span class="string">&quot;method&quot;</span>:<span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">   r.DELETE(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">      c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">         <span class="string">&quot;method&quot;</span>:<span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h2><p>可通过postman来解决<strong>浏览器对用户API请求的限制</strong></p>
<p><em>Postman代理是一个微型应用程序，可在您的桌面本地运行，并充当代表您进行API调用的代理。为了克服浏览器中的限制，Postman Web界面现在会将API调用路由到本地代理，并且该代理将使用您的本地配置文件，配置和网络代表您在本地发出API请求，以发出每个请求并传递响应回到网页界面。通过使用Postman代理，您可以允许API请求在浏览器中发出，但可以通过本地计算机和网络进行路由，然后再返回，从而可以最大程度地限制桌面上本地访问的同时，绕过浏览器中存在的限制。</em></p>
<p><img src="https://blog.postman.com/wp-content/uploads/2020/07/Postman-agent-architecture-diagram.png" alt="邮递员代理的体系结构图"></p>
<h2 id="http-template"><a href="#http-template" class="headerlink" title="http/template"></a>http/template</h2><p><a href="https://www.liwenzhou.com/posts/Go/go_template/#autoid-0-0-0">https://www.liwenzhou.com/posts/Go/go_template/#autoid-0-0-0</a></p>
<p>html/template包：用于生成HTML文档</p>
<p>text/template包：文本模板引擎</p>
<h3 id="模板与渲染"><a href="#模板与渲染" class="headerlink" title="模板与渲染"></a>模板与渲染</h3><p>在一些<strong>前后端不分离</strong>的Web架构中，我们通常需要在后端将一些数据渲染到HTML文档中，从而实现<strong>动态的网页</strong>（网页的布局和样式大致一样，但展示的内容并不一样）效果。</p>
<p>我们这里说的模板可以理解为事先定义好的HTML文档文件，模板渲染的作用机制可以简单理解为<strong>文本替换操作</strong>–使用相应的数据去替换HTML文档中事先准备好的标记。</p>
<h3 id="模板引擎规定"><a href="#模板引擎规定" class="headerlink" title="模板引擎规定"></a>模板引擎规定</h3><ol>
<li>模板文件通常定义为<code>.tmpl</code>和<code>.tpl</code>为后缀（也可以使用其他的后缀），必须使用<code>UTF8</code>编码。</li>
<li>模板文件中使用<code>&#123;&#123;`和`&#125;&#125;</code>包裹和标识需要传入的数据。</li>
<li>传给模板这样的数据就可以通过点号（<code>.</code>）来访问，如果数据是复杂类型的数据，可以通过{ { .FieldName }}来访问它的字段。</li>
<li>除<code>&#123;&#123;`和`&#125;&#125;</code>包裹的内容外，其他内容均不做修改原样输出。</li>
</ol>
<h3 id="模板引擎的使用"><a href="#模板引擎的使用" class="headerlink" title="模板引擎的使用"></a>模板引擎的使用</h3><p>三部分：<strong>定义模板文件、解析模板文件和模板渲染</strong></p>
<h4 id="定义模板文件"><a href="#定义模板文件" class="headerlink" title="定义模板文件"></a>定义模板文件</h4><p>见实例</p>
<h4 id="解析模板文件"><a href="#解析模板文件" class="headerlink" title="解析模板文件"></a>解析模板文件</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span> <span class="title">Parse</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="params">(*Template, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseFiles</span><span class="params">(filenames ...<span class="keyword">string</span>)</span> <span class="params">(*Template, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseGlob</span><span class="params">(pattern <span class="keyword">string</span>)</span> <span class="params">(*Template, error)</span></span></span><br></pre></td></tr></table></figure>
<p>当然，可以使用<code>func New(name string) *Template</code>函数创建一个名为<code>name</code>的模板，然后对其调用上面的方法去解析模板字符串或模板文件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义模板</span></span><br><span class="line"><span class="comment">//创建一个名为hello.temp的模板,名字一定要与模板的名字能对应上</span></span><br><span class="line">t, err := template.New(<span class="string">&quot;hello.tmpl&quot;</span>).ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)<span class="comment">//链式操作</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;parse template1 failed, err:%v\n&quot;</span>, err)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h4><p>渲染模板简单来说就是使用数据去填充模板，当然实际上可能会复杂很多。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span> <span class="title">Execute</span><span class="params">(wr io.Writer, data <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span> <span class="title">ExecuteTemplate</span><span class="params">(wr io.Writer, name <span class="keyword">string</span>, data <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>
<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;html/template&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//type User struct&#123;</span></span><br><span class="line"><span class="comment">//	Name string</span></span><br><span class="line"><span class="comment">//	gender string</span></span><br><span class="line"><span class="comment">//	Age int</span></span><br><span class="line"><span class="comment">//&#125;结构体（程序的另一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">   <span class="comment">//解析模板</span></span><br><span class="line">    <span class="comment">//这里t返回一个*template型的指针</span></span><br><span class="line">   t , err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)<span class="comment">//一定注意这里的相对路径（相对exe文件），千万不要刻舟求剑</span></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Parse template failed, err: %v&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//渲染模板</span></span><br><span class="line">   name := <span class="string">&quot;Polaris6G&quot;</span></span><br><span class="line">    <span class="comment">//u1 :=User&#123;</span></span><br><span class="line">	<span class="comment">//	Name: &quot;Polaris6G&quot;,</span></span><br><span class="line">	<span class="comment">//	gender: &quot;male&quot;,</span></span><br><span class="line">	<span class="comment">//	Age: 18,</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">   err = t.Execute(w ,name)<span class="comment">//把name写到w里或name-&gt;u1</span></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;render template failed, err: %v&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/&quot;</span>,sayHello)</span><br><span class="line">   err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;HTTP server start failed, err:%v&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hello.tmpl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;.&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--&#123;&#123;.&#125;&#125;包裹和标识需要传入的数据，传给模板这样的数据就可以通过点号`.`来访问;（结构体）则.Name;.gender(无法传入);.Age etc</span></span><br><span class="line"><span class="comment">&lt;/body&gt;</span></span><br><span class="line"><span class="comment">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong> {{ . }} 中 . 表示后端传来的对象，它的类型可以规定，可以为任意，注意灵活使用。</strong></p>
<p>进一步深入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;html/template&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">   Gender <span class="keyword">string</span></span><br><span class="line">   Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">   <span class="comment">//定义模板</span></span><br><span class="line">   <span class="comment">//解析模板</span></span><br><span class="line">   t , err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Parse template failed, err: %v&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//渲染模板</span></span><br><span class="line">   u1 :=User&#123;</span><br><span class="line">      Name: <span class="string">&quot;Polaris6G&quot;</span>,</span><br><span class="line">      Gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">      Age: <span class="number">18</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">      <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;Polaris6G&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Gender&quot;</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   hobbyList :=[]<span class="keyword">string</span>&#123;</span><br><span class="line">      <span class="string">&quot;唱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;跳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;rap&quot;</span>,</span><br><span class="line">      <span class="string">&quot;篮球&quot;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   err = t.Execute(w ,<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">      <span class="string">&quot;u1&quot;</span>: u1,</span><br><span class="line">      <span class="string">&quot;m1&quot;</span>: m1,</span><br><span class="line">      <span class="string">&quot;hobby&quot;</span>: hobbyList,</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;render template failed, err: %v&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/&quot;</span>,sayHello)</span><br><span class="line">   err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;HTTP server start failed, err:%v&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hello.tmpl:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123; .u1.Name -&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;.u1.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123;.u1.Gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;.m1.Name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;.m1.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123;.m1.Gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--定义变量--&gt;</span></span><br><span class="line">&#123;&#123; $v1 := 100&#125;&#125;</span><br><span class="line">&#123;&#123; $age := .m1.Age&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--if--&gt;</span></span><br><span class="line">&#123;&#123;if $v1&#125;&#125;</span><br><span class="line">&#123;&#123; $v1 &#125;&#125;</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">啥也没有</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--lt--&gt;</span></span><br><span class="line">&#123;&#123;if lt .m1.Age 22&#125;&#125;</span><br><span class="line">好好上学</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">好好工作</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--range--&gt;</span></span><br><span class="line">&#123;&#123;range $idx, $hobby := .hobby&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;$idx&#125;&#125;-&#123;&#123;$hobby&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">    没啥爱好</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--with--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>m1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;with .m1&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--index--&gt;</span></span><br><span class="line">&#123;&#123;index .hobby 2&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>我们还可以在模板中声明变量，用来保存传入模板的数据或其他语句生成的结果。具体语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$obj :&#x3D; &#123;&#123;.&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>$obj</code>是变量的名字，在后续的代码中就可以使用该变量了。</p>
<h4 id="移除空格"><a href="#移除空格" class="headerlink" title="移除空格"></a>移除空格</h4><p>有时候我们在使用模板语法的时候会不可避免的引入一下空格或者换行符，这样模板最终渲染出来的内容可能就和我们想的不一样，这个时候可以使用<code>&#123;&#123;-`语法去除模板内容左侧的所有空白符号， 使用`-&#125;&#125;</code>去除模板内容右侧的所有空白符号。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;- .Name -&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><code>-</code>要紧挨<code>&#123;&#123;`和`&#125;&#125;</code>，同时与模板值之间需要使用空格分隔。</p>
<h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p>Go模板语法中的条件判断有以下几种:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else if pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>Go的模板语法中使用<code>range</code>关键字进行遍历，有以下两种写法，其中<code>pipeline</code>的值必须是数组、切片、字典或者通道。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;range pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline的值其长度为0，不会有任何输出</span><br><span class="line"></span><br><span class="line">&#123;&#123;range pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline的值其长度为0，则会执行T0。</span><br></pre></td></tr></table></figure>
<h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline为empty不产生输出，否则将dot设为pipeline的值并执行T1。不修改外面的dot。</span><br><span class="line"></span><br><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline为empty，不改变dot并执行T0，否则dot设为pipeline的值并执行T1。</span><br></pre></td></tr></table></figure>
<h4 id="预定义函数"><a href="#预定义函数" class="headerlink" title="预定义函数"></a>预定义函数</h4><p>执行模板时，函数从两个函数字典中查找：首先是模板函数字典，然后是全局函数字典。一般不在模板内定义函数，而是使用Funcs方法添加函数到模板里。</p>
<p>预定义的全局函数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and</span><br><span class="line">    函数返回它的第一个empty参数或者最后一个参数；</span><br><span class="line">    就是说&quot;and x y&quot;等价于&quot;if x then y else x&quot;；所有参数都会执行；</span><br><span class="line">or</span><br><span class="line">    返回第一个非empty参数或者最后一个参数；</span><br><span class="line">    亦即&quot;or x y&quot;等价于&quot;if x then x else y&quot;；所有参数都会执行；</span><br><span class="line">not</span><br><span class="line">    返回它的单个参数的布尔值的否定</span><br><span class="line">len</span><br><span class="line">    返回它的参数的整数类型长度</span><br><span class="line">index</span><br><span class="line">    执行结果为第一个参数以剩下的参数为索引&#x2F;键指向的值；</span><br><span class="line">    如&quot;index x 1 2 3&quot;返回x[1][2][3]的值；每个被索引的主体必须是数组、切片或者字典。</span><br><span class="line">print</span><br><span class="line">    即fmt.Sprint</span><br><span class="line">printf</span><br><span class="line">    即fmt.Sprintf</span><br><span class="line">println</span><br><span class="line">    即fmt.Sprintln</span><br><span class="line">html</span><br><span class="line">    返回与其参数的文本表示形式等效的转义HTML。</span><br><span class="line">    这个函数在html&#x2F;template中不可用。</span><br><span class="line">urlquery</span><br><span class="line">    以适合嵌入到网址查询中的形式返回其参数的文本表示的转义值。</span><br><span class="line">    这个函数在html&#x2F;template中不可用。</span><br><span class="line">js</span><br><span class="line">    返回与其参数的文本表示形式等效的转义JavaScript。</span><br><span class="line">call</span><br><span class="line">    执行结果是调用第一个参数的返回值，该参数必须是函数类型，其余参数作为调用该函数的参数；</span><br><span class="line">    如&quot;call .X.Y 1 2&quot;等价于go语言里的dot.X.Y(1, 2)；</span><br><span class="line">    其中Y是函数类型的字段或者字典的值，或者其他类似情况；</span><br><span class="line">    call的第一个参数的执行结果必须是函数类型的值（和预定义函数如print明显不同）；</span><br><span class="line">    该函数类型值必须有1到2个返回值，如果有2个则后一个必须是error接口类型；</span><br><span class="line">    如果有2个返回值的方法返回的error非nil，模板执行会中断并返回给调用模板执行者该错误；</span><br></pre></td></tr></table></figure>
<h4 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h4><p>布尔函数会将任何类型的零值视为假，其余视为真。</p>
<p>下面是定义为函数的二元比较运算的集合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eq      如果arg1 &#x3D;&#x3D; arg2则返回真</span><br><span class="line">ne      如果arg1 !&#x3D; arg2则返回真</span><br><span class="line">lt      如果arg1 &lt; arg2则返回真</span><br><span class="line">le      如果arg1 &lt;&#x3D; arg2则返回真</span><br><span class="line">gt      如果arg1 &gt; arg2则返回真</span><br><span class="line">ge      如果arg1 &gt;&#x3D; arg2则返回真</span><br></pre></td></tr></table></figure>
<p>为了简化多参数相等检测，eq（只有eq）可以接受2个或更多个参数，它会将第一个参数和其余参数依次比较，返回下式的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;eq arg1 arg2 arg3&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>比较函数只适用于基本类型（或重定义的基本类型，如”type Celsius float32”）。但是，整数和浮点数不能互相比较。</p>
<h4 id="进一步实例："><a href="#进一步实例：" class="headerlink" title="进一步实例："></a>进一步实例：</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;html/template&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">   Gender <span class="keyword">string</span></span><br><span class="line">   Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">   <span class="comment">//定义模板</span></span><br><span class="line">   <span class="comment">//解析模板</span></span><br><span class="line">   t , err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Parse template failed, err: %v&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//渲染模板</span></span><br><span class="line">   u1 :=User&#123;</span><br><span class="line">      Name: <span class="string">&quot;Polaris6G&quot;</span>,</span><br><span class="line">      Gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">      Age: <span class="number">18</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">      <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;Polaris6G&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Gender&quot;</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   hobbyList :=[]<span class="keyword">string</span>&#123;</span><br><span class="line">      <span class="string">&quot;唱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;跳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;rap&quot;</span>,</span><br><span class="line">      <span class="string">&quot;篮球&quot;</span>,</span><br><span class="line">   &#125;<span class="comment">//切片</span></span><br><span class="line">   err = t.Execute(w ,<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">      <span class="string">&quot;u1&quot;</span>: u1,</span><br><span class="line">      <span class="string">&quot;m1&quot;</span>: m1,</span><br><span class="line">      <span class="string">&quot;hobby&quot;</span>: hobbyList,</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;render template failed, err: %v&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/&quot;</span>,sayHello)</span><br><span class="line">   err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;HTTP server start failed, err:%v&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hello.tmpl:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123; .u1.Name -&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;.u1.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123;.u1.Gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;.m1.Name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;.m1.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123;.m1.Gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--定义变量--&gt;</span></span><br><span class="line">&#123;&#123; $v1 := 100&#125;&#125;</span><br><span class="line">&#123;&#123; $age := .m1.Age&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--if--&gt;</span></span><br><span class="line">&#123;&#123;if $v1&#125;&#125;</span><br><span class="line">&#123;&#123; $v1 &#125;&#125;</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">啥也没有</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--lt--&gt;</span></span><br><span class="line">&#123;&#123;if lt .m1.Age 22&#125;&#125;</span><br><span class="line">好好上学</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">好好工作</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--range--&gt;</span></span><br><span class="line">&#123;&#123;range $idx, $hobby := .hobby&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;$idx&#125;&#125;-&#123;&#123;$hobby&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">    没啥爱好</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--with--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>m1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;with .m1&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--index--&gt;</span></span><br><span class="line">&#123;&#123;index .hobby 2&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果展示：</p>
<img src="/2021/07/14/gin%E6%A1%86%E6%9E%B6/gin%E5%AD%A6%E4%B9%A0%EF%BC%883%EF%BC%89.png" class title="gin学习（3）">
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">   <span class="comment">//定义函数kua</span></span><br><span class="line">   <span class="comment">//要么有一个返回值，要么有两个，第二个返回值必须是error</span></span><br><span class="line">   k := <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span> , error)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name + <span class="string">&quot;年轻又帅气&quot;</span>, <span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//定义模板</span></span><br><span class="line">   t := template.New(<span class="string">&quot;hello.tmpl&quot;</span>)</span><br><span class="line">   <span class="comment">//告诉模板，我现在多定义了一个函数kua</span></span><br><span class="line">   t.Funcs(template.FuncMap&#123;</span><br><span class="line">      <span class="string">&quot;kua&quot;</span>: k,</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//解析模板</span></span><br><span class="line">   _, err := t.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;parse template failed,err:%v\n&quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//渲染模板</span></span><br><span class="line">   name := <span class="string">&quot;Polaris6G&quot;</span></span><br><span class="line">   t.Execute(w,name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/&quot;</span>,f1)</span><br><span class="line">   err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">   <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;server started failed&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hello.tmpl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义模板函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;kua .&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>Polaris6G年轻又帅气</p>
<h4 id="嵌套模板"><a href="#嵌套模板" class="headerlink" title="嵌套模板"></a>嵌套模板</h4><p>main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">   tmpl, err := template.ParseFiles(<span class="string">&quot;./t.tmpl&quot;</span>, <span class="string">&quot;./ul.tmpl&quot;</span>)<span class="comment">//一定是先包含，后被包含</span></span><br><span class="line">    <span class="comment">//在解析模板时，被嵌套的模板一定要在后面解析，例如上面的示例中t.tmpl模板中嵌套了ul.tmpl，所以ul.tmpl要在t.tmpl后进行解析</span></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;create template failed, err:%v&quot;</span>, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   name := <span class="string">&quot;Polaris6G&quot;</span></span><br><span class="line">   tmpl.Execute(w,name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   http.HandleFunc(<span class="string">&quot;/tmpl&quot;</span>,demo1)</span><br><span class="line">   err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">   <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;server started failed&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>t.tmpl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试嵌套template语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123;/*我们可以在template中嵌套其他的template。这个template可以是单独的文件，也可以是通过define定义的template*/&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;&#123;template &quot;ul.tmpl&quot;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;&#123;template &quot;ol.tmpl&quot;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内定义ol.tmpl--&gt;</span></span><br><span class="line">&#123;&#123;/*通过define定义一个模板*/&#125;&#125;</span><br><span class="line">&#123;&#123; define &quot;ol.tmpl&quot;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>打豆豆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>ul.tmpl</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123;/*单独的文件*/&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>注释<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>日志<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<img src="/2021/07/14/gin%E6%A1%86%E6%9E%B6/gin%EF%BC%884%EF%BC%89.png" class title="gin（4）">
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>gin</tag>
      </tags>
  </entry>
  <entry>
    <title>go_web(1)</title>
    <url>/2021/07/17/go-web-1/</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>介绍使用Go开发web应用的方法，并阐明Go的相对优势；</p>
<p>对HTTP协议等构成Web应用的关键概念做深入浅出的介绍。</p>
<span id="more"></span>
<h1 id="1-1-Go编写Web应用的优势"><a href="#1-1-Go编写Web应用的优势" class="headerlink" title="1.1 Go编写Web应用的优势"></a>1.1 Go编写Web应用的优势</h1><ul>
<li><strong>可扩展</strong>：管理者可以通过添加更多的硬件来获得更强的请求处理能力，go中表现为<strong>高并发（垂直扩展）、架设代理部署web应用（水平扩展）</strong>。</li>
<li><strong>模块化</strong>：大规模web应用应由可替换的组件构成，这使得开发者能更系统的分工、开发并减少人力、脑力支出。go中表现为<strong>通过它的接口机制对行为进行描述，一次来实现动态类型匹配</strong>。</li>
<li><strong>可维护</strong>：拥有一个易于维护的代码库(code-base)。go中表现为其拥有简介且极具可读性的语法以及灵活且清晰的<strong>包管理系统、文档工具go-doc、测试工具go-test</strong>等。</li>
<li><strong>高性能</strong>：不仅意味着短时间可以处理带量请求，还意味着服务器能快速地对客户端进行响应，并让终端用户(end user)能快速地执行操作。go中表现为<strong>go-routine并发</strong>。</li>
</ul>
<h1 id="1-2-Web应用的工作原理"><a href="#1-2-Web应用的工作原理" class="headerlink" title="1.2 Web应用的工作原理"></a>1.2 Web应用的工作原理</h1><p><strong>Web应用的定义</strong>（狭义上）：会对客户端发送的HTTP请求做出想用，并通过HTTP响应将HTML回传到客户端。</p>
<p>换句话说，一个程序只需满足一下两个条件，我们就可以把它看做是一个web应用：</p>
<ul>
<li>这个程序必须向发送命令请求的客户端返回HTML，而客户端则会向用户展示渲染后的HTML；</li>
<li>这个程序在向客户端传送数据是必须使用HTTP协议。</li>
</ul>
<p>所以，如果一个程序不是向客户端渲染并展示HTML，而是向其他程序返回某种非HTML格式的数据，那么这个程序就是一个为其他程序提供服务的<strong>Web服务</strong>。</p>
<h1 id="1-3-HTTP简介"><a href="#1-3-HTTP简介" class="headerlink" title="1.3 HTTP简介"></a>1.3 HTTP简介</h1><p>HTTP：万维网的应用层通信协议，Web页面中的所有数据都是通过这个看似简单的文本协议进行传输的。</p>
<p>HTTP版本有很多，最初版本为HTTP 0.9, HTTP 1.0由大量特性合并而成，HTTP 1.1是目前使用最广泛的版本。这里主要对HTTP 1.1进行讨论，但也适当介绍HTTP 2.0的相关信息。</p>
<p><strong>HTTP定义</strong>：是一种<strong>无状态</strong>、<strong>由文本构成</strong>的<strong>请求-响应（request-response</strong>）协议，这种协议使用的是<strong>客户端-服务器（client-server）</strong>计算模型。</p>
<p><img src="/2021/07/17/go-web-1/01.png" alt="01"></p>
<p>客户端向服务器发起<strong>对话</strong>，服务器为客户端提供<strong>服务</strong>。</p>
<p>在HTTP协议中，客户端也被称为<strong>用户代理（user-agent)</strong>，而服务器通常被称为<strong>Web服务器</strong>。</p>
<p>大多数情况下，HTTP客户端都是一个<strong>Web浏览器</strong>。</p>
<p>HTTP是一种<strong>无状态协议</strong>，它唯一知道的就是客户端会向服务器发送请求，而服务器则会向客户端返回响应，并且后续发生的请求对之前发生过的请求一无所知，即不会在服务器和客户端见创建一个持续存在的通信通道。但如今HTTP 1.1也可以通过持久化连接来提升性能。</p>
<p>HTTP以<strong>纯文本方式</strong>而不是二进制方式发送和接收协议数据。这样做是为了让开发者可以在无需使用专门的协议分析工具的情况下，你搞清楚通信中正在发生的事情，从而更容易进行故障排查。</p>
<h1 id="1-4-HTTP请求"><a href="#1-4-HTTP请求" class="headerlink" title="1.4 HTTP请求"></a>1.4 HTTP请求</h1><p>HTTP请求跟其他所有HTTP报文（message）一样，都由一系列文本行组成，这些文本行会按照以下顺序进行排列：</p>
<ol>
<li>请求行（request-line）</li>
<li>零个或任意多个请求首部（header）</li>
<li>一个空行</li>
<li>可选的报文主体（body）</li>
</ol>
<p>一个典型的HTTP请求看上去是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;Protocols&#x2F;rfc2616&#x2F;rfc2616.html HTTP&#x2F;1.1  #请求行</span><br><span class="line">Host: www.w3.org</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0   #首部</span><br><span class="line">(empty line)   #空行+主体</span><br></pre></td></tr></table></figure>
<p>请求行中的第一个单词为<strong>请求方法</strong>（request method），之后跟着的是<strong>统一资源标识符</strong>（Uniform Resource Identifier，<strong>URI</strong>）以及所用的HTTP版本。</p>
<p>位于请求行之后的两个文本行为请求的<strong>首部</strong>（header）。</p>
<p>这个报文的最后一行为<strong>空</strong>行，技术报文主体内容为空，这个空行也必须存在，至于报文是否包含主体则需要根据请求使用的方法而定。</p>
<h2 id="1-4-1-请求方法"><a href="#1-4-1-请求方法" class="headerlink" title="1.4.1 请求方法"></a>1.4.1 请求方法</h2><p>请求方法指明了客户端想要对资源执行的操作。</p>
<p>各个HTTP方法的作用说明如下：</p>
<ul>
<li>GET——命令服务器<strong>返回</strong>指定的资源</li>
<li>HEAD——与GET方法作用类似，唯一不同在于它不<strong>要求服务器返回报文的主体</strong>。通常用于在不获取报文主体的情况下，<strong>取得响应的首部</strong>。</li>
<li>POST——命令服务器将报文主体中的数据<strong>传递给</strong>URI指定的资源，至于服务器具体会对这些数据执行什么动作则取决于服务器本身。</li>
<li>PUT——命令服务器将报文主体中的数据<strong>设置为</strong>URI指定的资源。如果URI指定的位置上已有数据存在，那么使用报文主体中的数据去代替已有的数据。如果资源尚未存在，那么在URI指定的位置上新创建一个资源。</li>
<li>DELETE——命令服务器<strong>删除</strong>URI指定的资源。</li>
<li>TRACE——命令服务器返回请求本身。通过这个方法，客户端可以知道介于它和服务器之间的其他服务器是如何处理请求的。</li>
<li>OPTIONS——命令服务器发返回它支持的<strong>HTTP方法列表</strong>。</li>
<li>CONNECT——命令服务器和客户端之间<strong>建立一个网络连接</strong>。这个方法通常用于设置SSL隧道以开启HTTPS功能。</li>
<li>PATCH——命令服务器使用报文主体中的数据对URI指定的资源进行<strong>修改</strong>。</li>
</ul>
<h2 id="1-4-2-安全的请求方法"><a href="#1-4-2-安全的请求方法" class="headerlink" title="1.4.2 安全的请求方法"></a>1.4.2 安全的请求方法</h2><p>如果一个HTTP方法只要求服务器提供信息而不会对服务器的状态做任何修改，呢么这个方法就是<strong>安全</strong>的（safe）。</p>
<p>安全的方法：GET、HEAD、OPTIONS、TRACE；</p>
<p>不安全的方法：POST、PUT、DELETE 。</p>
<h2 id="1-4-3-幂等的请求方法"><a href="#1-4-3-幂等的请求方法" class="headerlink" title="1.4.3 幂等的请求方法"></a>1.4.3 幂等的请求方法</h2><p>如果一个HTTP方法在使用相同的数据进行第二次调用的时候，不会对服务器的状态造成任何改变，那么这个方法就是<strong>幂等</strong>的（idempotent）。</p>
<p>安全的方法天生就是幂等的。</p>
<p><strong>PUT、DELETE</strong>虽然不安全，但却是幂等的。</p>
<p><strong>POST</strong>既不安全也不幂等（因为重复的POST请求是否会改变服务器状态是由服务器本身决定的）。</p>
<h2 id="1-4-4-浏览器对请求方法的支持"><a href="#1-4-4-浏览器对请求方法的支持" class="headerlink" title="1.4.4 浏览器对请求方法的支持"></a>1.4.4 浏览器对请求方法的支持</h2><p>HTML不支持除GET和POST之外的其他HTTP方法。</p>
<h2 id="1-4-5请求首部"><a href="#1-4-5请求首部" class="headerlink" title="1.4.5请求首部"></a>1.4.5请求首部</h2><p>HTTP请求方法定义了发送请求的客户端想要执行的操作，而HTTP请求的首部则<strong>记录了与请求本身以及客户端有关的信息</strong>。</p>
<p>组成：由任意多个用冒号分隔的纯文本键值对组成，最后以回车（CR）和换行（LF）结尾。</p>
<p>宿主（<strong>Host</strong>）首部字段是HTTP 1.1 <strong>唯一强制要求的首部</strong>。</p>
<p>如果请求的报文中包含有可选的主体，那么请求的首部还需要带有内容长度（<strong>Content-Length</strong>）字段或者传输编码（<strong>Transfer-Encoding</strong>)字段。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">首部字段</th>
<th style="text-align:center">作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept</td>
<td style="text-align:center">客户端在HTTP响应中能够接收的内容类型(Accept: text/html)(接收文本文件)</td>
</tr>
<tr>
<td style="text-align:center">Accept-Charset</td>
<td style="text-align:center">客户端要求服务器使用的字符集编码（Accept-Charset: utf-8)</td>
</tr>
<tr>
<td style="text-align:center">Authorization</td>
<td style="text-align:center">向服务器发送基本的身份验证证书</td>
</tr>
<tr>
<td style="text-align:center"><strong>Cookie</strong></td>
<td style="text-align:center">客户端将这个首部中服务器之前设置的所有cookie回传给服务器</td>
</tr>
<tr>
<td style="text-align:center">Content-Length</td>
<td style="text-align:center">请求主体的字节长度</td>
</tr>
<tr>
<td style="text-align:center">Content-Type</td>
<td style="text-align:center">当请求包含主体的时候，这个首部用于记录主体内容的类型</td>
</tr>
<tr>
<td style="text-align:center">Host</td>
<td style="text-align:center">服务器的名字以及端口号，如果这个首部没有记录服务器的端口号，就表示服务器使用的是80端口</td>
</tr>
<tr>
<td style="text-align:center">Referrer</td>
<td style="text-align:center">发起请求的页面所在的地址</td>
</tr>
<tr>
<td style="text-align:center">Server</td>
<td style="text-align:center">说明服务器名称</td>
</tr>
<tr>
<td style="text-align:center"><strong>User-Agent</strong></td>
<td style="text-align:center">对发起请求的客户端进行描述</td>
</tr>
</tbody>
</table>
</div>
<h1 id="1-5-HTTP响应"><a href="#1-5-HTTP响应" class="headerlink" title="1.5 HTTP响应"></a>1.5 HTTP响应</h1><p>HTTP响应是对HTTP请求报文的回复。</p>
<p>HTTP响应构成：</p>
<ul>
<li>一个状态行</li>
<li>零个或任意几行的响应首部</li>
<li>一个空行</li>
<li>一个可选的报文主体</li>
</ul>
<p>栗子：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sat, 17 Jul 2021 10:47:13 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;34aa387-d-1568eb00&quot;</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>51</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=iso-8859-1</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;polaris6g homepage&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--body goes here--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>HTTP响应的第一行为HTTP版本、<strong>状态行</strong>（status code）和相应的<strong>原因短语</strong>（reason phrase），原因短语对状态码进行了简单的描述。</p>
<p>这个栗子还包含了一个HTML格式的报文主体。</p>
<h2 id="1-5-1-响应状态码"><a href="#1-5-1-响应状态码" class="headerlink" title="1.5.1 响应状态码"></a>1.5.1 响应状态码</h2><p>HTTP响应中的状态码表明了响应的类型。</p>
<p>HTTP响应状态码共有5种，以不同的数字作为前缀。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">状态码类型</th>
<th style="text-align:center">作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1XX</td>
<td style="text-align:center">情报状态码</td>
</tr>
<tr>
<td style="text-align:center">2xx</td>
<td style="text-align:center">成功状态码</td>
</tr>
<tr>
<td style="text-align:center">3xx</td>
<td style="text-align:center">重定向状态码</td>
</tr>
<tr>
<td style="text-align:center">4xx</td>
<td style="text-align:center">客户端错误状态码</td>
</tr>
<tr>
<td style="text-align:center">5xx</td>
<td style="text-align:center">服务器错误状态码</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>1XX：服务器通过这些状态码来告知客户端，自己已经接受到了客户端的请求，并已经对请求进行了处理</li>
<li>2XX：已接受请求+成功处理；标准响应: “200 OK”</li>
<li>3XX：已接受请求+成功处理；但为了完成请求指定的动作，客户端还需要再做一些其他工作。大多用于实现URL重定向</li>
<li>4XX：客户端发送的请求出现问题。最常见：”404 Not Found”(服务器无法从请求指定的URL中找到客户端想要的资源)</li>
<li>5XX：服务器因为某些原因而无法正确处理请求。最常见：”500 Internet Server Error”</li>
</ul>
<h2 id="1-5-2-响应首部"><a href="#1-5-2-响应首部" class="headerlink" title="1.5.2 响应首部"></a>1.5.2 响应首部</h2><div class="table-container">
<table>
<thead>
<tr>
<th>首部字段</th>
<th>作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Allow</td>
<td>告知客户端，服务器支持哪些请求方法</td>
</tr>
<tr>
<td>Content-Length</td>
<td>响应主体的字节长度</td>
</tr>
<tr>
<td>Content-Type</td>
<td>如果响应包含可选的主体，首部记录主题内容类型</td>
</tr>
<tr>
<td>Data</td>
<td>以格林尼治标准时间（GMT）可是记录当前时间</td>
</tr>
<tr>
<td>Location</td>
<td>仅在重定向时使用，会告知客户端接下来应该向哪个URL发送请求</td>
</tr>
<tr>
<td>Server</td>
<td>返回响应服务器的域名</td>
</tr>
<tr>
<td>Set-Cookie</td>
<td>在客户端里设置一个cookie。一个响应里可以包含多个首部</td>
</tr>
<tr>
<td>WWW-Authenticate</td>
<td>服务器通过这个首部告知客户端，在Authorization请求首部中应该提供哪种类型的身份验证信息</td>
</tr>
</tbody>
</table>
</div>
<h1 id="1-6-URI"><a href="#1-6-URI" class="headerlink" title="1.6 URI"></a>1.6 URI</h1><p><strong>统一资源标识符（Uniform Resource Identifier, URI)</strong></p>
<p><strong>它包含了统一资源名称（URN）和统一资源定位符（URL）</strong>，且这两者有相似的语法和格式。</p>
<p>URI的一般格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;方案名称&gt;:&lt;分层部分&gt;[ ? &lt;查询参数&gt; ] [ # &lt;片段&gt; ]</span><br></pre></td></tr></table></figure>
<ul>
<li>方案名称：记录了URI正在使用的方案，它定义了URI其余部分的结构。多数情况会使用HTTP方案。</li>
<li>分层部分：包含了资源的识别信息，这些信息回忆分层的方式进行组织。若以（//）开头，那么说明它包含了可选的用户信息，这些信息将以@符号结尾，后跟分层路径。不带用户信息的分层部分就是一个单纯的路径，每个路径由一连串的分段（segment）组成，各个分段之间使用单斜线（/)分隔。</li>
</ul>
<p><strong>方案名称和分层部分是URI中必需的。</strong></p>
<ul>
<li>查询参数（query）：查询参数是可选的，这些参数用于包含无法使用分层方式表示其他信息。多个查询参数会被阻滞成一连串的键值对，各个键值对之间使用&amp;符号分隔。</li>
<li>片段（fragment）：可以对URI定义的资源中的次级资源（secondary resource）进行表示。</li>
</ul>
<p>因为每个URL都是一个单独的字符串，所以URL里面不能够包含空格。</p>
<p><strong>URL编码</strong>：URL编码会把保留字符转换成改字符在ASCⅡ编码中对应的字节值，接着把这个字节值表示为一个两位长的 十六进制数字，最后再这个十六进制数字的前面加上一个百分号（%）。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">特殊字符</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">十六进制值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1.</td>
<td style="text-align:center">+</td>
<td style="text-align:center">URL 中+号表示空格</td>
<td style="text-align:center">%2B</td>
</tr>
<tr>
<td style="text-align:center">2.</td>
<td style="text-align:center">空格</td>
<td style="text-align:center">URL中的空格可以用+号或者编码</td>
<td style="text-align:center">%20</td>
</tr>
<tr>
<td style="text-align:center">3.</td>
<td style="text-align:center">/</td>
<td style="text-align:center">分隔目录和子目录</td>
<td style="text-align:center">%2F</td>
</tr>
<tr>
<td style="text-align:center">4.</td>
<td style="text-align:center">?</td>
<td style="text-align:center">分隔实际的 URL 和参数</td>
<td style="text-align:center">%3F</td>
</tr>
<tr>
<td style="text-align:center">5.</td>
<td style="text-align:center">%</td>
<td style="text-align:center">指定特殊字符</td>
<td style="text-align:center">%25</td>
</tr>
<tr>
<td style="text-align:center">6.</td>
<td style="text-align:center">#</td>
<td style="text-align:center">表示书签</td>
<td style="text-align:center">%23</td>
</tr>
<tr>
<td style="text-align:center">7.</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">URL 中指定的参数间的分隔符</td>
<td style="text-align:center">%26</td>
</tr>
<tr>
<td style="text-align:center">8.</td>
<td style="text-align:center">=</td>
<td style="text-align:center">URL 中指定参数的值</td>
<td style="text-align:center">%3D</td>
</tr>
</tbody>
</table>
</div>
<h1 id="1-7-HTTP-2-简介"><a href="#1-7-HTTP-2-简介" class="headerlink" title="1.7 HTTP/2 简介"></a>1.7 HTTP/2 简介</h1><ul>
<li>HTTP/2是一种二进制协议，与纯文本方式表示的HTTP 1.x不同，这使得HTTP/2的语法分析更高效，协议更为紧凑和健壮。</li>
<li>HTTP/2是完全多路复用（fully multiplexed）的，这意味着多个请求和响应可以在同一时间内使用同一个连接。</li>
<li>HTTP/2对首部进行压缩以减少需要传送的数据量。</li>
</ul>
<h1 id="1-8-Web应用的各个组成部分"><a href="#1-8-Web应用的各个组成部分" class="headerlink" title="1.8 Web应用的各个组成部分"></a>1.8 Web应用的各个组成部分</h1><p>Web应用就是执行以下任务的程序：</p>
<ol>
<li><strong>通过HTTP协议，以HTTP请求报文的形式获取客户端输入；</strong></li>
<li><strong>对HTTP请求报文进行处理，并执行必要的操作；</strong></li>
<li><strong>生成HTML，并以HTTP响应报文的形式将其返回给客户端。</strong></li>
</ol>
<p>为了完成这些任务，Web应用被分成了<strong>处理器（handler）</strong>和<strong>模板引擎（template engine）</strong>这两个部分。</p>
<h2 id="1-8-1-处理器"><a href="#1-8-1-处理器" class="headerlink" title="1.8.1 处理器"></a>1.8.1 处理器</h2><p>处理器工作：</p>
<ol>
<li><strong>接受和处理客户端发来的请求；</strong></li>
<li><strong>调用模板引擎；</strong></li>
<li><strong>将返回数据填充至回传给客户端的响应报文中；</strong></li>
</ol>
<h2 id="1-8-2-模板引擎"><a href="#1-8-2-模板引擎" class="headerlink" title="1.8.2 模板引擎"></a>1.8.2 模板引擎</h2><p>模板引擎通过模板和数据来生成最终的HTML，这些HTML之后会作为HTTP响应的其中一部分被回传至客户端。</p>
<p>模板可分为静态模板和动态模板：</p>
<ul>
<li>静态模板：夹杂着一些占位符的HTML，静态模板引擎通过将占位符替换成响应的数据来生成最终的HTML。</li>
<li>动态模板：除了包含HTML、占位符之外，还包含一些编程语言结构，如条件语句、迭代语句和变量。</li>
</ul>
<h1 id="1-9-Hello-Go"><a href="#1-9-Hello-Go" class="headerlink" title="1.9 Hello Go"></a>1.9 Hello Go</h1><p>实例使用Go语言构建Web应用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;<span class="comment">//responsewriter接口，指向request结构的指针</span></span><br><span class="line">	fmt.Fprintf(w,<span class="string">&quot;Hello World, %s!&quot;</span>,r.URL.Path[<span class="number">1</span>:])<span class="comment">//三个参数，最后一个提取request结构里的路径信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/ping&quot;</span>,handler)<span class="comment">//把handler函数设置成URL（/ping）被访问时的处理器</span></span><br><span class="line">	http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>,<span class="literal">nil</span>)<span class="comment">//启动服务器监听系统的8080端口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/17/go-web-1/02.png"></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go_web</tag>
      </tags>
  </entry>
  <entry>
    <title>go-web-2</title>
    <url>/2021/08/31/go-web-2/</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>此文会一步步去构建一个简单的网上论坛，以此来在实践中展示如何使用Go构建一个典型的Web应用。它允许用户登录到论坛里面，然后在论坛上上发布新帖子，又或者回复其他用户的帖子。</p>
<span id="more"></span>
<h1 id="2-1-ChitChat-功能介绍"><a href="#2-1-ChitChat-功能介绍" class="headerlink" title="2.1 ChitChat 功能介绍"></a>2.1 ChitChat 功能介绍</h1><p>为了让这个例子保持简单，我们只实现网上论坛的关键特性：在这个论坛里，用户可以注册账号，并在登录之后发表新帖子又或者回复已有帖子；为注册用户可以查看帖子，但无法发表帖子或是回复帖子。</p>
<h1 id="2-2-应用设计"><a href="#2-2-应用设计" class="headerlink" title="2.2 应用设计"></a>2.2 应用设计</h1><p>ChitChat的应用逻辑会被编码到服务器里，服务器会向客户端提供HTML页面。</p>
<p>请求（客户端-&gt;服务器）：<strong>http://&lt;服务器名&gt;&lt;处理器名&gt;?&lt;参数&gt;</strong></p>
<p>参数：会以URL查询的形式传递给处理器，而处理器则会根据这些参数对请求处理。、</p>
<p>栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;chitchat&#x2F;thread&#x2F;read?id&#x3D;123</span><br><span class="line">&#x2F;&#x2F;123为这个帖子的唯一id</span><br></pre></td></tr></table></figure>
<p><strong>工作过程</strong>：</p>
<p><img src="/2021/08/31/go-web-2/01.png" alt="01" style="zoom: 80%;"></p>
<p><strong>多路复用器</strong>（multiplexer）：会对请求进行检查，并将请求<strong>重定向</strong>至正确的处理器进行处理。</p>
<h1 id="2-3-数据模型"><a href="#2-3-数据模型" class="headerlink" title="2.3 数据模型"></a>2.3 数据模型</h1><p>将ChitChat的数据储存到<strong>关系型数据库PostgreSQL</strong>里，并通过SQL与之交互。</p>
<p><strong>数据模型</strong>：</p>
<ul>
<li>User：表示论坛的用户信息</li>
<li>Session：表示论坛用户当前的登录会话</li>
<li>Thread：表示论坛里面的帖子，每个帖子都记录了多个论坛用户之间的对话</li>
<li>Post：表示用户在帖子里面添加的回复</li>
</ul>
<p>以上4种数据结构都会被映射到关系型数据库中。</p>
<p><strong>交互过程</strong>：</p>
<p><img src="/2021/08/31/go-web-2/02.png" alt="02" style="zoom:80%;"></p>
<h1 id="2-4-请求的接受与处理"><a href="#2-4-请求的接受与处理" class="headerlink" title="2.4 请求的接受与处理"></a>2.4 请求的接受与处理</h1><p>我们以main.go开始：</p>
<h2 id="多路复用器"><a href="#多路复用器" class="headerlink" title="多路复用器"></a>多路复用器</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   mux := http.NewServeMux()<span class="comment">//创建一个多路复用器mux</span></span><br><span class="line">   files := http.FileServer(http.Dir(<span class="string">&quot;/public&quot;</span>))<span class="comment">//创建能为指定目录中的静态文件服务的处理器files</span></span><br><span class="line">   mux.Handle(<span class="string">&quot;/static/&quot;</span>, http.StripPrefix((<span class="string">&quot;/static&quot;</span>),files))</span><br><span class="line">   <span class="comment">//将files处理器传递给多路复用器的Handle函数，使用StripPrefix函数去移除请求URL中的指定前缀</span></span><br><span class="line">   mux.HandleFunc(<span class="string">&quot;/&quot;</span>,index)<span class="comment">//（URL,处理器名称）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建：<code>NewServeMux</code>(由net/http标准库提供)</p>
<p>实现功能：</p>
<ul>
<li><p>负责将请求<strong>重定向</strong>到处理器：</p>
<p>函数<code>HandleFunc</code> 将发送至URL的请求重定向到处理器（URL,处理器名称）。</p>
<p><code>mux.HandleFunc(&quot;/&quot;,index)</code> ：当对针对根URL的请求到达时，该请求就会被重定向到名为index的<strong>处理器函数</strong>。</p>
</li>
<li><p>还需要为静态文件提供服务:</p>
<p>函数<code>FileServer</code>创建一个能为指定目录中的静态文件服务的处理器。</p>
<p>函数<code>StripPrefix</code>可以移除请求URL中的指定前缀。</p>
<p><code>files := http.FileServer(http.Dir(&quot;/public&quot;))</code> </p>
<p><code>mux.Handle(&quot;/static/&quot;, http.StripPrefix((&quot;/static&quot;),files))</code></p>
<p>当服务器接收到一个以/static/开头的URL请求时，以上两行代码会移除URL中的/static/字符串，然后在public目录中查找被请求的文件。</p>
<p><strong>栗子</strong>：</p>
<p>接收到对文件<code>http://localhost/static/css/bootstrap.min.css</code>的请求时，它将在public目录中查找文件：<code>&lt;application root&gt;/css/bootstrap.min.css</code>，客户找到这个文件后，会把它返回给客户端。</p>
</li>
</ul>
<h2 id="创建处理器函数"><a href="#创建处理器函数" class="headerlink" title="创建处理器函数"></a>创建处理器函数</h2><p>处理器函数实际上就是一个可以接受ResponseWriter和Request指针作为参数的Go函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">    threads, err := data.Threads()</span><br><span class="line">	files := []<span class="keyword">string</span>&#123;<span class="string">&quot;template/layout.html&quot;</span>, <span class="string">&quot;template/navbar.html&quot;</span>, <span class="string">&quot;template/index.html&quot;</span>&#125;</span><br><span class="line">	templates := template.Must(template.ParseFiles(files...))</span><br><span class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">		templates.ExecuteTemplate(w, <span class="string">&quot;layout&quot;</span>, threads)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这涉及到解析和处理模板渲染的操作，需要用到html/template标准库中的Template结构。</p>
<h2 id="使用cookie进行访问控制"><a href="#使用cookie进行访问控制" class="headerlink" title="使用cookie进行访问控制"></a>使用cookie进行访问控制</h2><p>ChitChat既拥有任何人都可以访问的公开页面，也拥有用户在登录账号后才能看到的私人页面。</p>
<p>当用户成功登入后，服务器必须在后续的请求中标示出这是又一个已经登录的用户。为做到这一点，服务器会在响应的首部中写入一个cookie，而客户端在接受这个cookie之后则会将它存储到浏览器里。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authenticatefunc</span> <span class="title">authenticate</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">	r.ParseForm()</span><br><span class="line">	user, _ := data.UserByEmail(r.PostFormValue(<span class="string">&quot;email&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> user.Password == data.Encrypt(r.PostFormValue(<span class="string">&quot;password&quot;</span>))&#123;<span class="comment">//验证密码是否一致</span></span><br><span class="line">		session := user.CreateSession()</span><br><span class="line">		cookie := http.Cookie&#123;</span><br><span class="line">			Name: <span class="string">&quot;_cookie&quot;</span>,</span><br><span class="line">			Value: session.Uuid,</span><br><span class="line">			HttpOnly: <span class="literal">true</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		http.SetCookie(w, &amp;cookie)</span><br><span class="line">		http.Redirect(w, r, <span class="string">&quot;/&quot;</span>,<span class="number">302</span>)</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		http.Redirect(w, r, <span class="string">&quot;/login&quot;</span>,<span class="number">302</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数<code>data.UserbyEmail</code>通过给定的电子邮件地址获取与之对应的User结构。</p>
<p>函数<code>data.Encrypt</code>用于加密给定的字符串。</p>
<p>在验证密码核实了身份后，程序会使用User结构的CreateSession方法<strong>创建一个Session结构</strong>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Session <span class="keyword">struct</span>&#123;</span><br><span class="line">	Id <span class="keyword">int</span> <span class="comment">//存储一个随机生成的唯一ID（实现对话机制的核心），服务器会通过cookie把这个ID存储到浏览器里</span></span><br><span class="line">    Uuid <span class="keyword">string</span></span><br><span class="line">    <span class="comment">//并把Session结构中记录的各项信息存储到数据库里</span></span><br><span class="line">    Email <span class="keyword">string</span> <span class="comment">//存储用户电子邮件地址</span></span><br><span class="line">    UserId <span class="keyword">int</span> <span class="comment">//记录用户表中存储用户信息的行的ID</span></span><br><span class="line">    CreatedAt time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>cookie := http.Cookie&#123;...&#125;</code>：创建cookie结构。</p>
<p>cookie的Name是随意的，而<strong>Value是将要存储到浏览器里面的唯一ID</strong>。</p>
<p>程序没有给cookie设置过期时间，所以这个cookie就成了一个<strong>对话cookie</strong>，它将在浏览器关闭时自动被移除。</p>
<p><code>HttpOnly: true</code>：这个cookie只能通过HTTP或HTTPS访问，但无法通过JavaScript等非HTTP API进行访问。</p>
<p><code>http.SetCookie(w, &amp;cookie)</code>：<strong>将cookie添加到相应的首部去</strong>。</p>
<hr>
<p>在cookie存储到浏览器之后，接下来需要<strong>在处理器函数里面检查当前的用户是否已经登录</strong>。</p>
<p>我们需要创建一个名为session的<strong>工具函数</strong>，并在<strong>处理器函数</strong>（index）里面<strong>复用</strong>它。</p>
<p>注：我们将所有的工具（utility）函数都放在util.go文件中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">session</span><span class="params">(w http.ResponseWriter, r *http.Request)</span><span class="params">(sess data.Session, err error)</span></span>&#123;</span><br><span class="line">	cookie, err := r.Cookie(<span class="string">&quot;_cookie&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span>&#123;</span><br><span class="line">		sess = data.Session&#123;Uuid: cookie.Value&#125;</span><br><span class="line">		<span class="keyword">if</span> ok,_ := sess.Check(); !ok &#123;</span><br><span class="line">			err = errors.New(<span class="string">&quot;Invalid session&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>两项检查</strong>：</p>
<ul>
<li><p><code>cookie, err := r.Cookie(&quot;_cookie&quot;)</code>：从请求中取出cookie，如果cookie不存在，则未登录；</p>
</li>
<li><p>访问数据库并核实对话的唯一ID是否存在。</p>
</li>
</ul>
<p>从cookie中取出对话赋给<code>sess</code>,调用<code>sess</code>的Check方法。</p>
<p><strong>处理器函数使用session函数</strong>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">	threads, err := data.Threads()</span><br><span class="line">	<span class="keyword">if</span> err ==<span class="literal">nil</span>&#123;</span><br><span class="line">		_, err :=session(w, r)</span><br><span class="line">		public_tmpl_files := []<span class="keyword">string</span>&#123;<span class="string">&quot;template/layout.html&quot;</span>, <span class="string">&quot;template/public.navbar.html&quot;</span>, <span class="string">&quot;template/index.html&quot;</span>&#125;</span><br><span class="line">		private_tmpl_files := []<span class="keyword">string</span>&#123;<span class="string">&quot;template/layout.html&quot;</span>, <span class="string">&quot;template/private.navbar.html&quot;</span>, <span class="string">&quot;template/index.html&quot;</span>&#125;</span><br><span class="line">		<span class="keyword">var</span> templates *template.Template</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">			templates = template.Must(template.ParseFiles(public_tmpl_files...))</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			templates = template.Must(template.ParseFiles(private_tmpl_files...))</span><br><span class="line">		&#125;</span><br><span class="line">		templates.ExecuteTemplate(w, <span class="string">&quot;layout&quot;</span>, threads)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过调用session可以取得一个存储了用户信息的Session结构，不过因为index函数目前不需要这些信息，使用空白表示符(_)忽略这一结构。</p>
<p>其真正感兴趣的是err变量。通过err变量可判断用户是否登录，然后选择使用public导航条还是使用private导航条。</p>
<h1 id="2-5-使用模板生成HTML响应"><a href="#2-5-使用模板生成HTML响应" class="headerlink" title="2.5 使用模板生成HTML响应"></a>2.5 使用模板生成HTML响应</h1><p>index处理器函数中大部分代码都是用来为客户端生成HTML的。</p>
<p>函数把每个需要的模板文件都放到了Go<strong>切片</strong>里面：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">public_tmpl_files := []<span class="keyword">string</span>&#123;<span class="string">&quot;template/layout.html&quot;</span>, </span><br><span class="line">							  <span class="string">&quot;template/public.navbar.html&quot;</span>, </span><br><span class="line">							  <span class="string">&quot;template/index.html&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>templates = template.Must(template.ParseFiles(public_tmpl_files...))</code>：</p>
<p>程序会调用ParseFiles函数对这些模板文件进行语法分析，并创建出相应的模板。</p>
<p>为了捕捉语法分析过程中可能会产生的错误，程序使用了Must函数去包围ParseFiles函数的执行结果，这样当ParseFiles返回错误的时候，Must函数就会向用户返回响应的错误报告。</p>
<p>现在来看模板文件：</p>
<p>Chitchat项目中每个项目文件都定义了一个模板（当然也可以在一个模板文件中定义多个模板）</p>
<p>切片指定的这三个HTML文件都包含了特定的嵌入命令，这些命令被称为<strong>动作</strong>（action），动作在HTML文件中会被<code>&#123;&#123; &#125;&#125;</code>包围起来。</p>
<p>layout.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;layout&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Chitchat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/font-asesome.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;&#123; template &quot;navbar&quot; . &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; template &quot;content&quot; . &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>动作包括：</p>
<ul>
<li>define：这个动作通过文件开头的<code>&#123;&#123; define "layout"&#125;&#125;</code>和文件末尾的<code>&#123;&#123; end &#125;&#125;</code>将报文的文本定义成了layout模板的一部分</li>
<li><p>navbar：引用navbar.html模板。跟在被引用模板名字之后的点（.）代表了传递给被引用模板的数据（当然，这种传递是相互传递的过程，在navbar.html中如有需要不必再引用layout）</p>
</li>
<li><p>content：引用content 模板，而content模板在index.html的位置，可见，实际上模板和模板文件分别拥有不同的名字也是可行的。</p>
</li>
</ul>
<p>public.navbar.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;navbar&quot; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-default navbar-static-top&quot;</span> <span class="attr">role</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.navbar-collapse&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-comments-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                ChitChat</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-collapse collapse&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>除了定义模板自身的define动作之外，这个模板没有包含其他动作。</p>
<p>index.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;content&quot; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/thread/new&quot;</span>&gt;</span>Start a thread<span class="tag">&lt;/<span class="name">a</span>&gt;</span> or join one below!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; range . &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-comment-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123; .Topic &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        Started by &#123;&#123; .User.Name &#125;&#125; - &#123;&#123; .CreatedAtDate &#125;&#125; - &#123;&#123; .NumReplies &#125;&#125; posts.</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/thread/read?id=&#123;&#123;.Uuid &#125;&#125;&quot;</span>&gt;</span>Read more<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>再来看index中这段代码：</p>
<p><code>templates.ExecuteTemplate(w, &quot;layout&quot;, threads)</code></p>
<p>程序通过调用函数ExecuteTemplate，执行已经语法分析过的layout模板。执行模板意味着把模板文件中的内容和来自<strong>其他渠道的数据</strong>进行合并，然后生成最终的HTML内容。</p>
<p><strong>而模板文件对数据的引用正是通过<code>&#123;&#123;.&#125;&#125;</code>来实现。</strong></p>
<p>程序之所以对layout模板而不是navbar模板或者content模板进行处理，是因为layout模板已经引用了其他两个模板，所以执行layout模板就会导致其他两个模板也会被执行，由此产生预期的HTML。</p>
<p>栗子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;&#123; .User.Name &#125;&#125; - &#123;&#123; .CreatedAtDate &#125;&#125; - &#123;&#123; .NumReplies &#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/31/go-web-2/03.png" alt="03"></p>
<p><strong>代码整理</strong>：</p>
<p>因为生成HTML的代码会被重复执行很多次，我们这里将其封装为一个函数generateHTML：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateHTML</span><span class="params">(writer http.ResponseWriter, data <span class="keyword">interface</span>&#123;&#125;, filenames ...<span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> files []<span class="keyword">string</span></span><br><span class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> filenames&#123;</span><br><span class="line">		files = <span class="built_in">append</span>(files, fmt.Sprintf(<span class="string">&quot;templates/%s.html&quot;</span>,file))</span><br><span class="line">	&#125;</span><br><span class="line">	templates := template.Must(template.ParseFiles(files...))</span><br><span class="line">	templates.ExecuteTemplate(writer,<span class="string">&quot;layout&quot;</span>,data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里data是一个空接口，可以传递任何类型的值。</p>
<p><code>filenames ...string</code>：最后一个参数以3个点开头（…）开头，表示generateHTML函数是一个<strong>可变参数函数</strong>，这意味着这个函数可以在最后的可变参数中接受零个或任意多个值作为参数。其对可变参数的支持使我们可以同时将任意多个模板文件传递给该函数。</p>
<p>注意：在Go中，可变参数必须是可变参数函数的最后一个参数。</p>
<p>index处理器整理后的最终版：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span>&#123;</span><br><span class="line">	threads, err :=data.Threads();</span><br><span class="line">	<span class="keyword">if</span> err ==<span class="literal">nil</span> &#123;</span><br><span class="line">		_, err := session(writer, request)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			generateHTML(writer, threads, <span class="string">&quot;layout&quot;</span>,<span class="string">&quot;public.navbar&quot;</span>,<span class="string">&quot;index&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			generateHTML(writer, threads, <span class="string">&quot;layout&quot;</span>,<span class="string">&quot;private.navbar&quot;</span>,<span class="string">&quot;index&quot;</span>))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-6-使用数据库（PostgreSQL）"><a href="#2-6-使用数据库（PostgreSQL）" class="headerlink" title="2.6 使用数据库（PostgreSQL）"></a>2.6 使用数据库（PostgreSQL）</h1><p>在Windows系统上安装：</p>
<p>一个比较流行的安装程序是由Enterprise DB提供的：www.enterprisedb.com/products-services-training/pgdownload.</p>
<p>这里我们创建一个名为data的包，<strong>包含与数据库交互的结构代码，还包含了一些与数据处理密切相关的函数</strong>。</p>
<p>我们在data目录中穿件一个名为thread.go的文件，用于保存的帖子相关代码。（当然还有保存所有用户先关代码的user.go）</p>
<p>thread.go中定义的Thread结构：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Thread <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id        <span class="keyword">int</span></span><br><span class="line">	Uuid      <span class="keyword">string</span></span><br><span class="line">	Topic     <span class="keyword">string</span></span><br><span class="line">	UserId    <span class="keyword">int</span></span><br><span class="line">	CreatedAt time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后引用Thread结构就需要：<code>data.Thread</code></p>
<p><strong>Thread结构</strong>应该与创建<strong>关系数据库表threads</strong>时使用的数据定义语言（Data Define Language,DDL）保持一致。</p>
<p>我们现在需要创建一个容纳该表threads的数据库。</p>
<p>创建数据库：<code>createdb chitchat</code></p>
<p>创建完数据库后，就可以通过setup.sql文件来创建数据库表了：</p>
<p>setup.sql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users</span><br><span class="line">(</span><br><span class="line">    id         serial <span class="keyword">primary</span> key,</span><br><span class="line">    uuid       <span class="type">varchar</span>(<span class="number">64</span>)  <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    name       <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    email      <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    password   <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    created_at <span class="type">timestamp</span>    <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sessions</span><br><span class="line">(</span><br><span class="line">    id         serial <span class="keyword">primary</span> key,</span><br><span class="line">    uuid       <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    email      <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    user_id    <span class="type">integer</span> <span class="keyword">references</span> users (id),</span><br><span class="line">    created_at <span class="type">timestamp</span>   <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> threads</span><br><span class="line">(</span><br><span class="line">    id         serial <span class="keyword">primary</span> key,</span><br><span class="line">    uuid       <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    topic      text,</span><br><span class="line">    user_id    <span class="type">integer</span> <span class="keyword">references</span> users (id),</span><br><span class="line">    created_at <span class="type">timestamp</span>   <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> posts</span><br><span class="line">(</span><br><span class="line">    id         serial <span class="keyword">primary</span> key,</span><br><span class="line">    uuid       <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    body       text,</span><br><span class="line">    user_id    <span class="type">integer</span> <span class="keyword">references</span> users (id),</span><br><span class="line">    thread_id  <span class="type">integer</span> <span class="keyword">references</span> threads (id),</span><br><span class="line">    created_at <span class="type">timestamp</span>   <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>运行这个脚本需要用到psql（SQL shell）</p>
<p>在终端执行：<code>psql -f setup.sql -d chitchat</code> 将在chitchat数据库创建出相应的表</p>
<p>下面，考虑如何<strong>与数据库进行连接</strong>以及如何<strong>对表进行操作</strong></p>
<p>data.go中的Db全局变量和init函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	Db, err = sql.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;dbname=chitchat sslmode=disable&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建了一个Db全局变量指针，它指向代表数据库连接池的sql.DB，后续会用这个Db执行数据库查询操作。</li>
</ul>
<p>现在，我们拥有了Thread结构、threads数据库表和一个指向数据库连接池的指针。</p>
<p>下面实现<strong>Thread结构与threads数据库表的连接</strong>（connect）</p>
<p>我们创建一个能<strong>在结构和数据库之间互动</strong>的函数就OK。</p>
<p><strong>从数据库里面取出所有帖子并将其返回给index</strong>：</p>
<p>threads.go中的Threads函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Threads Get all threads in the database and returns it</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Threads</span><span class="params">()</span> <span class="params">(threads []Thread, err error)</span></span> &#123;</span><br><span class="line">	rows, err := Db.Query(<span class="string">&quot;SELECT id, uuid, topic, user_id, created_at FROM threads ORDER BY created_at DESC&quot;</span>)<span class="comment">//通过数据库连接池与数据库连接+SQL语句+使用这个结构去存储行中记录的子数据</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;<span class="comment">//循环：遍历行row，为每个行分别创建一个Thread结构切片conv，</span></span><br><span class="line">		conv := Thread&#123;&#125;</span><br><span class="line">		<span class="keyword">if</span> err = rows.Scan(&amp;conv.Id, &amp;conv.Uuid, &amp;conv.Topic, &amp;conv.UserId, &amp;conv.CreatedAt); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span><span class="comment">//使用Scan函数将每行中记录的子数据存储到conv中</span></span><br><span class="line">		&#125;</span><br><span class="line">		threads = <span class="built_in">append</span>(threads, conv)<span class="comment">//将conv内容追加到threads切片里面</span></span><br><span class="line">	&#125;</span><br><span class="line">	rows.Close()</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>threads函数返回给index处理器之后，我们再来回顾index.html模板文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;content&quot; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/thread/new&quot;</span>&gt;</span>Start a thread<span class="tag">&lt;/<span class="name">a</span>&gt;</span> or join one below!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; range . &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-comment-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123; .Topic &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        Started by &#123;&#123; .User.Name &#125;&#125; - &#123;&#123; .CreatedAtDate &#125;&#125; - &#123;&#123; .NumReplies &#125;&#125; posts.</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/thread/read?id=&#123;&#123;.Uuid &#125;&#125;&quot;</span>&gt;</span>Read more<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>我们知道模板动作中的<code>.</code>代表传入模板的数据。</p>
<p><code>&#123;&#123;range .&#125;&#125;</code>中<code>.</code>表示程序在稍早之前通过Threads函数取得的Threads变量（切片）。</p>
<p>range动作：假设传入的数据要么是一个<strong>由结构组成的切片</strong>，要么是一个<strong>由结构组成的数组</strong>，这个动作会遍历传入的每个结构。</p>
<ul>
<li>访问字段：用户可以通过字段名访问结构里的字段，如<code>&#123;&#123;.Topic&#125;&#125;</code>访问的是Thread结构的Topic字段。</li>
</ul>
<p><strong>注意：访问字段必须在字段名前加<code>.</code>并字段名首字母大写。</strong></p>
<ul>
<li>调用方法：例如<code>&#123;&#123;.User.Name&#125;&#125;&#123;&#123;.CreatedAtDate&#125;&#125;&#123;&#123;.NumReplies&#125;&#125;</code>等动作都是调用了结构中的同名方法。</li>
</ul>
<p>thread.go中的NumReplies方法:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NumReplies get the number of posts in a thread</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(thread *Thread)</span> <span class="title">NumReplies</span><span class="params">()</span> <span class="params">(count <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	rows, err := Db.Query(<span class="string">&quot;SELECT count(*) FROM posts where thread_id = $1&quot;</span>, thread.Id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">		<span class="keyword">if</span> err = rows.Scan(&amp;count); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	rows.Close()</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个统计帖子数量的函数。</p>
<p>思想与Threads函数类似，最终返回帖子数量count的值，而模板引擎则使用这个值去带图模板文件中出现的<code>&#123;&#123; . NumReplies&#125;&#125;</code>动作。</p>
<h1 id="2-7-启动服务器"><a href="#2-7-启动服务器" class="headerlink" title="2.7 启动服务器"></a>2.7 启动服务器</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">	    Addr: <span class="string">&quot;0.0.0.0:8080&quot;</span></span><br><span class="line">		Handler: mux,</span><br><span class="line">	&#125;</span><br><span class="line">server.ListenAndServe()</span><br></pre></td></tr></table></figure>
<p><strong>启动服务器并将多路复用器与服务器绑定。</strong></p>
<p>之后启动监听，服务器就可以启动了。</p>
<p>运行程序，服务器地址：<a href="http://localhost:8080/s">http://localhost:8080/s</a></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go_web</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop时代背景</title>
    <url>/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<ul>
<li>大数据课程介绍及体系</li>
<li>大数据时代背景</li>
<li>Hadoop生态介绍</li>
</ul>
<span id="more"></span>
<h1 id="大数据课程介绍及体系"><a href="#大数据课程介绍及体系" class="headerlink" title="大数据课程介绍及体系"></a>大数据课程介绍及体系</h1><p><strong>大数据科学体系</strong></p>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712150920005.png" class title="image-20220712150920005">
<ul>
<li><p>一个目标：从数据中提取出有价值信息，以及支撑商业活动、科学研究及社会活动</p>
</li>
<li><p>三大范畴：数据统计学、行业经验、工具支撑</p>
</li>
<li><p>六大分析过程：业务理解、数据理解、数据准备、模型建立、模型评估、部署应用</p>
</li>
<li><p>七大数据流程：数据采集、数据建模、数据存储、数据处理、数据分析、数据可视化、数据应用</p>
</li>
<li><p>九大知识体系：统计学、数据平台、<strong>大数据</strong>、数据处理开发、编程语言、数据分析、数据挖掘、机器学习、人工智能、数据可视化</p>
</li>
</ul>
<h1 id="大数据时代背景"><a href="#大数据时代背景" class="headerlink" title="大数据时代背景"></a>大数据时代背景</h1><img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712151455980.png" class title="image-20220712151455980">
<p><strong>大数据定义</strong></p>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712151802288.png" class title="image-20220712151802288">
<p>大数据，指的是所涉及的资料量规模巨大到无法透过目前主流软件工具，在<strong>合理时间内</strong>达到抓取、管理、处理、并整理成为帮助企业经营决策更积极目的的资讯</p>
<p><strong>大数据产生过程：</strong></p>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712152225890.png" class title="image-20220712152225890">
<p><strong>萌芽期</strong></p>
<ul>
<li><p>1990~2000</p>
<p>运营式系统</p>
<p>收银系统、办公系统</p>
</li>
</ul>
<p><strong>成熟期</strong></p>
<ul>
<li><p>2000~2010</p>
<p>用户原创内容</p>
<p>互联网的发展：微博、微信等</p>
</li>
</ul>
<p><strong>大规模应用</strong></p>
<ul>
<li><p>2010年至今</p>
<p>感知式系统</p>
<p>物联网的迅速发展：摄像头、温度监控等</p>
</li>
</ul>
<p><strong>大数据技术支撑</strong></p>
<ul>
<li>存储：MB、GB、TB、PB</li>
<li>计算：资源、服务共享、虚拟化</li>
<li>网络：带宽、千兆万兆网</li>
</ul>
<p><strong>大数据4V特征</strong></p>
<p>Volume：大量化</p>
<p>Variety：多样化（其中以非结构化数据居多）</p>
<p>Velocity：快速化</p>
<p>Value：价值密度低 </p>
<p><strong>应用场景：</strong></p>
<p>交通优化、边防、研究改进、物流规划、热点跟踪、环境监控、社交网络意识、就业分析、欺诈检测、经济预测</p>
<p><strong>大数据面临的挑战：</strong></p>
<ul>
<li>存储（HDFS）</li>
<li>分析（Hive、MR）</li>
<li>管理</li>
</ul>
<p><strong>大数据给传统数据存储带来的问题</strong></p>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712155030425.png" class title="image-20220712155030425">
<ul>
<li>数据的存储能力<ul>
<li>数据量大</li>
<li>数据种类多</li>
</ul>
</li>
<li>数据的处理能力<ul>
<li>非结构化数据</li>
<li>处理时间</li>
</ul>
</li>
<li>扩展性与容错性<ul>
<li>在线扩容</li>
<li>容错与高可用</li>
</ul>
</li>
<li>成本<ul>
<li>软硬件成本</li>
<li>管理维护成本</li>
</ul>
</li>
</ul>
<h2 id="Hadoop生态的大数据解决方案"><a href="#Hadoop生态的大数据解决方案" class="headerlink" title="Hadoop生态的大数据解决方案"></a>Hadoop生态的大数据解决方案</h2><p><strong>解决方案</strong></p>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712160855246.png" class title="image-20220712160855246">
<p><strong>Hadoop生态体系</strong></p>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712160051075.png" class title="image-20220712160051075">
<p>数据采集、数据存储、资源管理、计算框架、处理分析</p>
<p><strong>大数据开发运维技术场景简图</strong></p>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712161004803.png" class title="image-20220712161004803">
<p><strong>hadoop优势</strong></p>
<ul>
<li><p>高可靠、大存储（高并发、保证数据正确完整、满足高容量数据存储）</p>
</li>
<li><p>平滑扩展、线性扩展</p>
<p>（具备线性扩展能力，在不停业务的情况下实现节点线性扩容，且在扩容后自动实现数据的重新分步）</p>
</li>
<li><p>高效性（并行，加快任务的处理速度）</p>
</li>
<li><p>高容错（自动地将失败的任务进行分配）</p>
</li>
</ul>
<p><strong>学习Hadoop前应掌握的技能</strong></p>
<ol>
<li>虚拟机、Linux系统</li>
<li>网络、SSH、防火墙</li>
<li>JDK、系统参数、Java</li>
<li>MySQL DDL DML</li>
<li>hadoop环境变量</li>
</ol>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712162710914.png" class title="image-20220712162710914">
<p><strong>Hadoop定义</strong></p>
<p>Apache开源软件基金会开发的</p>
<ul>
<li>运行与大规模普通服务器上的</li>
<li>用于大数据存储、计算、分析的</li>
<li>分布式存储系统和分布式框架</li>
</ul>
<p>Hadoop之父：Doug Cutting</p>
<p><strong>Hadoop发展史：</strong></p>
<img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712163045049.png" class title="image-20220712163045049">
<p><strong>Hadoop生态发展史</strong>：</p>
<p><img src="/2022/07/12/hadoop%E6%97%B6%E4%BB%A3%E8%83%8C%E6%99%AF/image-20220712163411465.png" alt="image-20220712163411465" style="zoom:150%;"></p>
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>hdfs实操</title>
    <url>/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<ul>
<li>HDFS重要特性</li>
<li>HDFS shell操作</li>
<li>HDFS工作流程与机制</li>
</ul>
<span id="more"></span>
<h1 id="HDFS重要特性"><a href="#HDFS重要特性" class="headerlink" title="HDFS重要特性"></a>HDFS重要特性</h1><ul>
<li><p>主从架构（master/slave）</p>
<ul>
<li>一个NameNode，多个DataNode</li>
<li>机架（Rack）</li>
</ul>
</li>
<li><p>分块存储</p>
<ul>
<li>物理上分块，默认128M</li>
<li>块大小可通过配置参数规定，参数位于<code>hdfs-defalut.xml</code>中：<code>dfs.blocksize</code></li>
</ul>
</li>
<li><p>副本机制</p>
<ul>
<li>文件的所有block都有副本</li>
<li>由参数dfs.replication控制，默认值是3，也就是额外备份2份</li>
</ul>
</li>
<li><p>元数据记录</p>
<ul>
<li><p>文件自身属性信息</p>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717103436808.png" class title="image-20220717103436808">
</li>
<li><p>文件块位置映射信息</p>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717103524044.png" class title="image-20220717103524044">
</li>
</ul>
</li>
<li><p>抽象统一的目录树结构（namespace）</p>
<ul>
<li>层次性文件组织结构</li>
<li>NameNode负责维护</li>
<li>客户端通过路径来访问文件，如：<code>hdfs://namenode:port/dir-a/dir-b/dir-c/file.data</code></li>
</ul>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717103558942.png" class title="image-20220717103558942">
</li>
<li><p>数据块存储</p>
<ul>
<li>各个block的具体存储管理由DataNode节点承担</li>
</ul>
</li>
</ul>
<p><strong>HDFS架构</strong></p>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717102834690.png" class title="image-20220717102834690">
<h1 id="HDFS-shell操作"><a href="#HDFS-shell操作" class="headerlink" title="HDFS shell操作"></a>HDFS shell操作</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls file:/// #操作本地文件系统</span><br><span class="line">hadoop fs -ls hdfs:///mode1:8020/ #操作HDFS分布式文件系统</span><br><span class="line">hadoop fs -ls / #直接根目录，没有指定协议 讲加载读取fs.defaultFS值（core-site.xml)</span><br><span class="line">hadoop fs -ls gfs:/// #操作谷歌文件系统</span><br><span class="line">hadoop fs -ls tfs:/// #操作淘宝文件系统</span><br></pre></td></tr></table></figure>
<p>ps：<code>hdfs dfs</code> = <code>hadoop fs</code></p>
<ol>
<li><p>创建文件夹</p>
<p><code>hadoop fs -mkdir [-p] &lt;path&gt;</code></p>
</li>
<li><p>查看指定目录下内容</p>
<p><code>hadoop fs -ls [-h] [-R] [&lt;path&gt; ...]</code></p>
<p>-h 人性化显示size </p>
<p>-R 递归查看目录及其子目录</p>
</li>
<li><p>上传文件到HDFS指定目录下</p>
<p><code>hadoop fs -put [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;</code></p>
<p>-f 覆盖目标文件（已存在下）</p>
<p>-p 保留访问和修改时间，所有权和权限</p>
<p>localsrc 本地文件系统（客户端所在机器）</p>
<p>dst 目标文件系统（HDFS）</p>
</li>
<li><p><code>hadoop fs -cat &lt;src&gt;</code> </p>
</li>
<li><p><code>hadoop fs -tail &lt;src&gt;</code></p>
</li>
<li><p>下载文件到<strong>本地系统</strong>指定目录</p>
<p><code>hadoop fs -get [-f] [-p] &lt;src&gt; ... &lt;localdst&gt;</code></p>
</li>
<li><p><code>hadoop fs -cp [-f] &lt;src&gt; ... &lt;dst&gt;</code></p>
</li>
<li><p>追加数据到HDFS文件中</p>
<p><code>hadoop fs -appendToFile &lt;localsrc&gt; ... &lt;dst&gt;</code></p>
<p>将所有给定本地文件的内容追加到给定dst文件</p>
<p>dst如果文件不存在，则创建该文件</p>
<p>如果<code>&lt;localSrc&gt;</code>为-，则输入为从标准输入中读取</p>
</li>
<li><p><code>hadoop fs -mv &lt;src&gt; ... &lt;dst&gt;</code></p>
</li>
</ol>
<h1 id="HDFS工作流程与机制"><a href="#HDFS工作流程与机制" class="headerlink" title="HDFS工作流程与机制"></a>HDFS工作流程与机制</h1><h2 id="角色构成"><a href="#角色构成" class="headerlink" title="角色构成"></a>角色构成</h2><p>主角色：NameNode</p>
<p>NameNode维护和管理文件系统元数据，包括namespace、文件和块的位置信息、访问权限等信息（不存储实际数据块）</p>
<p>NameNode是访问HDFS的唯一入口</p>
<p>NameNode所在机器通常会配置有大量内存（RAM）</p>
<p>NameNode是Hadoop集群中的单点故障</p>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717122203040.png" class title="image-20220717122203040">
<ul>
<li><p>NameNode内部通过<strong>内存</strong>和<strong>磁盘</strong>文件两种方式管理元数据</p>
</li>
<li><p>其中磁盘上的元数据文件包括Fsimage内存元数据镜像文件和edits log（Journal）编辑日志</p>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717122700250.png" class title="image-20220717122700250">
</li>
</ul>
<p>从角色：DataNode</p>
<p>DataNode负责具体的数据块存储，其数量决定了HDFS集群的整体数据存储能力</p>
<p>DataNode启动时，会将自己注册到NameNode并汇报自己负责持有的块列表</p>
<p>DataNode所在机器通常配置有大量的硬盘空间</p>
<p>主角色辅助角色：secondarynamenode</p>
<p>Secondary NameNode充当NameNode的辅助节点</p>
<p>帮助NameNode进行元数据文件的合并动作</p>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717122749398.png" class title="image-20220717122749398">
<h2 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h2><img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717123442713.png" class title="image-20220717123442713">
<ol>
<li><p>HDFS客户端创建对象实例<strong>DistributedFileSystem</strong>，该对象中封装了与HDFS文件系统操作的相关方法</p>
</li>
<li><p>调用DistributedFileSystem对象的<strong>create()</strong>方法，通过RPC请求NameNode创建文件</p>
<ul>
<li>NameNode执行克重检查判断：目标文件是否存在、父目录是否存在、客户端是否具有创建该文件的权限。检查通过，NameNode就会为本次请求记下一条记录，返回FSDataOutputStream输出流对象给客户端用于写数据</li>
</ul>
</li>
<li><p>客户端通过<strong>FSDataOutputStream</strong>输出流开始写入数据</p>
</li>
<li><p>客户端写入数据时，将数据分成一个数据包（packet 默认64k），内部组件<strong>DataStreamer</strong>请求NameNode挑选出适合存储数据副本的一组DataNode地址，默认是3副本存储</p>
<p>DataStreamer将数据包流式传输到pipeline的第一个DataNode，该DataNode存储数据包并将它发送到pipeline的第二个DataNode。同样，第二个DataNode存储数据包并且发送给第三个（即最后一个）时DataNode</p>
</li>
<li><p>传输的反方向上，会通过ACK机制消炎数据包传输是否成功</p>
</li>
<li><p>客户端完成数据写入后，在FSDataOutputStream输出流上调用close()方法关闭</p>
</li>
<li><p>DistributedFieSystem联系NameNode告知其文件写入完成，等待NameNode确认</p>
<p>因为namenode已经知道文件由哪些块组成（DataStream请求分配数据块），因此仅需等待最小复制块即可成功返回</p>
<p>最小复制是由参数dfs.namenode.replication.min指定，默认是1</p>
</li>
</ol>
<p><strong>基础支撑</strong></p>
<ul>
<li><p>Pipeline管道（HDFS数据传输方式）</p>
</li>
<li><p>ACK应答响应（确保数据传输安全）</p>
</li>
</ul>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717123750968.png" class title="image-20220717123750968">
<ul>
<li><p>默认三副本存储策略（不能把所有副本放在一台机器上）</p>
<p>由BlockPlacementPolicyDefault指定</p>
<ul>
<li><p>第一块副本：优先客户端本地，否则随机</p>
</li>
<li><p>第二块副本：不同于第一块副本的不同机架</p>
</li>
<li><p>第三块副本：第二块副本相同机架不同机器</p>
<img src="/2022/07/17/hdfs%E5%AE%9E%E6%93%8D/image-20220717124201019.png" class title="image-20220717124201019">
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm学习</title>
    <url>/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<ul>
<li>请你谈谈对JVM的理解？java8虚拟机和之前的变化更新</li>
<li>什么是OOM，什么是栈溢出StackOverFlowError?怎么分析</li>
<li>JVM的常用调优参数有哪些</li>
<li>内存快照如何抓取，怎么分析Dump文件？</li>
<li>谈谈JVM中，类加载器你的认识</li>
</ul>
<span id="more"></span>
<h2 id="Java运行机制"><a href="#Java运行机制" class="headerlink" title="Java运行机制"></a>Java运行机制</h2><p>既是解释性语言，又是编译性语言</p>
<ol>
<li><p>编写<code>.java</code></p>
</li>
<li><p>编译 </p>
<p>使用java编译器对.java文件进行编译，生成.class字节码文件</p>
</li>
<li><p>运行</p>
<p>JVM解释器将.class字节码文件翻译成机器码，并执行程序显示结果</p>
</li>
<li><p>字节码文件：二进制文件</p>
</li>
<li><p>Java虚拟机：编译后的Java程序指令不在计算机的CPU上执行，而是在JVM上执行</p>
</li>
</ol>
<h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p>运行在操作系统之上，JVM用C写的</p>
<p>JRE包含了JVM</p>
<p>默认hotspot实现</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221206221807943.png" class title="image-20221206221807943">
<h2 id="JVM的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h2><p>栈和程序计数器不会存在垃圾</p>
<p>JVM调优仅存在在堆中</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221206222335659.png" class title="image-20221206222335659">
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221206231258003.png" class title="image-20221206231258003">
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>作用：加载class文件~ new Student();</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221206232803873.png" class title="image-20221206232803873">
<ol>
<li><p>虚拟机自带的加载器</p>
</li>
<li><p>启动类(根)加载器<code>jre/lib下的rt.jar、resources.jar、charsets.jar和class等</code></p>
</li>
<li><p>扩展类加载器<code>jre/lib/ext的jar包和class文件</code></p>
</li>
<li><p>应用程序(系统类)加载器<code>当前应用的classpath下的所有类</code></p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221206234850251.png" class title="image-20221206234850251">
</li>
</ol>
<h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><ol>
<li><p>用户自定义类加载器 User (继承classLoader重写findclass方法,加载对应类)</p>
</li>
<li><p>类加载器收到类加载的请求    Application app</p>
</li>
<li><p>将这个请求向上委托为父类加载器去完成，一直向上委托，直到启动类加载器</p>
</li>
<li><p>启动类加载器检查是否能够加载这个类，能加载就会儿三个月，使用当前的加载器，否则，抛出异常，通知自家在其进行加载</p>
</li>
<li><p>重复步骤 3</p>
<p>Class Not Found Exception~</p>
<p>null: java调用不到~  因为c、c++写的</p>
<p>Java = C++— 去掉繁琐的东西：指针，内存管理</p>
</li>
</ol>
<p>存在意义：</p>
<ol>
<li>通过委派的方式，可以<strong>避免类的重复加载</strong>，当附加在其已经加载过某一个类时，子加载器就不会再重新加载这个类</li>
<li>保证安全性：bootstrap ClassLoader被加载时，只会加载JAVA_HOME/lib中的jar包的类，那么这些类不会被随意替换，避免有人自定义一个有破坏功能的java.lang.<em>被加载。可以<em>*有效防止核心JAVA API被篡改</em></em></li>
</ol>
<p>有时也需要打破双亲委派机制：</p>
<h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p>沙箱机制就是将java代码限定在虚拟机(jvm)特定的运行范围中，并且严格限制代码对本地系统资源的访问，通过这样的措施来保证对代码的有效隔离，防止对系统造成破坏</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWnRDbGluZw==,size_20,color_FFFFFF,t_70,g_se,x_16.png" class title="img">
<p>沙箱的基本组件：</p>
<ul>
<li><p>字节码校验器：确保Java类文件遵循java语言规范。这样可以帮助Java实现内存保护。但并不是所有类文件都会经过字节码校验，比如核心类。</p>
</li>
<li><p>类装载器</p>
</li>
</ul>
<h2 id="Native关键字"><a href="#Native关键字" class="headerlink" title="Native关键字"></a>Native关键字</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;my thread&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// native: 凡是带了native关键字的，说明java的作用范围达不到了，会调用底层C语言的库</span></span><br><span class="line">    <span class="comment">// 会进入本地方法栈</span></span><br><span class="line">    <span class="comment">// 调用本地方法接口 JNI</span></span><br><span class="line">    <span class="comment">// JNI作用: 扩展Java的使用，融合不同的编程语言为Java所用</span></span><br><span class="line">    <span class="comment">// 在内存区域中专门开辟了一块标记区域 : Native Method Stack, 登记native方法</span></span><br><span class="line">    <span class="comment">// 在最终执行的时候，通过JNI加载本地方法库中的方法</span></span><br><span class="line">    <span class="comment">// Java程序驱动打印机,管理系统,当我即可,在企业级应用中较为少见</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 调用其他接口: Socket WebService http</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Native Method Area/Stack</p>
<p>它具体做法是Native Method Stack中登记native方法，在执行引擎执行的时候加载Native Libraies</p>
<h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><p>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向一条指令的地址，即即将要执行的指令代码）在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>Method Area</p>
<p>方法区是被所有线程共享的，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，<strong>此区域属于共享区间</strong></p>
<p><strong>静态变量static、常量final、类信息Class（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</strong></p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>程序 = 数据结构 + 算法：持续学习</p>
<p>程序 = 框架 + 业务逻辑：吃饭用</p>
<p>为什么main()限制性，最后结束</p>
<p>栈：栈内存，主管程序的运行，生命周期和线程同步</p>
<p>线程结束，占内存也就释放了；对于栈来说，不存在垃圾回收问题</p>
<p>栈：8大基本类型+对象引用+实例的方法</p>
<ul>
<li>每个线程都包含一个栈区，栈中只保存基本数据类型的值和对象的应用以及基础数据的引用</li>
<li>每个栈中的数据（基本数据类型和对象的应用）都是私有的，其他栈是无法进行访问的</li>
<li>栈分为三个部分：基础类型变量区、执行环境上下文，操作指令区（存放操作指令）</li>
</ul>
<p>栈运行：java中，每执行一个方法都会产生一个栈帧</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211104149409.png" class title="image-20221211104149409">
<p>栈满抛异常：StackOverflowError</p>
<p>栈 + 堆 + 方法区的交互关系：</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211105032888.png" class title="image-20221211105032888">
<p>画出一个对象在内存中实例化的过程</p>
<p><a href="https://blog.csdn.net/qq_43430343/article/details/119709715">https://blog.csdn.net/qq_43430343/article/details/119709715</a></p>
<p><a href="https://yangyongli.blog.csdn.net/article/details/126465785">https://yangyongli.blog.csdn.net/article/details/126465785</a></p>
<h2 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h2><ul>
<li>Sun公司 <code>HotSpot</code></li>
<li>BEA <code>JRockit</code></li>
<li>IBM <code>J9 VM</code></li>
</ul>
<p>我们学习都是HotSpot</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>Heap，一个JVM只有一个堆内存，被所有线程所共享，堆内存的大小是可以调节的，通过-Xmx(堆的最大容量)和-Xms(堆的初始容量)控制</p>
<p>类加载器读取了类文件后，一般会把：类、方法、常量、变量等 保存我们所有引用类型的展示对象</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211114432689.png" class title="image-20221211114432689">
<h2 id="新生代-young-、老年代-old-、元空间"><a href="#新生代-young-、老年代-old-、元空间" class="headerlink" title="新生代(young)、老年代(old)、元空间"></a>新生代(young)、老年代(old)、元空间</h2><p>新生代：被细分为Eden和两个Survior区域，这两个Survivor区域分别被命名为from和to以示区分（默认Edem:from:to=8:1:1)</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211112921863.png" class title="image-20221211112921863">
<p>GC垃圾回收，主要是在伊甸园区和养老区</p>
<p>假设内存满了，OOM：堆内存不够（java.lang.OutOfMemoryError: Java heap space）</p>
<p>在JDK8后，永久存储区改了个名字：元空间</p>
<p>永久区：这个区域常驻内存。用来存放JDK自身携带的Class对象、Interface元数据，存储得到是Java运行时的一些环境或类信息，这个区域不存在垃圾回收！关闭VM虚拟机就会释放这个区域的内存</p>
<ul>
<li>jdk1.6之前：永久代，<strong>常量池在方法区</strong></li>
<li>jdk1.7：永久代，但是慢慢的退化了，<code>去永久代</code>，<strong>常量池在堆中</strong></li>
<li>jdk1.8之后：无永久代，方法区成为了概念，变成了元空间存在堆中，<strong>常量池在元空间</strong>（方法区和堆的关系<a href="https://blog.csdn.net/wangkexiang21/article/details/124014726）">https://blog.csdn.net/wangkexiang21/article/details/124014726）</a></li>
</ul>
<p>方法区的OOM原因：如果一个启动类，加载了大量的第三方jar包；Tomcat部署了太多的应用，大量动态生成的反射类。不断的被加载。知道内存满，就会出现OOM</p>
<p>（字符串常量池在jdk1.6存在于方法区，1.8知乎元空间化字符串常量池移存到了堆，但是运行时常量池和类文件常量池放在元空间中）</p>
<p>元空间逻辑上存在，物理上不存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回虚拟机视图使用的最大内存</span></span><br><span class="line">        <span class="keyword">long</span> max = Runtime.getRuntime().maxMemory();</span><br><span class="line">        <span class="comment">//返回jvm总内存</span></span><br><span class="line">        <span class="keyword">long</span> total = Runtime.getRuntime().totalMemory();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;max=&quot;</span>+ max + <span class="string">&quot;字节\t&quot;</span> + (max/(<span class="keyword">double</span>)<span class="number">1024</span>*<span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;total=&quot;</span> + total + <span class="string">&quot;字节\t&quot;</span> + (total/(<span class="keyword">double</span>)<span class="number">1024</span>*<span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认情况下: 分配的总内存是电脑内存的1/4, 而初始化的内存: 1/64</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//OOM:</span></span><br><span class="line">            <span class="comment">//1.尝试扩大堆内存看结果</span></span><br><span class="line">            <span class="comment">//2. 分析内存,看一下哪个地方出了问题(专业工具)</span></span><br><span class="line">            <span class="comment">//3. 修改代码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// -Xms1024m -Xmx1024m -XX:+PrintGCDetails</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211202644542.png" class title="image-20221211202644542">
<h2 id="堆内存调优"><a href="#堆内存调优" class="headerlink" title="堆内存调优"></a>堆内存调优</h2><p>在一个项目中，突然出现了OOM故障，那么该如何排除研究为什么出错</p>
<ul>
<li>能够看到代码第几行出错：内存快照分析工具（MAT，Jprofier)</li>
<li>Debug，一行行分析代码</li>
</ul>
<p>MAT，Jprofiler作用：</p>
<ul>
<li>分析Dump内存文件，快速定位内存泄漏</li>
<li>获取堆中的数据</li>
<li>获得大的对象</li>
</ul>
<p><code>// -Xms1024m -Xmx1024m -XX:+PrintGCDetails</code>查看GC详细信息</p>
<p><code>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</code>生成对应JProfile文件查看OOM故障原因（JVM在发生内存溢出时自动的生成堆内存快照）</p>
<h2 id="GC-垃圾回收机制"><a href="#GC-垃圾回收机制" class="headerlink" title="GC(垃圾回收机制)"></a>GC(垃圾回收机制)</h2><p>GC的作用区域：堆、方法区</p>
<p>JVM在进行GC时，并不是对这三个区域统一回收。大部分时候，回收都是新生代</p>
<ul>
<li>新生代</li>
<li>幸存区（from，to）</li>
<li>老年区</li>
</ul>
<p>GC两种类：轻GC（普通的GC），重GC（全局GC）</p>
<p><em>题目：</em></p>
<ul>
<li><em>JVM的内存模型和分区，详细到每个区放什么</em></li>
<li><em>对立面的分区有哪些？Eden,from,to,老年区，说说他们的特点</em></li>
<li><em>GC的算法有哪些？标记清除法，标记压缩，复制算法，引用计数器在，怎么用的？</em></li>
<li><em>轻GC和重GC分别在什么时候发生？</em></li>
</ul>
<h2 id="常有算法"><a href="#常有算法" class="headerlink" title="常有算法"></a>常有算法</h2><p><a href="https://blog.csdn.net/weixin_37288522/article/details/103944956">https://blog.csdn.net/weixin_37288522/article/details/103944956</a></p>
<ul>
<li><p><strong>引用计数法</strong>（每个对象分配一个计数器记录调用次数）</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211203340493.png" class title="image-20221211203340493">
</li>
<li><p><strong>复制算法</strong></p>
<p><img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211204224114.png" alt="image-20221211204224114" style="zoom:67%;"></p>
</li>
</ul>
<p>  <img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211204820791.png" alt="image-20221211204820791" style="zoom:67%;"></p>
<ul>
<li>好处：没有内存的碎片</li>
<li><p>坏处：浪费了内存空间：多了一半空间永远是空to（假设对象100%存活-&gt;极端情况）空间换时间</p>
<p><strong>复制算法最佳使用场景</strong>：对象存货度较低的时候；新生区</p>
</li>
</ul>
<ul>
<li><p><strong>标记清除算法</strong></p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211205724334.png" class title="image-20221211205724334">
<ul>
<li>优点：不需要额外的空间</li>
<li>缺点：两次扫描严重浪费时间，会产生内存碎片</li>
</ul>
</li>
<li><p><strong>标记压缩/标记整理</strong></p>
<p>再优化：1.标记 2.压缩 3.清除</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211210547595.png" class title="image-20221211210547595">
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内存效率：</p>
<p>复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度）</p>
<p>内存整齐度：</p>
<p>复制算法=标记压缩算法&gt;标记清除算法</p>
<p>内存利用率：</p>
<p>标记压缩算法=标记清除算法&gt;复制算法</p>
<p>没有最好的算法，只有最合适的算法</p>
<p>GC: 分代收集算法</p>
<p>年轻代：</p>
<ul>
<li>存活率低</li>
<li>复制算法！</li>
</ul>
<p>老年代：</p>
<ul>
<li>区域大：存活率高</li>
<li>标记清除（内存碎片不是太多） + 标记压缩混合实现</li>
</ul>
<p>推荐书籍《深入理解JVM》</p>
<h2 id="JMM（Java-Memory-Model）"><a href="#JMM（Java-Memory-Model）" class="headerlink" title="JMM（Java Memory Model）"></a>JMM（Java Memory Model）</h2><ul>
<li><p>什么是JMM</p>
<p>Java内存模型</p>
</li>
<li><p>用途：</p>
<p>缓存一致性协议，用于定义数据读写的规则</p>
<p>JMM定义了线程工作内存和主内存之间的抽象关系：线程之间的共享变量存储在主内存(main memory)中，每个线程都有一个私有的本地内存(local memory)</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211212631378.png" class title="image-20221211212631378">
<p>解决共享对象可见性的问题：voliate</p>
</li>
<li><p>学习过程：</p>
<p>voliate：</p>
<p>“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”<br>lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：<br>1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；<br>2）它会强制将对缓存的修改操作立即写入主存；<br>3）如果是写操作，它会导致其他CPU中对应的缓存行无效。</p>
<img src="/2022/12/16/jvm%E5%AD%A6%E4%B9%A0/image-20221211213154825.png" class title="image-20221211213154825">
<p>详见<a href="https://blog.csdn.net/qq_35757264/article/details/124493844">https://blog.csdn.net/qq_35757264/article/details/124493844</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实战</title>
    <url>/2022/07/09/vue%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<ul>
<li>前言：统一概念</li>
<li>技术架构和设计原则</li>
<li>技术开发指导</li>
<li>前端工程性能安全</li>
</ul>
<span id="more"></span>
<h1 id="vue工程开发"><a href="#vue工程开发" class="headerlink" title="vue工程开发"></a>vue工程开发</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="统一概念"><a href="#统一概念" class="headerlink" title="统一概念"></a>统一概念</h3><ul>
<li><p>UI：用户界面</p>
</li>
<li><p>UE：用户设计体验</p>
</li>
</ul>
<p>前端开发整体流程：</p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709093336928.png" class title="image-20220709093336928">
<h2 id="设计架构和设计原则"><a href="#设计架构和设计原则" class="headerlink" title="设计架构和设计原则"></a>设计架构和设计原则</h2><h3 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h3><p>上下文：</p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709094222447.png" class title="image-20220709094222447">
<p>前端框架总体架构：</p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709094237007.png" class title="image-20220709094237007">
<h3 id="设计原则与规范交付"><a href="#设计原则与规范交付" class="headerlink" title="设计原则与规范交付"></a>设计原则与规范交付</h3><h4 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h4><ol>
<li><p>模块化</p>
<ul>
<li>AMD：<ul>
<li>Requirejs</li>
<li>浏览器端、异步加载、依赖前置</li>
</ul>
</li>
<li>CMD：<ul>
<li>Seajs</li>
<li>浏览器端、串行加载、就近依赖</li>
</ul>
</li>
<li>CommonJS：<ul>
<li>Nodejs</li>
<li>服务器端、同步加载、依赖前置</li>
</ul>
</li>
</ul>
</li>
<li><p>组件化</p>
<p>标准性、组合性、复用性、维护性</p>
</li>
<li><p>规范化</p>
<ul>
<li>目的：为了提供工作效率，便于后续人员添加功能、优化维护</li>
<li>原则：符合web标准，使结构、表现、行为分离，兼容性优良</li>
</ul>
</li>
<li><p>自动化</p>
<ul>
<li>目的：提高生产效率，凡是可以由机器来完成的就让机器完成</li>
<li>原则：请求资源合并、持续集成、自动化构建、自动化部署</li>
</ul>
</li>
<li><p>质量安全</p>
<ul>
<li>目的：提高生产系统安全性</li>
<li>在设计、开发过程中要规避安全问题，满足开发安全规范</li>
</ul>
</li>
</ol>
<p><strong>技术栈全景</strong></p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709100316501.png" class title="image-20220709100316501">
<h4 id="设计文档规范"><a href="#设计文档规范" class="headerlink" title="设计文档规范"></a>设计文档规范</h4><ol>
<li><p>功能描述及重点</p>
<p>例如：描述：连通国际用户登录自主门户，办理业务并完成缴费</p>
<p>重点：余额支付、银行支付、银行托收支付</p>
</li>
<li><p>界面设计</p>
<p>界面布局，对界面设计是否合理</p>
</li>
<li><p>业务流程</p>
<p>描述该业务处理流程，使用VISIO图或者XMIND图描述</p>
</li>
<li><p>交互时间</p>
<p>事件响应时间标准：</p>
<p>3G网络反应：大概100 ms</p>
<p>4G网络反应：20~80 ms</p>
<p>5G网络反应：1 ms</p>
</li>
<li><p>交互流程</p>
<p>描述与其它产品平台/技术平台的交互流程，使用时序图描述</p>
</li>
<li><p>接口说明</p>
<p>描述设计到的接口极其相关出入参，可以保存与后端协定的出、入参文档</p>
</li>
<li><p>测试资源</p>
<p>环境：测试/生产/准生产</p>
<p>测试号：XXX</p>
</li>
</ol>
<h2 id="技术开发指导"><a href="#技术开发指导" class="headerlink" title="技术开发指导"></a>技术开发指导</h2><p>技术能力图</p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709110912091.png" class title="image-20220709110912091">
<h3 id="技术开发规范指导"><a href="#技术开发规范指导" class="headerlink" title="技术开发规范指导"></a>技术开发规范指导</h3><p>全家桶：</p>
<ul>
<li>vue-cli：<ul>
<li>脚手架</li>
<li>降低了构建难度，引入了各种模块工具，前端人员只需要关注开发即可</li>
</ul>
</li>
<li>vuex：<ul>
<li>状态管理</li>
<li>大型页面应用多个组件高效状态管理，弥补单向数据流很容易被破坏的不足</li>
</ul>
</li>
<li>axios：<ul>
<li>数据交互</li>
<li>基于promise的HTTP库，支持拦截请求和响应，请求数据的封装转换</li>
<li>vue-resource已经停止更新</li>
</ul>
</li>
<li>vue-router：<ul>
<li>路由规则</li>
<li>vue路由框架通过组合组件来组成aoo应用程序</li>
</ul>
</li>
<li>vue：<ul>
<li>vue基础</li>
<li>专注于MVVM模型的ViewModel层，通过双向数据绑定把View层和Model层连接</li>
</ul>
</li>
</ul>
<p><strong>vue的优势</strong></p>
<p>文件小，可复用性，性能快，渲染强，跨平台</p>
<p><strong>生命周期说明与对比</strong></p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709112238398.png" class title="image-20220709112238398">
<h3 id="调试方案"><a href="#调试方案" class="headerlink" title="调试方案"></a>调试方案</h3><p><strong>vue-devtool</strong></p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709114346240.png" class title="image-20220709114346240">
<p><strong>手机端：vConsole</strong></p>
<p><strong>Fiddler调试</strong></p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709114723187.png" class title="image-20220709114723187">
<h3 id="运营插码方案"><a href="#运营插码方案" class="headerlink" title="运营插码方案"></a>运营插码方案</h3><p>采集用户操作，便于后台分析用户行为</p>
<img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709115110076.png" class title="image-20220709115110076">
<h2 id="前端工程性能安全"><a href="#前端工程性能安全" class="headerlink" title="前端工程性能安全"></a>前端工程性能安全</h2><h3 id="前端性能规范"><a href="#前端性能规范" class="headerlink" title="前端性能规范"></a>前端性能规范</h3><img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709115217104.png" class title="image-20220709115217104">
<h3 id="安全规范"><a href="#安全规范" class="headerlink" title="安全规范"></a>安全规范</h3><img src="/2022/07/09/vue%E5%AE%9E%E6%88%98/image-20220709115529005.png" class title="image-20220709115529005">
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>商务沟通英语.md</title>
    <url>/2022/05/27/%E5%95%86%E5%8A%A1%E6%B2%9F%E9%80%9A%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>This is a sum up for my business English class for oral test next Monday.</p>
<span id="more"></span>
<h2 id="test-structure"><a href="#test-structure" class="headerlink" title="test structure"></a>test structure</h2><ol>
<li>调整产业结构</li>
<li>resume</li>
<li>interview question （STAR)</li>
<li>memo and minutes</li>
<li>products (形容)</li>
<li>brands (4P)</li>
</ol>
<h2 id="1-职业Occupation"><a href="#1-职业Occupation" class="headerlink" title="1.职业Occupation"></a>1.职业Occupation</h2><p><strong>提问职业：</strong></p>
<ul>
<li>What do you do?</li>
<li>What kind/sort of work do you do?</li>
<li>What line of work are you in?</li>
<li>What do you do for a living?</li>
</ul>
<p><strong>职业形式口语：</strong></p>
<ul>
<li>self-employed 自营业</li>
<li>salesperson 营销人员</li>
<li>do a voluntary job/social service in an non-profit organization</li>
<li>part-timer 兼职</li>
<li>freelancer 自由职业者</li>
<li>on a break/sabbatical产假</li>
<li>nine to five 朝九晚五</li>
<li>regular work hours </li>
<li>clock in 上班打卡 clock out 下班打卡</li>
<li>in shifts 倒班</li>
</ul>
<p><strong>单词短语认知：</strong></p>
<ul>
<li>internship 实习</li>
<li>we are from all works of life 各行各业</li>
<li>She is a bread winner 养家糊口</li>
<li>work for government 公务员</li>
<li>trainee 培训师</li>
<li>benefit 奖金，福利</li>
<li>office building 写字楼</li>
<li>stamina 耐力，毅力</li>
<li>exert 努力，尽力</li>
<li>AKA = also known as</li>
<li>receptive 乐于接受得，愿意倾听的</li>
<li>dictate 意味着</li>
<li>It’s really pay off 很值得</li>
</ul>
<h2 id="2-公司Company"><a href="#2-公司Company" class="headerlink" title="2. 公司Company"></a>2. 公司Company</h2><h3 id="section"><a href="#section" class="headerlink" title="section"></a>section</h3><ul>
<li>Human resources 人力资源部门</li>
<li>Sales 销售部门</li>
<li>Production 产品部门</li>
<li>Finance 财政部门</li>
<li>Marketing 营销部门</li>
<li>Purchasing 采购部门</li>
<li>Public relation 公共关系部门</li>
<li>After-sales service 售后服务部门</li>
<li>Quality assurance 质检部门</li>
<li>General affairs 常务部门（后勤）</li>
<li>Administrative office 行政部门</li>
<li>Logistics 物流部门</li>
</ul>
<h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><ul>
<li><p>state-owned enterprise 国企</p>
</li>
<li><p>family-owned enterprise 家族企业</p>
</li>
<li><p>listed/quoted company 上市企业</p>
</li>
<li><p>privately-owned enterprise 私企</p>
</li>
<li>Sino-foreign joint venture 中外合资企业</li>
<li>multinational corporation 跨国公司</li>
<li>group corporation 集团公司</li>
</ul>
<h3 id="relation"><a href="#relation" class="headerlink" title="relation"></a>relation</h3><p>branches 分公司</p>
<p>outlets 专营店，经销店，卖场</p>
<p>subsidiary 子公司</p>
<p>head office 总公司</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>turnover 销售额</p>
<p>share price 股票价格</p>
<p>profit 盈利</p>
<p>workforce 劳动力</p>
<p><strong>单词短语认知：</strong></p>
<ul>
<li>law firm 律师事务所</li>
<li>warehouse 仓库</li>
<li>call center</li>
<li>distribution center</li>
<li>service center</li>
<li>consignment 货物</li>
<li>time-honored 前瞻的</li>
<li>newly established company</li>
<li>perk 额外收入 津贴 特殊待遇 好处</li>
<li>measuring performance 绩效考核</li>
<li>accountable 追究责任的</li>
<li>hot desk 公用办公桌</li>
<li>five-star hotel</li>
<li>We haven’t seen for ages</li>
<li>oversee 审查</li>
<li>approve 审批</li>
<li>regional 其余的</li>
<li>net profit 净利润</li>
<li>plunge 跳水</li>
<li>highly competitive</li>
<li>flat sell 销售不景气</li>
<li>segment 划分</li>
<li>out of hand 无法控制；托收；告终；立即</li>
<li>cough up 咳出；勉强说出；被迫付出</li>
<li>breach of contract 违约；违反合同</li>
<li>fine print （合同、协议的）附属细则，小字</li>
<li>initial v. 签名（姓名首字母）n. 首字母 a. 最初的，开始的，第一的 </li>
<li>future-oriented 面向未来的</li>
<li>customer-driven 客户导向的</li>
<li>values-driven 价值导向的</li>
</ul>
<p><strong>优美句子：</strong></p>
<p>it offers <strong>flexible work schedules</strong>, compressed work weeks,and <strong>a generous telecommuting policy</strong>——as well as a gym with two personal trainers and an <strong>on-site car wash</strong>, of course.</p>
<p>In Microsoft, employees enjoy a range of legendary including dry cleaning, a Wifi-enabled shuttle service,and valet parking at some buildings.</p>
<p>Women hold more than 30% of the <strong>Top 500</strong> positions at Amex, high for financial services. ALL employees have access to <strong>on-site medical service</strong> as well as a “health navigation concierge to help” <strong>maximize their benefits</strong>. </p>
<p><strong>翻译：</strong></p>
<p> 我在华为公司的销售部门工作已经快十年了。这是国内非常有名的私企，而且是一家跨国公司。虽然每天我都要打卡上下班，但是工作给我带来了很大的满足感。公司的领导相信自主性，也关注责任感，并且十分注重业绩评估。值得一提的是，华为的福利待遇很好，我们可以享受弹性工作制，上班时间是可以压缩的，只要项目做完就好，并且还可以远程办公。在华为工作真是一件幸福的事情</p>
<p>I have been working in the Sales Department of Huawei for nearly ten years. This is a very famous private enterprise in China, and it is a multinational company. Although I have to clock in and out every day, work has brought me great satisfaction. The leaders of the company believe in autonomy, also pay attention to the sense of responsibility, and attach great importance to performance evaluation. It is worth mentioning that Huawei has very good welfare benefits. We can enjoy a flexible working schedules. Working hours can be compressed. As long as the project is completed, we can also work in telecommuting. Some happy to work in Huawei.</p>
<h2 id="3-resume-curriculum-vitae"><a href="#3-resume-curriculum-vitae" class="headerlink" title="3. resume/curriculum vitae"></a>3. resume/curriculum vitae</h2><h3 id="structure"><a href="#structure" class="headerlink" title="structure"></a>structure</h3><p>Contact information</p>
<p>Objective</p>
<p>Education</p>
<p>Experience</p>
<p>Honors&amp;Activities</p>
<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul>
<li><p>applicant 申请人</p>
</li>
<li><p>participant 参与者（I’m an active participant)</p>
</li>
<li><p>post-graduate （博士、舒适）研究生</p>
</li>
<li><p>astrological sign 星座</p>
</li>
<li>induction 引导，归纳</li>
<li>mentor 导师</li>
<li>psychometic test 心理压力测试</li>
<li>probationary period 试用期</li>
<li>concentration 专业方向</li>
<li>marital status 婚姻状况</li>
<li>class assistant 课代表</li>
<li>interchangeable 可互换的，可交换的，可交替的</li>
<li>asperation 渴望，抱负</li>
<li>slouch 懒散的</li>
<li>wrinkled 褶皱的</li>
<li>linger 逗留</li>
<li>sign a format contract ，full-time contract 转正</li>
</ul>
<h3 id="quality"><a href="#quality" class="headerlink" title="quality"></a>quality</h3><ul>
<li>self-discipline 自律</li>
<li>diligent and thrifty 勤俭节约</li>
<li>passionate 热诚的</li>
<li>keep improving 精益求精</li>
<li>focus 、earnest 认真的</li>
<li>sociablilty 善于交际的</li>
<li>low profile 低调</li>
<li>valiant 果敢的</li>
<li>responsive 积极反馈的</li>
<li>deliver what I promise 兑现我的承诺</li>
<li>high-calibre staff 得力干将</li>
</ul>
<h3 id="interview"><a href="#interview" class="headerlink" title="interview"></a>interview</h3><ul>
<li>tell me about yourself.</li>
<li>where do you see yourself in five years’ time?</li>
<li>why do you choose our company?</li>
<li><strong>what is your biggest weakness?</strong></li>
<li>what is the most challenging experience in your life?</li>
<li>Please tell me a problem you recently experienced and how you solved it.</li>
<li>Please use three words to describe you.</li>
<li>Why should I hire you?</li>
</ul>
<p>tell a story in an interview:</p>
<p>S(solution)</p>
<p>T(task)</p>
<p>A(action)</p>
<p>R(result)</p>
<h2 id="4-meeting"><a href="#4-meeting" class="headerlink" title="4. meeting"></a>4. meeting</h2><h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><ul>
<li>chairperson</li>
<li>propose 提议</li>
<li>attend</li>
<li>item one 第一项</li>
<li>agenda 会议日程</li>
<li>second 支持，附议</li>
<li>minutes 会议记录</li>
<li>action points 行动方案</li>
<li>to send your apologies</li>
<li>vote</li>
<li>any other business(最后一个topic)</li>
<li>participants</li>
</ul>
<h3 id="杂项-1"><a href="#杂项-1" class="headerlink" title="杂项"></a>杂项</h3><ul>
<li>in conjunction with / in tandem with 合作</li>
<li>duty calls 工作需求来了</li>
<li>nature calls 生理需求</li>
<li>futher probationary 延长试用期</li>
<li>long story short</li>
<li>get down to the business</li>
<li>the purpose of meeting is to</li>
<li>set it aside 搁置</li>
<li>marketing campaign 销售活动</li>
<li>liable 对….负责</li>
<li>demotivated 没有积极性</li>
<li>you name it，I have it 能想到的都有</li>
<li>salary negotiable</li>
<li>irrelevant /off the topic/ lose the point跑题</li>
<li>track record 业绩不错</li>
<li>over confidence 自负</li>
<li>low self-esteem 自卑</li>
<li>few of them are fans of him 不收欢迎</li>
</ul>
<h2 id="5-memo-and-minutes"><a href="#5-memo-and-minutes" class="headerlink" title="5. memo and minutes"></a>5. memo and minutes</h2><ul>
<li><p>What is memo and mimutes？</p>
</li>
<li><p>What is the purpose of writing them?</p>
</li>
<li><p>How to write them?</p>
</li>
</ul>
<h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><h4 id="minutes：（会议记录）"><a href="#minutes：（会议记录）" class="headerlink" title="minutes：（会议记录）"></a><strong>minutes：</strong>（会议记录）</h4><p>venue 场所，发生地点</p>
<p>present 到场人</p>
<p>apologies for absence 缺席人</p>
<p>new proposals 新提案</p>
<p>resolution 决议</p>
<p>adjournment 休会 </p>
<h4 id="memo：（便函）"><a href="#memo：（便函）" class="headerlink" title="memo：（便函）"></a>memo：（便函）</h4><p>To</p>
<p>From </p>
<p>Date </p>
<p>Subject </p>
<p>（content）body goes here~</p>
<p><strong>场景模拟</strong></p>
<p>A： Good morning,since everyone is here， Let’s get started . The purpose of our meeting today is to discuss the new Department Manager and the arrangements for the May Day holiday. OK, let’s start with item one.</p>
<p>B:  I think Andy is the right person for a marketing manager. It has been doing well in our company for five years and has strong customer communication skills. </p>
<p>C: I think that Andy is over confident, not fit to be the leader.</p>
<p>A: What do you think,Daniel?</p>
<p>D: As far as I know, he’s not welcomed with the team at all.</p>
<p>B: But Andy raised the annual turnover by 20%. I think you’re off the point.</p>
<p>A: Can you let him finish, bill? No matter how strong a person’s working ability is, it’s difficult to be a good leader if he can’t bear the weight（服众）.</p>
<p>C: exactly, we need to spend more time watching him.</p>
<p>A: If no one has supplement, let’s move  to the next topic. </p>
<h2 id="6-product"><a href="#6-product" class="headerlink" title="6. product"></a>6. product</h2><h3 id="形容"><a href="#形容" class="headerlink" title="形容"></a>形容</h3><ul>
<li>high-tech</li>
<li>hard wearing 耐用的;耐磨的;经穿的</li>
<li>high-quality</li>
<li>best-selling / best seller 畅销</li>
<li>long-lasting</li>
<li>well-made</li>
<li>well-designed</li>
<li>attractive</li>
<li>fashionable</li>
<li>stylish</li>
<li>robust 强健的;强劲的;强壮的;结实的;耐用的</li>
<li>user-friendly</li>
<li>reliable 可信赖的</li>
<li>flexible</li>
<li>popular</li>
<li>practical 适用的</li>
<li>elegant</li>
<li>waterproof</li>
<li>simple to use</li>
<li>good/great value for money</li>
</ul>
<h2 id="7-brand"><a href="#7-brand" class="headerlink" title="7. brand"></a>7. brand</h2><h3 id="专业术语-1"><a href="#专业术语-1" class="headerlink" title="专业术语"></a>专业术语</h3><ul>
<li>brand image</li>
<li>brand loyalty 品牌信任度</li>
<li>brand stretching 品牌扩展/延伸（一个品牌多重产品）</li>
<li>multiple brands 品牌多元化（多种品牌不同价位）</li>
<li>product lifecycle  产品生命周期</li>
<li>product placement 产品投放</li>
<li>product endorsement 产品代言</li>
<li>product launch 产品发布</li>
</ul>
<h3 id="marketing-strategies（4P）"><a href="#marketing-strategies（4P）" class="headerlink" title="marketing strategies（4P）"></a>marketing strategies（4P）</h3><ul>
<li>product</li>
<li>price</li>
<li>place</li>
<li>promotion</li>
</ul>
<h3 id="美句"><a href="#美句" class="headerlink" title="美句"></a>美句</h3><p>The campaign was badly <strong>planned</strong>, badly <strong>budgeted</strong> and it resulted in a lot of negative <strong>publicity</strong> for the company.</p>
<h3 id="杂项-2"><a href="#杂项-2" class="headerlink" title="杂项"></a>杂项</h3><ul>
<li>up market 高端市场</li>
<li>lower end of the market 低端市场</li>
<li>specialist shop 专卖店</li>
<li>pie chart 饼状图</li>
<li>graph 柱状图</li>
<li>table 表格</li>
<li>exclusive 独有的，专用的</li>
<li>sense of urgency 紧迫感</li>
<li>sales channels 销售渠道</li>
<li>customer orientation 用户导向</li>
</ul>
]]></content>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发简述</title>
    <url>/2021/10/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>综设项目滴需求，这里就开个坑吧 hhh</p>
<span id="more"></span>
<h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><p>微信原生组件JS API （WeixinJSBridge)—》 JS-SDK （开发了功能多样的API）</p>
<p>JS-SDK特点：</p>
<ul>
<li>对内开放-&gt;开源，全部开放</li>
<li>通过暴露微信的接口是的Web开发者能够拥有更多能力</li>
</ul>
<p>为了更好的用户体验，通过采用小程序的方式达到分工明确，高效简单的开发，从而使用户体验更丝滑~</p>
<p>优势：</p>
<ul>
<li>快速地加载</li>
<li>更强大的能力</li>
<li>原生的体验</li>
<li>易用且安全的微信数据开放</li>
<li>高效和简单的开发</li>
</ul>
<p>小程序开发特点：</p>
<ul>
<li><p>主要开发语言是JS</p>
</li>
<li><p>网页开发渲染线程和脚本线程是分开的</p>
</li>
<li>没有一个完整浏览器对象，因而缺乏相关的DOM API和BOM API</li>
<li>一些前端开发的库(jQuery）无法使用</li>
<li>一些NPM包无法运行</li>
<li>面对两大操作系统：iOS &amp; Android</li>
<li>开发环境：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>运行环境</strong></th>
<th style="text-align:left"><strong>逻辑层</strong></th>
<th style="text-align:left"><strong>渲染层</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">iOS</td>
<td style="text-align:left">JavaScriptCore</td>
<td style="text-align:left">WKWebView</td>
</tr>
<tr>
<td style="text-align:left">安卓</td>
<td style="text-align:left">V8</td>
<td style="text-align:left">chromium定制内核</td>
</tr>
<tr>
<td style="text-align:left">小程序开发者工具</td>
<td style="text-align:left">NWJS</td>
<td style="text-align:left">Chrome WebView</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>开发流程：申请小程序账号、安装小程序开发工具、配置项目等</li>
</ul>
<p>小程序的开发框架：</p>
<ul>
<li>wepy</li>
<li>mpvue</li>
<li>taro</li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>小程序包含一个描述整体程序的 <code>app</code> 和多个描述各自页面的 <code>page</code>。</p>
<p>一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">文件</th>
<th style="text-align:left">必需</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">app.js</a></td>
<td style="text-align:left">是</td>
<td style="text-align:left">小程序逻辑</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">app.json</a></td>
<td style="text-align:left">是</td>
<td style="text-align:left">小程序公共配置</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">app.wxss</a></td>
<td style="text-align:left">否</td>
<td style="text-align:left">小程序公共样式表</td>
</tr>
</tbody>
</table>
</div>
<p>一个小程序页面由四个文件组成，分别是：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">文件类型</th>
<th style="text-align:left">必需</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">js</a></td>
<td style="text-align:left">是</td>
<td style="text-align:left">页面逻辑</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/">wxml</a></td>
<td style="text-align:left">是</td>
<td style="text-align:left">页面结构</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#页面配置">json</a></td>
<td style="text-align:left">否</td>
<td style="text-align:left">页面配置</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">wxss</a></td>
<td style="text-align:left">否</td>
<td style="text-align:left">页面样式表</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</strong></p>
<h2 id="小程序代码构成"><a href="#小程序代码构成" class="headerlink" title="小程序代码构成"></a>小程序代码构成</h2><ul>
<li><code>.json</code></li>
<li><code>.wxml</code></li>
<li><code>.wxss</code></li>
<li><code>.js</code></li>
</ul>
<p><strong>json数据</strong>：小程序中的json数据格式和JS对象表达方式有所不同：</p>
<ul>
<li>JSON文件都是被包裹在一个大括号中 {}，通过key-value的方式来表达数据。</li>
<li>JSON的Key必须包裹在一个双引号中</li>
<li>JSON的值只能是以下几种数据格式：<ol>
<li>数字，包含浮点数和整数</li>
<li>字符串，需要包裹在双引号中</li>
<li>Bool值，true 或者 false</li>
<li>数组，需要包裹在方括号中 []</li>
<li>对象，需要包裹在大括号中 {}</li>
<li>Null</li>
</ol>
</li>
<li>JSON文件无法使用注释</li>
</ul>
<h3 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h3><p>小程序的全局配置：所有页面路径、界面表现、网络超时时间、底部tab等。</p>
<ol>
<li><code>pages</code>字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li>
<li><code>window</code>字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;pages&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;window&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span>:<span class="string">&quot;light&quot;</span>,<span class="comment">//导航栏标题颜色</span></span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#fff&quot;</span>,<span class="comment">//窗口的背景色	</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;Weixin&quot;</span>,<span class="comment">//导航栏标题文字内容</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span>:<span class="string">&quot;black&quot;</span><span class="comment">//导航栏背景颜色</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="project-config-json"><a href="#project-config-json" class="headerlink" title="project.config.json"></a>project.config.json</h3><p>工具配置：其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。</p>
<h3 id="page-json"><a href="#page-json" class="headerlink" title="page.json"></a>page.json</h3><p>页面配置：具体到每一个页面（如index.json)的配置。</p>
<h3 id="WXML模板"><a href="#WXML模板" class="headerlink" title="WXML模板"></a>WXML模板</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;userinfo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;&quot;</span>&gt;</span> 获取头像昵称 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;userInfo.avatarUrl&#125;&#125;&quot;</span> <span class="attr">background-size</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;userinfo-nickname&quot;</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;usermotto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;user-motto&quot;</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>与html的区别：</p>
<ul>
<li>标签名字：从上边的例子可以看到，小程序的 <code>WXML</code> 用的标签是 <code>view</code>, <code>button</code>, <code>text</code> 等等，这些标签就是小程序给开发者包装好的基本能力，还提供了地图、视频、音频等等组件能力。</li>
<li>多了一些 <code>wx:if</code> 这样的属性以及 <code>&#123;&#123; &#125;&#125;</code> 这样的表达式</li>
</ul>
<p><em>React、Vue体长把渲染和逻辑分离，就是不让<code>JS</code>直接操控<code>DOM</code>，<code>JS</code> 只需要管理状态即可，然后再通过一种模板语法来描述状态和界面结构的关系即可。</em></p>
<p>小程序的框架也是用到了这个思路，如果你需要把一个 <code>Hello World</code> 的字符串显示在界面上。</p>
<p>WXML 是这么写 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JS 只需要管理状态即可:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setData(&#123; <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>通过 <code>&#123;&#123; &#125;&#125;</code> 的语法把一个变量绑定到界面上，我们称为<strong>数据绑定</strong>。仅仅通过数据绑定还不够完整的描述状态和界面的关系，还需要 <code>if</code>/<code>else</code>, <code>for</code>等控制能力，在小程序里边，这些控制能力都用 <code>wx:</code> 开头的属性来表达。</p>
<h3 id="WXSS样式"><a href="#WXSS样式" class="headerlink" title="WXSS样式"></a>WXSS样式</h3><p>与CSS相比的一些扩充和修改：</p>
<ul>
<li><p>新增了尺寸单位。<code>rpx</code></p>
</li>
<li><p>提供了全局的样式（<code>app.wxss</code>）和局部样式（<code>page.wss</code>）</p>
</li>
<li>WXSS仅支持部分CSS选择器</li>
</ul>
<h3 id="JS逻辑交互"><a href="#JS逻辑交互" class="headerlink" title="JS逻辑交互"></a>JS逻辑交互</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击 <code>button</code> 按钮的时候，我们希望把界面上 <code>msg</code> 显示成 <code>&quot;Hello World&quot;</code>，于是我们在 <code>button</code> 上声明一个属性: <code>bindtap</code> ，在 JS 文件里边声明了 <code>clickMe</code> 方法来响应这次点击操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  clickMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123; <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>小程序的运行环境也称为宿主环境，由微信客户端提供。</p>
<p>其分为<strong>渲染层</strong>（WXML、WXSS）和<strong>逻辑层</strong>（JS）。</p>
<ul>
<li>渲染层的界面使用了WebView 进行渲染（多个页面多个线程）</li>
<li>逻辑层采用JsCore线程运行JS脚本</li>
<li>Native指微信客户端</li>
</ul>
<p><img src="/2021/10/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/01.png" alt="01"></p>
<h2 id="程序与页面"><a href="#程序与页面" class="headerlink" title="程序与页面"></a>程序与页面</h2><p><code>app.json</code>中写在<code>pages</code>的字段的第一个页面就是小程序的首页。</p>
<p>两个回调：</p>
<ol>
<li><code>app.js</code>中定义的<code>App</code>实例的<code>onLaunch</code>回调会被执行：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 小程序启动之后 触发</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>整个小程序只有一个 App 实例，是全部页面共享的。</p>
<ol>
<li>page.json-&gt;page.wxml、page.wess-&gt;page.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123; <span class="comment">// 参与页面渲染的数据</span></span><br><span class="line">    logs: []</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面渲染后 执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>Page</code> 是一个页面构造器，这个构造器就生成了一个页面。在生成页面的时候，小程序框架会把 <code>data</code> 数据和 <code>index.wxml</code> 一起渲染出最终的结构，于是就得到了你看到的小程序的样子。</p>
<p>在渲染完界面之后，页面实例就会收到一个 <code>onLoad</code> 的回调，<strong>在这个回调处理逻辑</strong>。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>相当于HTML中的标签</p>
<p>显示地图：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>希望地图一开始的中心的经纬度是广州：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">longitude</span>=<span class="string">&quot;广州经度&quot;</span> <span class="attr">latitude</span>=<span class="string">&quot;广州纬度&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用户点击了地图上的某个标记：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">bindmarkertap</span>=<span class="string">&quot;markertap&quot;</span> <span class="attr">longitude</span>=<span class="string">&quot;广州经度&quot;</span> <span class="attr">latitude</span>=<span class="string">&quot;广州纬度&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>小程序提供了很多API给开发者使用。</p>
<p>获取用户地理位置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.getLocation(&#123;</span><br><span class="line">    type: <span class="string">&#x27;wgs84&#x27;</span>,</span><br><span class="line">    success: <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> latitude = res.latitude<span class="comment">//纬度</span></span><br><span class="line">        <span class="keyword">var</span> longtitude = res.longitude<span class="comment">//经度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>微信扫一扫：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.scanCode(&#123;</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>需要注意的是：多数 API 的回调都是异步，你需要处理好代码逻辑的异步问题。</p>
]]></content>
      <categories>
        <category>Wx-Programming</category>
      </categories>
  </entry>
  <entry>
    <title>微服务技术讲解</title>
    <url>/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<ul>
<li>微服务的产生</li>
<li>微服务原理</li>
<li>微服务的实践</li>
<li>微服务其他</li>
</ul>
<span id="more"></span>
<h1 id="微服务的产生"><a href="#微服务的产生" class="headerlink" title="微服务的产生"></a>微服务的产生</h1><p>SOA解决的三个问题：</p>
<ul>
<li>信息孤岛</li>
<li>互联互通</li>
<li>业务重用</li>
</ul>
<h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><p>简称：MSA</p>
<p><strong>特征</strong>：</p>
<ul>
<li>由一组小的服务组成一个完整的应用（或网站）</li>
<li>每个服务围绕一个相对独立的业务领域（领域模型）构建</li>
<li>服务之间通过轻量级的通信机制相互沟通</li>
<li>完全去中心化</li>
<li>每个服务都可以独立无数</li>
<li>每个服务可以使用不同的编程语言实现</li>
</ul>
<p><strong>发展历程</strong>：</p>
<ol>
<li>单体程序</li>
<li>Pre-SOA(紧耦合)</li>
<li>Traditional SOA(松耦合)</li>
<li>Microsevices(解耦和）</li>
</ol>
<p>SOA和微服务的<strong>区别</strong>:</p>
<ul>
<li><p>微服务不再强调传统SOA架构里面比较重的ESB企业服务总线</p>
</li>
<li><p>SOA的思想进入到单个业务系统内部实现真正的组件化</p>
</li>
</ul>
<p>SOA和微服务的<strong>共同点</strong>:</p>
<ul>
<li><p>服务化</p>
</li>
<li><p>敏捷快速</p>
</li>
</ul>
<p><strong>架构设计发展</strong>：</p>
<ul>
<li>MVC（视图、业务逻辑前后端分离）</li>
<li>SOA（大型系统分层解耦）</li>
<li>Micro services （云计算产物，关注敏捷交付）</li>
</ul>
<p>最大优点:</p>
<ol>
<li><p>所有功能(服务)可以单独小应用部署，实现真正意义上的“横向扩充”(理论上对服务进行各种方式单独或组合部署)，解决“数据<br>库瓶颈”、”不同模块(服务)对硬件资源冲突的隔离</p>
</li>
<li><p>因为独立，所以可以快速迭代，易部署</p>
</li>
</ol>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220702234549878.png" class title="image-20220702234549878">
<p><strong>功能</strong>：</p>
<ol>
<li><p>服务自动注册：</p>
<p>（1）告诉API网关有这么一个服务可以对外供调用了</p>
<p>（2）自动加入复杂均衡副本机制</p>
</li>
<li><p>服务优雅降级，与”服务自动注册”相反</p>
</li>
<li><p>负载均衡</p>
</li>
<li><p>流量管控、访问黑名单机制</p>
</li>
<li><p>基于容器（如Docker）小应用（AP）部署</p>
</li>
<li><p>提供一个总服务来对其他服务进行组合调用（对组合中成员实现同步执行、异步执行机制）</p>
</li>
<li><p>实现分布式事务</p>
</li>
</ol>
<h1 id="微服务的实现"><a href="#微服务的实现" class="headerlink" title="微服务的实现"></a>微服务的实现</h1><p><strong>微服务架构工作流程</strong>：</p>
<ul>
<li>设计阶段：<ul>
<li>将产品功能拆分为若干服务</li>
<li>为每个服务设计API接口</li>
</ul>
</li>
<li>开发阶段：<ul>
<li>实现API接口（包括单元测试）</li>
<li>开发UI原型（页面）</li>
</ul>
</li>
<li>测试阶段：<ul>
<li>前后端集成</li>
<li>验证产品功能</li>
</ul>
</li>
<li>部署阶段<ul>
<li>发布测试环境</li>
<li>发布生产环境</li>
</ul>
</li>
</ul>
<p><strong>基础知识</strong>：</p>
<ul>
<li>领域驱动设计（Domain Driven Design）</li>
</ul>
<p>DDD是一种以<strong>领域</strong>为核心的设计和开发理念。DDD通过维护一个深度反映领域概念的模型，以及提供了可行的经过实践检验的大梁模型来硬度领域的复杂性，偏向代码实现的（领域）对象。</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703082420878.png" class title="image-20220703082420878">
<ul>
<li><p>Restful API 的设计</p>
</li>
<li><p>一种开发框架：</p>
<ul>
<li>Java</li>
<li>.NET</li>
<li>Node.js</li>
<li>Python</li>
<li>Ruby</li>
</ul>
</li>
</ul>
<p><strong>微服务与GRASP</strong></p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703083622771.png" class title="image-20220703083622771">
<p><strong>微服务与GRASP基本原则</strong></p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703083730741.png" class title="image-20220703083730741">
<h3 id="微服务主要技术"><a href="#微服务主要技术" class="headerlink" title="微服务主要技术"></a>微服务主要技术</h3><ol>
<li><strong>Dubbo</strong>（开源分布式服务框架）:</li>
</ol>
<p>阿里公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC实现服务的输出和输入功能</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703084203827.png" class title="image-20220703084203827">
<p>Remoting：网络通信框架，实现了sync-over-async和Logo request-response消息机制</p>
<p>RPC：一个远程过程调用的抽象，支持复杂均衡、容灾和集群功能</p>
<p>Registry：服务目录框架用于服务的注册和服务时间发布和订阅</p>
<ol>
<li><strong>Spring Cloud</strong>:</li>
</ol>
<p>一系列框架的有序集合：</p>
<ul>
<li>利用Spring Boot的开发便利性</li>
<li>Spring Cloud Eureka（服务治理）</li>
<li>Spring Cloud Netflix（服务发现、注册、负载就能、断路器、REST客户端、请求路由）、</li>
<li>Spring Cloud Zookeeper （注册中心）</li>
<li>Spring Cloud Bus （实现可靠消息）</li>
<li>Spring Cloud Config （将配置信息中央化保存）</li>
<li>Spring Cloud Security （实现服务安全）</li>
</ul>
<ol>
<li><strong>Docker</strong>：</li>
</ol>
<p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可一直的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703090123180.png" class title="image-20220703090123180">
<p>应用场景：</p>
<ul>
<li>使应用的打包与部署自动化</li>
<li>创建轻量、私密的PAAS环境</li>
<li>实现自动化测试和持续的集成/部署</li>
<li>部署与扩展webapp、数据库和后台服务</li>
</ul>
<p>优势：</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703092616529.png" class title="image-20220703092616529">
<ol>
<li><strong>jenkins</strong>：</li>
</ol>
<p>是一个开源软件项目，是基于Java开发的一种<strong>持续集成</strong>工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成编程可能。</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703090412203.png" class title="image-20220703090412203">
<p>功能：</p>
<ul>
<li>持续的软件版本发布/测试项目</li>
<li>监控外部调用执行的工作</li>
</ul>
<p>微服务应用平台总体架构</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703090758339.png" class title="image-20220703090758339">
<p>微服务应用平台运行架构</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703090840717.png" class title="image-20220703090840717">
<p><strong>微服务应用设计原则</strong></p>
<ul>
<li><p>AKF扩展拆分</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703091513131.png" class title="image-20220703091513131">
</li>
<li><p>前后端分离</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703091639666.png" class title="image-20220703091639666">
</li>
<li><p>无状态服务</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703091705670.png" class title="image-20220703091705670">
</li>
<li><p>Rest通讯风格</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703091822183.png" class title="image-20220703091822183">
</li>
</ul>
<p><strong>服务之间选择轻量级的通信协议</strong></p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703092010416.png" class title="image-20220703092010416">
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703092040814.png" class title="image-20220703092040814">
<p><strong>选择编程语言</strong></p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703092205439.png" class title="image-20220703092205439">
<p><strong>服务的独立部署</strong></p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703092307267.png" class title="image-20220703092307267">
<p><strong>服务的去中心化</strong></p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703092418975.png" class title="image-20220703092418975">
<p><strong>解决大量微服务引入的运维成本</strong></p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703092451023.png" class title="image-20220703092451023">
<h1 id="微服务扩展知识"><a href="#微服务扩展知识" class="headerlink" title="微服务扩展知识"></a>微服务扩展知识</h1><p>微服务带来挑战：</p>
<ul>
<li>依赖服务接口变更<ul>
<li>服务接口如何管理</li>
<li>接口变更跟踪难</li>
<li>依赖服务调试麻烦</li>
</ul>
</li>
<li>部分模块重复构建<ul>
<li>安全认证</li>
<li>配置日志</li>
</ul>
</li>
<li>分布式带来的问题<ul>
<li>分布式事务问题</li>
<li>依赖服务不稳定’</li>
<li>需要引入异步模式</li>
</ul>
</li>
<li>运维复杂度陡增<ul>
<li>部署物数量倍增</li>
<li>监控进程倍增</li>
<li>故障定位难</li>
<li>问题追溯难</li>
</ul>
</li>
</ul>
<p>关键问题：</p>
<ul>
<li><p>服务注册和路由</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703093209181-16568119300121.png" class title="image-20220703093209181">
</li>
<li><p>安全认证</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703093241877.png" class title="image-20220703093241877">
</li>
<li><p>集中配置</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703093428452.png" class title="image-20220703093428452">
</li>
<li><p>分布式事务</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703093514198.png" class title="image-20220703093514198">
</li>
<li><p>同步调用</p>
<p>用异步模拟来同步</p>
<img src="/2022/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E8%AE%B2%E8%A7%A3/image-20220703093716892.png" class title="image-20220703093716892">
</li>
</ul>
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-01</title>
    <url>/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/</url>
    <content><![CDATA[<p>开始正式学习机器学习~</p>
<ul>
<li>学习框架总览</li>
<li>监督学习<ul>
<li>回归模型</li>
<li>分类（逻辑回归）</li>
</ul>
</li>
<li>过拟合处理</li>
<li>正则化</li>
</ul>
<span id="more"></span>
<ul>
<li>监督学习</li>
<li>无监督学习</li>
<li>强化学习</li>
</ul>
<p>应用：</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/e55505093922bee81433012e8b59bd5.jpg" class title="e55505093922bee81433012e8b59bd5">
<h1 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h1><p>Supervised Learning</p>
<p>学习input，output，建立x -&gt; y的映射</p>
<ul>
<li><p>Regression 回归 房价预测</p>
</li>
<li><p>Classification  分类 有限的输出类别 肿瘤诊断（良性、恶性）</p>
</li>
</ul>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/fb635b489fdc4860086da261a2061f0.jpg" class title="fb635b489fdc4860086da261a2061f0">
<h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><p>Unsupervised Learning </p>
<p>找到一种结构、模式、或有趣的东西 unlabeled</p>
<ul>
<li>clustering 聚类 （相关文章、遗传聚类、市场细分）</li>
<li>Anomaly detection 异常检测 找异常数点</li>
<li>Dimensionality reduction 降维 数据压缩</li>
</ul>
<h1 id="回归模型"><a href="#回归模型" class="headerlink" title="回归模型"></a>回归模型</h1><p>Regression model</p>
<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>linear regression</p>
<p>训练集 training set</p>
<p>格式：</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/00203c0e7cd2fb1998e543dfb95b3f4.jpg" class title="00203c0e7cd2fb1998e543dfb95b3f4">
<p>表示：</p>
<script type="math/tex; mode=display">
\hat{y} = wx + b</script><img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/42b9cecf9cd3b6c34f262016b1f6592.jpg" class title="42b9cecf9cd3b6c34f262016b1f6592">
<h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>cost function</p>
<p>均方误差代价函数：</p>
<script type="math/tex; mode=display">
J(w, b) = \frac{1}{2m} \sum_{i = 1}^m(\hat{y}^{(i)} - y^{(i)})^2</script><script type="math/tex; mode=display">
J(w, b) = \frac{1}{2m} (\sum_{i = 1}^m\ f_{w, b}(x^{(i)}) - y^i)^2</script><img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/42687af210503aee975e235b094a004.jpg" class title="42687af210503aee975e235b094a004">
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/516fa6b4ca2e359d6f5e2d97da56d84.jpg" class title="516fa6b4ca2e359d6f5e2d97da56d84">
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>Gradient Descent</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/50e646f891ec0d36e9aa97fc98522cd.jpg" class title="50e646f891ec0d36e9aa97fc98522cd">
<p>可以得到局部最优解 local minimum</p>
<p>更新公式如下（update until convergence 收敛）：</p>
<script type="math/tex; mode=display">
w = w - \alpha \frac{\partial}{\partial w}J(w, b)</script><script type="math/tex; mode=display">
b = b - \alpha \frac{\partial}{\partial b}J(w, b)</script><p><strong>simultaneous update</strong> 严格：同步更新</p>
<script type="math/tex; mode=display">
tmp_w = w - \alpha \frac{d}{dw}J(w, b)</script><script type="math/tex; mode=display">
tmp_b = b - \alpha \frac{d}{db}J(w, b)</script><script type="math/tex; mode=display">
w = tmp_w</script><script type="math/tex; mode=display">
b = tmp_b</script><script type="math/tex; mode=display">
\frac{\partial}{\partial w} J(w, b)</script><ol>
<li>导数(偏导数) -&gt; 切线方式</li>
</ol>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/6307cb5d12ca9e0a189f24470b134c5.jpg" class title="6307cb5d12ca9e0a189f24470b134c5">
<ol>
<li>$\alpha$ is learning rate</li>
</ol>
<p>如果$\alpha$ 太小 -&gt; too slow to convergence</p>
<p>如果$\alpha$ 太大 -&gt; overshoot never reach minimum 可能无法收敛，甚至发散(diverge)</p>
<p>注意：固定的学习率可以到达局部最小值</p>
<p>微积分求导：（链式求导）</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/51afb2afeeecae9796978f7fec6f98b.jpg" class title="51afb2afeeecae9796978f7fec6f98b">
<p>总结：</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/38c345d8ec72829ce15d6dcbf14d55f.jpg" class title="38c345d8ec72829ce15d6dcbf14d55f">
<p>线性回归只有一个最小值 -&gt; 凸函数</p>
<p>所以局部最小值就是全局最小值</p>
<h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><p>多特征 -&gt; 向量化 / 矢量化（行向量）</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/e9ed02388f03506c9e980c2b8583248.jpg" class title="e9ed02388f03506c9e980c2b8583248">
<p>向量点乘</p>
<script type="math/tex; mode=display">
f_{\vec{w}, b}(\vec x) = \vec w \cdot \vec x + b</script><img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/bcc27dde30a12f62b20926120966841.jpg" class title="bcc27dde30a12f62b20926120966841">
<p>向量点乘是指对两个向量对应位一一相乘之后求和的操作，点乘的结果是一个标量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = np.array([<span class="number">1.0</span>, <span class="number">2.5</span>, -<span class="number">3.3</span>])</span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">x = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x.shape[<span class="number">0</span>]):</span><br><span class="line">    f = f + w[j] * x[j]</span><br><span class="line">f = f + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># same but much faster</span></span><br><span class="line">f = np.dot(w, x) + b</span><br></pre></td></tr></table></figure>
<p>硬件 + 并行 使得 矢量化运行更快<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/7d8377bfef9cebc9b1db777c915a9bd.jpg" class title="7d8377bfef9cebc9b1db777c915a9bd"></p>
<p>多元回归的梯度下降公式</p>
<script type="math/tex; mode=display">
w_j = w_j - \alpha \frac{1}{m} \sum_{i=1}^{m}(f_{\vec{w}, b}(\vec{x}^{(i)}) - y^{(i)})x_j^{(i)}</script><script type="math/tex; mode=display">
b = b - \alpha \frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w}, b}(\vec{x}^{(i)})-y^{(i)})</script><img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/96dd06e21fb82e17234ea53d0499263.jpg" class title="96dd06e21fb82e17234ea53d0499263">
<p>特征放缩</p>
<p>feature scaling</p>
<p>当有不同的特征取值范围非常不同时，它可能会导致梯度下降运行缓慢，重新缩放不同的特征，使他们都具有可比较的值范围。</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/0028897d987574b272cb46de46bbe2a.jpg" class title="0028897d987574b272cb46de46bbe2a">
<p>归一化 normalization</p>
<p>mean normalization</p>
<script type="math/tex; mode=display">
x_j = \frac{x_j - \mu_j}{max_j - min_j}</script><p>Z-score normalization</p>
<script type="math/tex; mode=display">
x_j = \frac{x_j - \mu_j}{\sigma_j}</script><p>即正态分布</p>
<p>tips：</p>
<ol>
<li><p>确保梯度下降有效进行或判断收敛的方式</p>
<ol>
<li><p>learning curve</p>
</li>
<li><p>automatic convergence test</p>
</li>
</ol>
</li>
</ol>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/abbdb144f465d090f979ba7e5e2a6c6.jpg" class title="abbdb144f465d090f979ba7e5e2a6c6">
<ol>
<li>如何选择好的学习率</li>
</ol>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/58f636aafa99dad6144d26cb26579ba.jpg" class title="58f636aafa99dad6144d26cb26579ba">
<p>try:</p>
<p><code>0.001 0.01 0.1 1</code></p>
<p>可3倍增加</p>
<h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>使用直觉或灵感去设计新的特征变量（通过转换或合并原始特征）</p>
<h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><p>多项式也可以认为成特征工程</p>
<p>拟合起来可以被称为暴力打法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>,<span class="number">20</span>,<span class="number">1</span>)</span><br><span class="line">y = np.cos(x/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">X = np.c_[x, x**<span class="number">2</span>, x**<span class="number">3</span>,x**<span class="number">4</span>, x**<span class="number">5</span>, x**<span class="number">6</span>, x**<span class="number">7</span>, x**<span class="number">8</span>, x**<span class="number">9</span>, x**<span class="number">10</span>, x**<span class="number">11</span>, x**<span class="number">12</span>, x**<span class="number">13</span>]</span><br><span class="line">X = zscore_normalize_features(X) </span><br><span class="line"></span><br><span class="line">model_w,model_b = run_gradient_descent_feng(X, y, iterations=<span class="number">1000000</span>, alpha = <span class="number">1e-1</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, marker=<span class="string">&#x27;x&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&quot;Actual Value&quot;</span>); plt.title(<span class="string">&quot;Normalized x x**2, x**3 feature&quot;</span>)</span><br><span class="line">plt.plot(x,X@model_w + model_b, label=<span class="string">&quot;Predicted Value&quot;</span>); plt.xlabel(<span class="string">&quot;x&quot;</span>); plt.ylabel(<span class="string">&quot;y&quot;</span>); plt.legend(); plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/image-20230724100855672.png" class title="image-20230724100855672">
<h2 id="Scikit-Learn"><a href="#Scikit-Learn" class="headerlink" title="Scikit Learn"></a>Scikit Learn</h2><p>线性回归黑盒API使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklear.linear_model <span class="keyword">import</span> LinearRegression, SGDRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">X_train, y_train = load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_norm = scaler.fit_transform(X_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义回归模型</span></span><br><span class="line">sgdr = SGDResgressor(max_iter=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">sgdr.fit(X_norm, y_train)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;number of iterations completed: <span class="subst">&#123;sgdr.n_iter_&#125;</span>, number of weight updates: <span class="subst">&#123;sgdr.t_&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看训练后参数情况</span></span><br><span class="line">b_norm = sgdr.intercept_</span><br><span class="line">w_norm = sgdr.coef_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"><span class="comment"># make a prediction using sgdr.predict()</span></span><br><span class="line">y_pred_sgd = sgdr.predict(X_norm)</span><br><span class="line"><span class="comment"># make a prediction using w,b. </span></span><br><span class="line">y_pred = np.dot(X_norm, w_norm) + b_norm  </span><br><span class="line">print(<span class="string">f&quot;prediction using np.dot() and sgdr.predict match: <span class="subst">&#123;(y_pred == y_pred_sgd).<span class="built_in">all</span>()&#125;</span>&quot;</span>) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<p><em><code>SGDRegressor</code>是<code>scikit-learn</code>库中的一个线性回归模型，它使用随机梯度下降（<code>SGD</code>）算法来拟合数据。它支持不同的损失函数和正则化项，包括<code>L1</code>、<code>L2</code>和弹性网络正则化。</em></p>
<p><em>在训练过程中，<code>SGDRegressor</code>使用随机梯度下降算法来更新模型参数。这意味着它在每个训练样本上进行一次参数更新，而不是像传统的批量梯度下降算法那样在整个训练集上进行一次更新。这使得<code>SGDRegressor</code>非常适合处理大型数据集，因为它可以在内存有限的情况下进行训练。</em></p>
<p>实例（<code>LinearRegression()</code>的使用)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train = np.array([<span class="number">1.0</span>, <span class="number">2.0</span>])   <span class="comment">#features</span></span><br><span class="line">y_train = np.array([<span class="number">300</span>, <span class="number">500</span>])   <span class="comment">#target value</span></span><br><span class="line"></span><br><span class="line">linear_model = LinearRegression()</span><br><span class="line"><span class="comment">#X must be a 2-D Matrix</span></span><br><span class="line">linear_model.fit(X_train.reshape(-<span class="number">1</span>, <span class="number">1</span>), y_train) </span><br><span class="line"></span><br><span class="line">b = linear_model.intercept_</span><br><span class="line">w = linear_model.coef_</span><br><span class="line">print(<span class="string">f&quot;w = <span class="subst">&#123;w:&#125;</span>, b = <span class="subst">&#123;b:<span class="number">0.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;&#x27;manual&#x27; prediction: f_wb = wx+b : <span class="subst">&#123;<span class="number">1200</span>*w + b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">y_pred = linear_model.predict(X_train.reshape(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Prediction on training set:&quot;</span>, y_pred)</span><br><span class="line"></span><br><span class="line">X_test = np.array([[<span class="number">1200</span>]])</span><br><span class="line">print(<span class="string">f&quot;Prediction for 1200 sqft house: $<span class="subst">&#123;linear_model.predict(X_test)[<span class="number">0</span>]:<span class="number">0.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>即使它叫回归，但它是分类的一种方法</p>
<p>binary classification</p>
<p>decision boundary</p>
<p>线性回归分类的效果：</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/image-20230724111610260.png" class title="image-20230724111610260">
<p>logistic function(<strong>sigmoid</strong>)：</p>
<script type="math/tex; mode=display">
g(z) = \frac{1}{1+e^{-z}} (0 < g(z) < 1)</script><img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/image-20230724112224022.png" class title="image-20230724112224022">
<p>线性回归的拟合：</p>
<script type="math/tex; mode=display">
z = \vec w \cdot \vec x + b</script><script type="math/tex; mode=display">
f_{\vec w, b}(\vec x) = g(\vec w \cdot \vec x + b) = \frac{1}{1 + e^{-(\vec w \cdot \vec x + b)}}</script><p>将分类问题转化为 -&gt; 是1或0的概率</p>
<script type="math/tex; mode=display">
f_{\vec w, b}(\vec x) = P(y = 1 | \vec x; \vec w, b)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">z</span>):</span></span><br><span class="line">    g = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure>
<h2 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h2><p>decision boundary</p>
<script type="math/tex; mode=display">
z = \vec w \cdot \vec x + b = 0</script><p>栗子：</p>
<ul>
<li><p>线性边界：<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/4cb7903500a2066b174b429fb58a611.jpg" class title="4cb7903500a2066b174b429fb58a611"></p>
</li>
<li><p>非线性边界：<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/960d4171e77d22eafeb29c523c1bd9f.jpg" class title="960d4171e77d22eafeb29c523c1bd9f"></p>
</li>
</ul>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/0e42c57ce188aae3d8c05b9a727cf07.jpg" class title="0e42c57ce188aae3d8c05b9a727cf07">
<p>多项式与高次幂可以致使决策边界变为封闭（不再线性）</p>
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>Logistic loss function</p>
<script type="math/tex; mode=display">
L(f_{\vec w, b}(\vec x^{(i)}), y^{(i)}) =
\begin{equation}  
\left\{  
             \begin{array}{lr}  
             -log(f_{\vec w, b}(\vec x^{(i)})) & if \ y^{(i)} = 1 \\
             -log(1 - f_{\vec w, b}(\vec x^{(i)}) & if \ y^{(i)} = 0
             \end{array}  
\right.
\end{equation}</script><p>凸函数</p>
<p>函数图像：</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/36436c17718f7b657de704703cbda4c.jpg" class title="36436c17718f7b657de704703cbda4c">
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/dfbe3c7d24e261c5b500f5df2a428a3.jpg" class title="dfbe3c7d24e261c5b500f5df2a428a3">
<p>总结：</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/42a3854eb9b7673fc0323492faf6145.jpg" class title="42a3854eb9b7673fc0323492faf6145">
<h2 id="简化损失函数"><a href="#简化损失函数" class="headerlink" title="简化损失函数"></a>简化损失函数</h2><p><strong>简化逻辑回归的损失函数</strong> -&gt; <strong>二元交叉熵损失函数</strong></p>
<p>核心要义：y只能取1或取0</p>
<p>Loss函数：</p>
<script type="math/tex; mode=display">
L(f_{\vec w, b}(\vec x^{(i)}, y^{(i)}) = -y^{(i)}log(f_{\vec w, b}(\vec x^{(i)})) - (1 - y^{(i)})log(1 - f_{\vec w, b}(\vec x^{(i)}))</script><p>so，整体上的损失函数可以化为：</p>
<script type="math/tex; mode=display">
J(\vec w, b) = \frac{1}{m} \sum_{i = 1}^m [L(f_{\vec w, b}(\vec x^{(i)}), y^{(i)})] \\
= - \frac{1}{m} \sum_{i = 1}^m [y^{(i)}log(f_{\vec w, b}(\vec x^{(i)})) + (1 - y^{(i)})log(1 - f_{\vec w, b}(\vec x^{(i)})]</script><p>此式源于：极大似然估计的统计原理</p>
<p>代码实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost_logistic</span>(<span class="params">X, y, w, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes cost</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (m,n)): Data, m examples with n features</span></span><br><span class="line"><span class="string">      y (ndarray (m,)) : target values</span></span><br><span class="line"><span class="string">      w (ndarray (n,)) : model parameters  </span></span><br><span class="line"><span class="string">      b (scalar)       : model parameter</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      cost (scalar): cost</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    m = X.shape[<span class="number">0</span>]</span><br><span class="line">    cost = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        z_i = np.dot(X[i],w) + b</span><br><span class="line">        f_wb_i = sigmoid(z_i)</span><br><span class="line">        cost +=  -y[i]*np.log(f_wb_i) - (<span class="number">1</span>-y[i])*np.log(<span class="number">1</span>-f_wb_i)</span><br><span class="line">             </span><br><span class="line">    cost = cost / m</span><br><span class="line">    <span class="keyword">return</span> cost</span><br></pre></td></tr></table></figure>
<h2 id="交叉熵求导"><a href="#交叉熵求导" class="headerlink" title="交叉熵求导"></a>交叉熵求导</h2><script type="math/tex; mode=display">
\frac{\partial}{\partial w_j}J(\vec w, b) = \frac{1}{m}(f_{\vec{w}, b}(\vec{x}^{(i)}) - y^{(i)})x_j^{(i)}</script><script type="math/tex; mode=display">
\frac{\partial}{\partial b}J(\vec w, b) = \frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w}, b}(\vec{x}^{(i)})-y^{(i)})</script><p>证明：</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/image-20230724185851932.png" class title="image-20230724185851932">
<p>so, 逻辑回归的梯度下降公式如下：</p>
<script type="math/tex; mode=display">
w_j = w_j - \alpha \frac{1}{m} \sum_{i=1}^{m}(f_{\vec{w}, b}(\vec{x}^{(i)}) - y^{(i)})x_j^{(i)}</script><script type="math/tex; mode=display">
b = b - \alpha \frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w}, b}(\vec{x}^{(i)})-y^{(i)})</script><p>其实和线性回归的下降公式还不一样，注意区别：</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/d31c475a35e5b37309e612cc7598e00.jpg" class title="d31c475a35e5b37309e612cc7598e00">
<h2 id="Scikit-learn"><a href="#Scikit-learn" class="headerlink" title="Scikit learn"></a>Scikit learn</h2><p>逻辑回归黑盒API使用</p>
<p>DataSet</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">X = np.array([[<span class="number">0.5</span>, <span class="number">1.5</span>], [<span class="number">1</span>,<span class="number">1</span>], [<span class="number">1.5</span>, <span class="number">0.5</span>], [<span class="number">3</span>, <span class="number">0.5</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2.5</span>]])</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>Fit</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">lr_model = LogisticRegression()</span><br><span class="line">lr_model.fit(X, y)</span><br></pre></td></tr></table></figure>
<p>predictions</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_pred = lr_model.predict(X)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Prediction on training set:&quot;</span>, y_pred)</span><br></pre></td></tr></table></figure>
<p>calculate accuracy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;Accuracy on training set:&quot;</span>, lr_model.score(X, y))</span><br></pre></td></tr></table></figure>
<h1 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>过拟合 Over Fitting  高方差 high variance (高度可变)</p>
<p>欠拟合 Under Fitting  高偏差 high bias</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/e6d51124e675ff6ebfda7762941eba4.jpg" class title="e6d51124e675ff6ebfda7762941eba4">
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/bebf3eba7a592c4457194fb6d2977e8.jpg" class title="bebf3eba7a592c4457194fb6d2977e8">
<h2 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h2><ul>
<li><p>扩大训练集 Collect more training examples</p>
</li>
<li><p>特征选择 select a subset of the more relevant features</p>
<ul>
<li>缺点：可能会丢失一些有效信息</li>
</ul>
</li>
<li><p>正则化 Regularization：保留所有的特征，但是防止特征产生过大的影响</p>
<p>减小wj的参数设置</p>
</li>
</ul>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/b5fd463099b0f15cd7ef9842e462d2b.jpg" class title="b5fd463099b0f15cd7ef9842e462d2b">
<h1 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h1><p>regularization</p>
<p>simpler model and less likely to overfit</p>
<p>任务：minimize 如下公式（以线性为例）：</p>
<script type="math/tex; mode=display">
J(\vec w, b) = \frac{1}{2m} \sum_{i = 1}^{m}(f_{\vec w, b}(\vec x ^ {(i)}) - y^{(i)})^2 + \frac{\lambda}{2m}\sum_{j = 1}^{n}w_j^2</script><p>均方误差 + 正则化项</p>
<p>其中，$\lambda$ 称为正则化系数</p>
<p>如果$\lambda$过小，可能会过拟合（相当于没正则化）</p>
<p>如果$\lambda$过大，可能会欠拟合（只剩个b）</p>
<p>随着$\lambda$增大，$w_j$的规模会变小</p>
<h2 id="线性回归的正则化"><a href="#线性回归的正则化" class="headerlink" title="线性回归的正则化"></a>线性回归的正则化</h2><script type="math/tex; mode=display">
w_j = w_j - \alpha \frac{1}{m} \sum_{i=1}^{m}[(f_{\vec{w}, b}(\vec{x}^{(i)}) - y^{(i)})x_j^{(i)} + \frac{\lambda}{m}w_j]</script><script type="math/tex; mode=display">
b = b - \alpha \frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w}, b}(\vec{x}^{(i)})-y^{(i)})</script><p>正则化的本质：</p>
<p>在每次迭代中将w与一个略比1小的数相乘，具有收缩的效果</p>
<img src="/2023/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-01/e8fbae849b7bf4548050d22d6ff6a0f.jpg" class title="e8fbae849b7bf4548050d22d6ff6a0f">
<p>cost function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost_linear_reg</span>(<span class="params">X, y, w, b, lambda_ = <span class="number">1</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the cost over all examples</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (m,n): Data, m examples with n features</span></span><br><span class="line"><span class="string">      y (ndarray (m,)): target values</span></span><br><span class="line"><span class="string">      w (ndarray (n,)): model parameters  </span></span><br><span class="line"><span class="string">      b (scalar)      : model parameter</span></span><br><span class="line"><span class="string">      lambda_ (scalar): Controls amount of regularization</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      total_cost (scalar):  cost </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    m  = X.shape[<span class="number">0</span>]</span><br><span class="line">    n  = <span class="built_in">len</span>(w)</span><br><span class="line">    cost = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        f_wb_i = np.dot(X[i], w) + b                                   <span class="comment">#(n,)(n,)=scalar, see np.dot</span></span><br><span class="line">        cost = cost + (f_wb_i - y[i])**<span class="number">2</span>                               <span class="comment">#scalar             </span></span><br><span class="line">    cost = cost / (<span class="number">2</span> * m)                                              <span class="comment">#scalar  </span></span><br><span class="line"> </span><br><span class="line">    reg_cost = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        reg_cost += (w[j]**<span class="number">2</span>)                                          <span class="comment">#scalar</span></span><br><span class="line">    reg_cost = (lambda_/(<span class="number">2</span>*m)) * reg_cost                              <span class="comment">#scalar</span></span><br><span class="line">    </span><br><span class="line">    total_cost = cost + reg_cost                                       <span class="comment">#scalar</span></span><br><span class="line">    <span class="keyword">return</span> total_cost                                                  <span class="comment">#scalar</span></span><br></pre></td></tr></table></figure>
<p>Gradient decline:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_gradient_linear_reg</span>(<span class="params">X, y, w, b, lambda_</span>):</span> </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the gradient for linear regression </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (m,n): Data, m examples with n features</span></span><br><span class="line"><span class="string">      y (ndarray (m,)): target values</span></span><br><span class="line"><span class="string">      w (ndarray (n,)): model parameters  </span></span><br><span class="line"><span class="string">      b (scalar)      : model parameter</span></span><br><span class="line"><span class="string">      lambda_ (scalar): Controls amount of regularization</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      dj_dw (ndarray (n,)): The gradient of the cost w.r.t. the parameters w. </span></span><br><span class="line"><span class="string">      dj_db (scalar):       The gradient of the cost w.r.t. the parameter b. </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m,n = X.shape           <span class="comment">#(number of examples, number of features)</span></span><br><span class="line">    dj_dw = np.zeros((n,))</span><br><span class="line">    dj_db = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):                             </span><br><span class="line">        err = (np.dot(X[i], w) + b) - y[i]                 </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):                         </span><br><span class="line">            dj_dw[j] = dj_dw[j] + err * X[i, j]               </span><br><span class="line">        dj_db = dj_db + err                        </span><br><span class="line">    dj_dw = dj_dw / m                                </span><br><span class="line">    dj_db = dj_db / m   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        dj_dw[j] = dj_dw[j] + (lambda_/m) * w[j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dj_db, dj_dw</span><br></pre></td></tr></table></figure>
<h2 id="逻辑回归的正则化"><a href="#逻辑回归的正则化" class="headerlink" title="逻辑回归的正则化"></a>逻辑回归的正则化</h2><script type="math/tex; mode=display">
J(\vec w, b) = - \frac{1}{m} \sum_{i = 1}^m [y^{(i)}log(f_{\vec w, b}(\vec x^{(i)})) + (1 - y^{(i)})log(1 - f_{\vec w, b}(\vec x^{(i)})] + \frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2</script><script type="math/tex; mode=display">
w_j = w_j - \alpha \frac{1}{m} \sum_{i=1}^{m}[(f_{\vec{w}, b}(\vec{x}^{(i)}) - y^{(i)})x_j^{(i)} + \frac{\lambda}{m}w_j]</script><script type="math/tex; mode=display">
b = b - \alpha \frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w}, b}(\vec{x}^{(i)})-y^{(i)})</script><p>cost function：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost_logistic_reg</span>(<span class="params">X, y, w, b, lambda_ = <span class="number">1</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the cost over all examples</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (m,n): Data, m examples with n features</span></span><br><span class="line"><span class="string">      y (ndarray (m,)): target values</span></span><br><span class="line"><span class="string">      w (ndarray (n,)): model parameters  </span></span><br><span class="line"><span class="string">      b (scalar)      : model parameter</span></span><br><span class="line"><span class="string">      lambda_ (scalar): Controls amount of regularization</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      total_cost (scalar):  cost </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    m,n  = X.shape</span><br><span class="line">    cost = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        z_i = np.dot(X[i], w) + b                                      <span class="comment">#(n,)(n,)=scalar, see np.dot</span></span><br><span class="line">        f_wb_i = sigmoid(z_i)                                          <span class="comment">#scalar</span></span><br><span class="line">        cost +=  -y[i]*np.log(f_wb_i) - (<span class="number">1</span>-y[i])*np.log(<span class="number">1</span>-f_wb_i)      <span class="comment">#scalar</span></span><br><span class="line">             </span><br><span class="line">    cost = cost/m                                                      <span class="comment">#scalar</span></span><br><span class="line"></span><br><span class="line">    reg_cost = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        reg_cost += (w[j]**<span class="number">2</span>)                                          <span class="comment">#scalar</span></span><br><span class="line">    reg_cost = (lambda_/(<span class="number">2</span>*m)) * reg_cost                              <span class="comment">#scalar</span></span><br><span class="line">    </span><br><span class="line">    total_cost = cost + reg_cost                                       <span class="comment">#scalar</span></span><br><span class="line">    <span class="keyword">return</span> total_cost                                                  <span class="comment">#scalar</span></span><br></pre></td></tr></table></figure>
<p>Gradient decline:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_gradient_logistic_reg</span>(<span class="params">X, y, w, b, lambda_</span>):</span> </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the gradient for linear regression </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (m,n): Data, m examples with n features</span></span><br><span class="line"><span class="string">      y (ndarray (m,)): target values</span></span><br><span class="line"><span class="string">      w (ndarray (n,)): model parameters  </span></span><br><span class="line"><span class="string">      b (scalar)      : model parameter</span></span><br><span class="line"><span class="string">      lambda_ (scalar): Controls amount of regularization</span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">      dj_dw (ndarray Shape (n,)): The gradient of the cost w.r.t. the parameters w. </span></span><br><span class="line"><span class="string">      dj_db (scalar)            : The gradient of the cost w.r.t. the parameter b. </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m,n = X.shape</span><br><span class="line">    dj_dw = np.zeros((n,))                            <span class="comment">#(n,)</span></span><br><span class="line">    dj_db = <span class="number">0.0</span>                                       <span class="comment">#scalar</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        f_wb_i = sigmoid(np.dot(X[i],w) + b)          <span class="comment">#(n,)(n,)=scalar</span></span><br><span class="line">        err_i  = f_wb_i  - y[i]                       <span class="comment">#scalar</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dj_dw[j] = dj_dw[j] + err_i * X[i,j]      <span class="comment">#scalar</span></span><br><span class="line">        dj_db = dj_db + err_i</span><br><span class="line">    dj_dw = dj_dw/m                                   <span class="comment">#(n,)</span></span><br><span class="line">    dj_db = dj_db/m                                   <span class="comment">#scalar</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        dj_dw[j] = dj_dw[j] + (lambda_/m) * w[j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dj_db, dj_dw  </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-02</title>
    <url>/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/</url>
    <content><![CDATA[<ul>
<li>神经网络概念</li>
<li>训练神经网络</li>
<li>构建神经网络</li>
<li>评估模型的技巧</li>
<li>模型修正的技巧</li>
<li>数据迁移</li>
<li>倾斜数据集的误差度量</li>
</ul>
<span id="more"></span>
<h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><p>Neural networks</p>
<p>speech -&gt; images -&gt; text(NLP) -&gt; forecast</p>
<p>比较：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/ff0fda2e5fbfce26e8eb41564ac0ede.jpg" class title="ff0fda2e5fbfce26e8eb41564ac0ede">
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>神经网络栗子：</p>
<ul>
<li>input layer</li>
<li>hidden layer -&gt; activation values</li>
<li>output layer</li>
</ul>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/c89f416a886974c9dd424df449ae5a0.jpg" class title="c89f416a886974c9dd424df449ae5a0">
<p>前面的四个特征经过特征工程变成了新的3个特征</p>
<p>神经网络所做的是提炼自己的特征值（在隐藏层中），而不是人为手动的设计</p>
<p>需要决定的点是神经网络的架构：</p>
<ul>
<li>隐藏层的数量</li>
<li>每个隐藏层中神经元的数量</li>
</ul>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/0ae7ee4c12a7591337ea69200522207.jpg" class title="0ae7ee4c12a7591337ea69200522207">
<p>上下标事项：</p>
<p>layer 1：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/0d724fd73d714209a1036b11a78edde.jpg" class title="0d724fd73d714209a1036b11a78edde">
<p>layer 2：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/3660be1075d778841a04872cf471b82.jpg" class title="3660be1075d778841a04872cf471b82">
<p>上标：层号</p>
<p>下标：层中神经元号</p>
<p>layer l的第j个神经元的激活函数：</p>
<script type="math/tex; mode=display">
a^{[l]}_j = g(\vec w_j^{[l]} \cdot \vec a ^ {[l - 1]} + b_j^{[l]})</script><p>g -&gt; sigmoid (also called activation function 激活函数)</p>
<p>PS：输入层可以是 $\vec x = a^{[0]}$</p>
<h2 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h2><p>forward propagation</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/d6f2a3659b6c1a8fa46a76a83fc13d0.jpg" class title="d6f2a3659b6c1a8fa46a76a83fc13d0">
<h2 id="tensorflow实现"><a href="#tensorflow实现" class="headerlink" title="tensorflow实现"></a>tensorflow实现</h2><img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/e68e8033098b353528ed105927647dc.jpg" class title="e68e8033098b353528ed105927647dc">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">200.0</span>, <span class="number">17.0</span>])</span><br><span class="line">layer_1 = Dense(units=<span class="number">3</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">a1 = layer_1(x)</span><br><span class="line"></span><br><span class="line">layer_2 = Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">a2 = layer_2(a1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a2 &gt;= <span class="number">0.5</span></span><br><span class="line">    yhat = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    yhat = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([[<span class="number">200</span>, <span class="number">17</span>]])  <span class="comment"># [200, 17] 1 * 2  矩阵 tensorflow中使用</span></span><br><span class="line">x = np.array([<span class="number">200</span>], [<span class="number">17</span>])  <span class="comment"># [200,  矩阵 tensorflow中使用</span></span><br><span class="line">						   <span class="comment">#  17] 2 * 1</span></span><br><span class="line">x = np.array([<span class="number">200</span>, <span class="number">17</span>])  <span class="comment"># 1D &quot;vector&quot; 线性、逻辑回归中用</span></span><br><span class="line"></span><br><span class="line">x.numpy()  <span class="comment"># tensorflow matrix -&gt; numpy array</span></span><br></pre></td></tr></table></figure>
<p>tensorflow的设计与发明旨在处理非常大的数据集，所以通过在矩阵而不是一维数组中表示数据</p>
<p>所以转换的时候需要注意！</p>
<h3 id="搭建神经网络"><a href="#搭建神经网络" class="headerlink" title="搭建神经网络"></a>搭建神经网络</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layer_1 = Dense(units=<span class="number">3</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">layer_2 = Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">model = Sequential([layer_1, layer_2])</span><br><span class="line">x = np.array([<span class="number">200.0</span>, <span class="number">17.0</span>],</span><br><span class="line">			[<span class="number">120.0</span>, <span class="number">5.0</span>],</span><br><span class="line">			[<span class="number">425.0</span>, <span class="number">20.0</span>],</span><br><span class="line">			[<span class="number">212.0</span>, <span class="number">18.0</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">model.complie(...)</span><br><span class="line">model.fit(x, y)</span><br><span class="line"></span><br><span class="line">model.predict(x_new)</span><br></pre></td></tr></table></figure>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/cff1b628ab69a521d558a048b2103d5.jpg" class title="cff1b628ab69a521d558a048b2103d5">
<p>原理 glance</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/image-20230726113926644.png" class title="image-20230726113926644">
<p>前向传播的一般实现：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/4bad74da019bbd33ca1cb9e289234c6.jpg" class title="4bad74da019bbd33ca1cb9e289234c6">
<p>人类大脑具有惊人的适应性和可塑性，去处理不同输入范围、不同种类的信息。</p>
<p>小结论：</p>
<ul>
<li>如果当前层的输入为$s_{in}$个单元， 输出为$s_{out}$个单元， 那么$\vec w$ 将是$s_{in} * s_{out}$的矩阵</li>
<li>b将是一个$s_{out}$的向量</li>
</ul>
<p>补充知识：</p>
<p>向量点乘和矩阵乘法的关系：</p>
<script type="math/tex; mode=display">
\vec a \cdot \vec w = \vec a^T \vec w</script><p>a_in是(m, n)，W是(n, j), b是(j, 1)的向量</p>
<p>矩阵乘法会加速训练过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dense</span>(<span class="params">A_in, W, b, g</span>)</span></span><br><span class="line"><span class="function">	# <span class="title">A</span>的转置 <span class="title">A</span>.<span class="title">T</span></span></span><br><span class="line">	z = np.matmul(A_in, W) + b  # 矩阵乘法(m, n)(n, j) = (m, j)</span><br><span class="line">	A_out = g(z)</span><br><span class="line">    <span class="keyword">return</span> A_out</span><br></pre></td></tr></table></figure>
<p>其中b能加不报错的原因：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/image-20230726201836693.png" class title="image-20230726201836693">
<h3 id="训练神经网络-多层感知机-的细节"><a href="#训练神经网络-多层感知机-的细节" class="headerlink" title="训练神经网络(多层感知机)的细节"></a>训练神经网络(多层感知机)的细节</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> BinaryCrossentropy</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">	Dense(units=<span class="number">25</span>, activations=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">10</span>, activations=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">1</span>, activations=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">])</span><br><span class="line">x = np.array([<span class="number">200.0</span>, <span class="number">17.0</span>],</span><br><span class="line">			[<span class="number">120.0</span>, <span class="number">5.0</span>],</span><br><span class="line">			[<span class="number">425.0</span>, <span class="number">20.0</span>],</span><br><span class="line">			[<span class="number">212.0</span>, <span class="number">18.0</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">model.complie(loss=BinaryCrossentropy())</span><br><span class="line"></span><br><span class="line">model.fit(x, y, epochs=<span class="number">100</span>)  <span class="comment"># epoch: number of steps in gradient descent</span></span><br><span class="line"></span><br><span class="line">model.predict(x_new)</span><br></pre></td></tr></table></figure>
<p>better version：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> BinaryCrossentropy</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">	Dense(units=<span class="number">25</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">10</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;linear&#x27;</span>)  <span class="comment"># 线性输出</span></span><br><span class="line">])</span><br><span class="line">x = np.array([<span class="number">200.0</span>, <span class="number">17.0</span>],</span><br><span class="line">			[<span class="number">120.0</span>, <span class="number">5.0</span>],</span><br><span class="line">			[<span class="number">425.0</span>, <span class="number">20.0</span>],</span><br><span class="line">			[<span class="number">212.0</span>, <span class="number">18.0</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">model.complie(loss=BinaryCrossentropy(from_logits=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">model.fit(x, y, epochs=<span class="number">100</span>)  <span class="comment"># epoch: number of steps in gradient descent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># predict</span></span><br><span class="line">logit = model(x_new)</span><br><span class="line">f_x = tf.nn.sigmoid(logit)</span><br><span class="line">model.predict(x_new)</span><br></pre></td></tr></table></figure>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/8ff653815c19d47ad4fcb59ac58d2b2.jpg" class title="8ff653815c19d47ad4fcb59ac58d2b2">
<p>损失函数：</p>
<ul>
<li><code>BinaryCrossentropy()</code> 二元交叉熵损失函数</li>
<li><code>MeanSquareError()</code> 均值方差损失函数</li>
</ul>
<p>激活函数：</p>
<ul>
<li><p>sigmoid</p>
<p>$g(z) = \frac{1}{1 + e^{-z}}$</p>
<ul>
<li>适用范围：y = 0 / 1</li>
</ul>
</li>
<li><p>ReLU (most common)</p>
<p>$g(z) = max(0, z)$</p>
<ul>
<li>适用范围： y = + / -</li>
<li>优势：相较于sigmoid往往训练得更快（因为梯度下降flat的地方很少）</li>
</ul>
</li>
<li><p>Linear activation function 线性激活函数(相当于没用)</p>
<p>$g(z) = z$</p>
<ul>
<li>适用范围：y = 0 or +</li>
</ul>
</li>
<li><p>Softmax</p>
</li>
<li>LeakyReLU</li>
<li>tan h</li>
<li>swish</li>
</ul>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/image-20230727082437635.png" class title="image-20230727082437635">
<p><strong>建议</strong>：</p>
<ul>
<li>输出层：<ul>
<li>sigmoid y = 0 / 1 二分类问题</li>
<li>linear y = + / -</li>
<li>ReLU y = 0 or +</li>
</ul>
</li>
<li>隐藏层：<ul>
<li>ReLU</li>
</ul>
</li>
</ul>
<p><strong>使用激活函数的必要性</strong>：</p>
<p>如果所有层（hidden + output) 的激活函数都是线性激活函数（或没有激活函数），那么其等价于一个线性回归模型；</p>
<p>如果hidden层的激活函数都是线性激活函数（或没有激活函数），output层的激活函数是sigmoid，那么其等价于一个逻辑回归模型</p>
<p>so, <strong>hidden层不要全部使用linear activation function!</strong></p>
<h2 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h2><img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/c07f6bd84e7b739f97b128168605e73.jpg" class title="c07f6bd84e7b739f97b128168605e73">
<p>公式：</p>
<script type="math/tex; mode=display">
z_j = \vec w_j \cdot \vec x + b_j \\ j = 1, ..., N</script><script type="math/tex; mode=display">
a_j = \frac{e^{z_j}}{\sum_{k=1}^{N}e^{z_k}} = P(y=j|\vec x) \\ a_1 + a_2 + ... + a_N = 1</script><p>成本函数：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/dba2f8fab5b6eea09d09e161eb10fdb.jpg" class title="dba2f8fab5b6eea09d09e161eb10fdb">
<script type="math/tex; mode=display">
loss(a_1,...,a_N,y) =
\begin{equation}  
\left\{  
             \begin{array}{lr}  
             -loga_1 & if \ y = 1 \\
             -loga_2 & if \ y = 2 \\
             ... \\
             -loga_n & if \ y = N
             \end{array}  
\right.
\end{equation}</script><p>implement in code：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> SparseCategoricalCrossentropy</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">	Dense(units=<span class="number">25</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">15</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 多分类交叉熵损失函数</span></span><br><span class="line">model.complie(loss=SparseCategoricalCrossentropy())</span><br><span class="line"></span><br><span class="line">model.fit(x, y, epochs=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">model.predict(x_new)</span><br></pre></td></tr></table></figure>
<p>better version（改进实现）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> SparseCategoricalCrossentropy</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">	Dense(units=<span class="number">25</span>, activations=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">15</span>, activations=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">10</span>, activations=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.complie(loss=SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">model.fit(x, y, epochs=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">logits = model(X)</span><br><span class="line">preferred = tf.nn.softmax(logits).numpy()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(preferred)):</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;preferred[i]&#125;</span>, category: <span class="subst">&#123;np.argmax(preferred[i])&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>原理相同，但在数字计算层面更精准（直接带入，tensorflow自动优化）</p>
<p><strong>Softmax函数的准确计算</strong>：</p>
<p>原理：</p>
<script type="math/tex; mode=display">
a_j = \frac{e^{z_j - C}}{\sum_{i=1}^{N}e^{z_i - C}} \ \ \ \ \ where \ C = max_j(z)</script><p>可有效防止指数过大的溢出(overflow)现象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_softmax_ns</span>(<span class="params">z</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;numerically stablility improved&quot;&quot;&quot;</span></span><br><span class="line">    bigz = np.<span class="built_in">max</span>(z)</span><br><span class="line">    ez = np.exp(z-bigz)              <span class="comment"># minimize exponent</span></span><br><span class="line">    sm = ez/np.<span class="built_in">sum</span>(ez)</span><br><span class="line">    <span class="keyword">return</span>(sm)</span><br></pre></td></tr></table></figure>
<p><strong>交叉熵损失函数的准确计算</strong>：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/5190bd720b64c996422b845805e2d09.png" class title="5190bd720b64c996422b845805e2d09">
<h2 id="多输出-标签-问题"><a href="#多输出-标签-问题" class="headerlink" title="多输出(标签)问题"></a>多输出(标签)问题</h2><img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/afe21018d804369791a5a12f66d4a32.jpg" class title="afe21018d804369791a5a12f66d4a32">
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/5806176ade37502bf35e0212a6ea088.jpg" class title="5806176ade37502bf35e0212a6ea088">
<h2 id="Adam优化器"><a href="#Adam优化器" class="headerlink" title="Adam优化器"></a>Adam优化器</h2><p><strong>Adam optimizers</strong></p>
<p>可以自动调整学习率</p>
<p>对每个参数都有自己的学习率</p>
<ul>
<li>如果$w_j$ or b保持向同样一个方向移动，就加大学习率$\alpha_j$</li>
<li>如果$w_j$ or b持续震荡或弹跳，就缩减学习率$\alpha_j$</li>
</ul>
<p>implement code：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.complie(optimizer=tf.keras.optimizers.Adam(learning_rate=<span class="number">1e-3</span>)),</span><br><span class="line">	loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>
<h2 id="layer分类"><a href="#layer分类" class="headerlink" title="layer分类"></a>layer分类</h2><ul>
<li><p>Dense Layer 全连接层</p>
<p>Each neuron output is a function of all the activation outputs of the previous layer</p>
<p>主要用于网络的最后一层，负责将前面提取到的特征进行分类和回归</p>
</li>
<li><p>Convolutional Layer 卷积层</p>
<p>Each neuron only looks at part of the previous layer’s inputs</p>
<p>主要用于提取数据的特征</p>
<p>优点：</p>
<ul>
<li>更快的计算速度</li>
<li>更少的训练数据需求（不易过拟合）</li>
</ul>
<p>CNN范例：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/0a61aab700c38f2946b169323e44d7c.jpg" class title="0a61aab700c38f2946b169323e44d7c">
</li>
</ul>
<p>PS： Python中导数求法</p>
<p>需要库<code>sympy</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">J, w = sympy.symbols(<span class="string">&#x27;J, w&#x27;</span>)</span><br><span class="line">J = w ** <span class="number">2</span></span><br><span class="line">w_2</span><br><span class="line">dj_dw = syspy.diff(J, w)  <span class="comment"># 求导</span></span><br><span class="line">2w</span><br><span class="line">dt_dw.subs([(w, <span class="number">2</span>)])  <span class="comment"># 代入</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>从左到右计算损失函数 前向传播</p>
</li>
<li><p>从右到左计算导数 反向传播</p>
</li>
</ul>
<p>参考：<a href="https://blog.csdn.net/ft_sunshine/article/details/90221691">https://blog.csdn.net/ft_sunshine/article/details/90221691</a></p>
<h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><ul>
<li>增大训练集</li>
<li>减少特征值</li>
<li>获取额外的特征</li>
<li>增加高次幂特征</li>
<li>增大、减小正则化系数</li>
</ul>
<h2 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h2><p>划分数据集：</p>
<p><strong>方式一</strong>：</p>
<p>70% 训练集</p>
<p>30% 测试集</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/cef1df07407d17f24088fc05be9c1fd.jpg" class title="cef1df07407d17f24088fc05be9c1fd">
<p>针对均方误差：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/722afd10d800286bf0d9cefcdafcba0.jpg" class title="722afd10d800286bf0d9cefcdafcba0">
<p>针对逻辑回归：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/6a7ced2fc847f99ad13ad2979702c38.jpg" class title="6a7ced2fc847f99ad13ad2979702c38">
<p>对于分类问题，还可以统计测试集被错误分类的比例</p>
<p>implement code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=<span class="number">0.33</span>, random_state=<span class="number">1</span>)  <span class="comment"># 2:1 打乱顺序</span></span><br></pre></td></tr></table></figure>
<p>方式二：</p>
<ul>
<li>60% 训练集</li>
<li>20% 交叉验证集(验证集 / 开发集) cross validation / development set</li>
<li>20% 测试集</li>
</ul>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/abe129f71614dbde85473b91583df0b.jpg" class title="abe129f71614dbde85473b91583df0b">
<ul>
<li>训练集用于训练模型</li>
<li><p>验证集用于选取模型 （选取最小损失的多项式或神经网络结构）</p>
</li>
<li><p>测试集用于测试模型泛化能力</p>
</li>
</ul>
<p>implement code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># train:cv:test=0.6:0.2:0.2</span></span><br><span class="line">X_train, X_, y_train, y_ = train_test_split(X,y,test_size=<span class="number">0.40</span>, random_state=<span class="number">1</span>)</span><br><span class="line">X_cv, X_test, y_cv, y_test = train_test_split(X_,y_,test_size=<span class="number">0.50</span>, random_state=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="结合偏差和方差"><a href="#结合偏差和方差" class="headerlink" title="结合偏差和方差"></a>结合偏差和方差</h2><p>$J_{train}$ 偏大 -&gt; 模型欠拟合（high bias）</p>
<p>$J_{train}$小，但$J_{cv}$ 偏大 -&gt; 模型过拟合（high variance）</p>
<p>$J_{train}$ 小，$J_{cv}$相较于$J_{train}$也偏小 -&gt; just right</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/cb02dd77e38dd312dda78b7795a1af9.jpg" class title="cb02dd77e38dd312dda78b7795a1af9">
<p><strong>正则化系数</strong></p>
<p>左侧过拟合，右侧欠拟合</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/678e52f2c2a1b67cba1650ba150362b.jpg" class title="678e52f2c2a1b67cba1650ba150362b">
<p>所以通过$J_{train}$ 和$J_{cv}$可以帮助$\lambda$的选择</p>
<p>如何判断J的水平是高的？ -&gt; benchmark</p>
<ul>
<li>人类的表现水平</li>
<li>同类竞争性算法表现</li>
<li>通过经验推断</li>
</ul>
<h2 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h2><p>high bias：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/3b59454ea9941e0432a3147b3e97b7d.jpg" class title="3b59454ea9941e0432a3147b3e97b7d">
<p>high variance：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/5eb15537158c73578a97f01107ab6c5.jpg" class title="5eb15537158c73578a97f01107ab6c5">
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>增加特征数量（high bias）</li>
<li>增加高次幂特征（high bias）</li>
<li>减小正则化系数（high bias）</li>
</ul>
<ul>
<li>增大训练集（high variance)</li>
<li>减少特征数量 （high variance）</li>
<li>增大正则化系数（high variance）</li>
</ul>
<p><em>The knowledge above takes short time to learn, but life time to master.</em></p>
<h2 id="神经网络的修正"><a href="#神经网络的修正" class="headerlink" title="神经网络的修正"></a>神经网络的修正</h2><p>训练、调试的循环</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/6324f3585a7651f11c9822f1a71ac2a.jpg" class title="6324f3585a7651f11c9822f1a71ac2a">
<p>特色：只要正则化方式合适，一个大规模的神经网络通常会比一个小的神经网络表现更好（更小概率出现过拟合现象）代价：计算量更大，训练更慢</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layer_1= Dense(units=<span class="number">25</span>, activation=<span class="string">&quot;relu&quot;</span>, kernel_regularizer=L2(<span class="number">0.01</span>))</span><br></pre></td></tr></table></figure>
<p>PS:</p>
<ul>
<li>L1：参数绝对值</li>
<li>L2：参数平方</li>
<li>L3： L1 + L2</li>
</ul>
<h1 id="数据添加的技巧"><a href="#数据添加的技巧" class="headerlink" title="数据添加的技巧"></a>数据添加的技巧</h1><ul>
<li>添加一些有侧重性的数据</li>
<li>改变现存数据变为新数据（图像放缩、扭曲、反转、噪点； 语音噪音增加、损失、失真）</li>
<li>数据生成</li>
</ul>
<p><strong>AI = Code + Data</strong></p>
<h1 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h1><ul>
<li>监督预训练 Supervised Pre-training</li>
<li>微调 Fine tuning</li>
</ul>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/2234f0a2133e618d6a05635e5088bff.jpg" class title="2234f0a2133e618d6a05635e5088bff">
<ul>
<li>只训练自己的最后层的参数</li>
<li>训练全部参数（拿之前的模型参数做初始化）</li>
</ul>
<h1 id="误差度量-倾斜数据集"><a href="#误差度量-倾斜数据集" class="headerlink" title="误差度量(倾斜数据集)"></a>误差度量(倾斜数据集)</h1><ul>
<li><p>精确率 Precision</p>
<p>预测为1的多少是实际为1</p>
<p>precision = true positives / total predicted positive</p>
</li>
<li><p>召回率 Recall</p>
<p>实际为1的多少是预测为1</p>
<p>recall = true positives / total actual positive</p>
</li>
</ul>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/cfad7f382473e4876946b4fa071341d.jpg" class title="cfad7f382473e4876946b4fa071341d">
<p><strong>两者的权衡</strong>：</p>
<p>根据实际情况：</p>
<ul>
<li><p>如果预测为1需要很谨慎</p>
<p>阈值提高（高于0.5）更高精确率，更低召回率</p>
</li>
<li><p>如果预测为1很必要</p>
<p>阈值降低（低于0.5）更低精确率，更高召回率</p>
</li>
</ul>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-02/43131854fd6167f157a88798cccd6ce.jpg" class title="43131854fd6167f157a88798cccd6ce">
<p>综合评判：F1 score P和R的调和平均</p>
<script type="math/tex; mode=display">
F1 \ score = \frac{1}{\frac{1}{2}(\frac{1}{P} + \frac{1}{R})} = 2\frac{PR}{P+R}</script>]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-03</title>
    <url>/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/</url>
    <content><![CDATA[<p>学习决策树</p>
<ul>
<li>概念与计算</li>
<li>搭建过程</li>
<li>独热码</li>
<li>回归树</li>
<li>集成学习<ul>
<li>随机森林</li>
<li>提升树</li>
</ul>
</li>
<li>与神经网络的比较</li>
<li>代码实现</li>
</ul>
<span id="more"></span>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>树：</p>
<ul>
<li><p>根节点</p>
</li>
<li><p>决策节点</p>
</li>
<li><p>叶节点</p>
</li>
</ul>
<p>决策树学习算法的工作：在所有的可能决策树中尝试选择一个希望在训练集表现良好的情况下，在推广数据集（交叉验证集、测试机）中同样如此的理想决策树模型。</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/b4a4f5215548ccee2ecf0a837f02152.jpg" class title="b4a4f5215548ccee2ecf0a837f02152">
<h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><ul>
<li><p>如何选择哪个特征去区分每个节点</p>
<p>依据最大纯度 -&gt; 熵</p>
</li>
<li><p>什么时候停止划分</p>
<ul>
<li>当一个节点全为1类</li>
<li>当划分该节点时会导致树的最大深度增加（防止树变复杂过拟合）</li>
<li>纯度分数的提升低于阈值</li>
<li>节点中某类的数量低于阈值</li>
</ul>
</li>
</ul>
<h2 id="衡量纯度"><a href="#衡量纯度" class="headerlink" title="衡量纯度"></a>衡量纯度</h2><p><strong>熵函数</strong>：</p>
<ul>
<li><p>H(0) = 0</p>
</li>
<li><p>H(1) = 0</p>
</li>
<li><p>H(0.5) = 1</p>
</li>
</ul>
<script type="math/tex; mode=display">
p_0 = 1 - p_1</script><script type="math/tex; mode=display">
H(p_1)=-p_1log_2(p_1) - p_0log_2(p_0) \\ = -p_1log_2(p_1) - (1 - p_1)log_2(1-p_1)</script><img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/f1ba8a4a9c541df92b652f5c6ad50ee.jpg" class title="f1ba8a4a9c541df92b652f5c6ad50ee">
<p>熵的减少被称为信息增益</p>
<p><strong>选择特征的依据：最低加权平均熵</strong></p>
<p>栗子：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/2082135b7d2fd61654e008f1c19066f.jpg" class title="2082135b7d2fd61654e008f1c19066f">
<p>可以给出信息增益的公式：</p>
<script type="math/tex; mode=display">
Information\ gain = H(p_1^{root}) - (w^{left}H(p_1^{left})+w^{right}H(p_1^{right}))</script><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>先序遍历：</p>
<ul>
<li>所有样例从根节点开始</li>
<li>分别计算所有潜在特征的信息增益，从中选出最高的</li>
<li>根据选中的特征划分数据集，创建树的左右枝干</li>
<li>继续划分直到达到停止标准：<ul>
<li>划分出的数据集纯度100%</li>
<li>划分会导致树高超过限制</li>
<li>信息增益小于阈值</li>
<li>划分子集数量小于阈值</li>
</ul>
</li>
</ul>
<p><strong>针对连续值特征</strong>：</p>
<p>需要考虑每个拆分的标准，根据这个标准计算信息增益，选择信息增益最大的值进行拆分。</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/2961b3a86c20f037cdd8d71a54804a4.jpg" class title="2961b3a86c20f037cdd8d71a54804a4">
<p>上图选择的具体方法是：在10个数据之间的9个空隙中选择中点，分别计算各自的信息增益，选择最高的那个作为分类依据。</p>
<h1 id="独热码"><a href="#独热码" class="headerlink" title="独热码"></a>独热码</h1><p>如果一个分类特征有k种分类方式，那么可以创造k个二进制特征（0 or 1）</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/b553afe91ef110c0d2b7bc8b28aa316.jpg" class title="b553afe91ef110c0d2b7bc8b28aa316">
<p>独热码不仅可以用于决策树，也可以用于逻辑回归和神经网络。</p>
<p>注意：独热码只能同时有一个特征为1，其余都为0</p>
<h1 id="回归树"><a href="#回归树" class="headerlink" title="回归树"></a>回归树</h1><p>预测数字</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/eb83c4aaec4d1dae77cec7c62745a59.jpg" class title="eb83c4aaec4d1dae77cec7c62745a59">
<p>信息增益 -&gt; 测量方差</p>
<p>选择分类特征的过程（类比决策树）</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/6c96dd23002a75f12c83959126c12b0.jpg" class title="6c96dd23002a75f12c83959126c12b0">
<h1 id="树集合"><a href="#树集合" class="headerlink" title="树集合"></a>树集合</h1><p>树对于数据集的改动十分敏感，所以可选择多颗不同类型的决策树加大普适性</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/5efa1ddf5cf4e73038d297662b478dd.jpg" class title="5efa1ddf5cf4e73038d297662b478dd">
<h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><p>random forest 集成学习</p>
<p>前提：新的数据集通过<strong>有放回抽样</strong>进行</p>
<p>随机森林生成过程：</p>
<p>数据集大小：m</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> b = <span class="number">1</span> to B:  <span class="comment"># B决定随机森林中子树个数</span></span><br><span class="line">	有放回抽样去创造新的数据集(大小为m)</span><br><span class="line">    根据新数据集训练一颗决策子树</span><br></pre></td></tr></table></figure>
<p>为了使每颗决策子树不同程度高以增加模型普适性，可以采用如下方法：</p>
<img src="/2023/07/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-03/f9039ddd23ead4fc416b1fe22d5cb16.jpg" class title="f9039ddd23ead4fc416b1fe22d5cb16">
<p>n个特征划分为随机包含其中k个特征的子集，在子集中进行选择</p>
<p>习惯选择$k=\sqrt{n}$</p>
<h1 id="Boosted-trees"><a href="#Boosted-trees" class="headerlink" title="Boosted trees"></a>Boosted trees</h1><p>提升树</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> b = <span class="number">1</span> to B:  <span class="comment"># B决定随机森林中子树个数</span></span><br><span class="line">	有放回抽样去创造新的数据集(大小为m)</span><br><span class="line">    	但是更倾向于选择之前决策树错误分类的样例，而不是等概率抽</span><br><span class="line">    根据新数据集训练一颗决策子树</span><br></pre></td></tr></table></figure>
<h2 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h2><p>eXtreme Gradient Boosting</p>
<ul>
<li>提升树的开源实现</li>
<li>非常快捷和高效</li>
<li>有良好的选择默认拆分标准和何时停止拆分的标准</li>
<li>内置了正则化以防止过拟合</li>
<li>是一种算法竞赛中竞争激烈的算法</li>
</ul>
<p>分类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"></span><br><span class="line">model = XGBClassifier()</span><br><span class="line"></span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">y_pred = model.predict(X_test)</span><br></pre></td></tr></table></figure>
<p>回归：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"></span><br><span class="line">model = XGBRegressor()</span><br><span class="line"></span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">y_pred = model.predict(X_test)</span><br></pre></td></tr></table></figure>
<h1 id="决策树的使用场景"><a href="#决策树的使用场景" class="headerlink" title="决策树的使用场景"></a>决策树的使用场景</h1><p>决策树和树的集成学习：</p>
<ul>
<li>在结构化数据上表现很好（表格等）</li>
<li>不推荐在非结构化数据上使用（图像，音频，文字）</li>
<li>训练真的很快</li>
<li>小型决策树可以人工分析内部</li>
</ul>
<p>神经网络：</p>
<ul>
<li>在结构化和非结构化数据上都表现很好</li>
<li>相对决策树训练会更慢</li>
<li>可以和迁移学习一起使用</li>
<li>多个神经网络相互独立可以并发训练，而随机森林只能一个接一个训练</li>
</ul>
<h1 id="代码实现决策树"><a href="#代码实现决策树" class="headerlink" title="代码实现决策树"></a>代码实现决策树</h1><p>熵函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_entropy</span>(<span class="params">y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the entropy for </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">       y (ndarray): Numpy array indicating whether each example at a node is</span></span><br><span class="line"><span class="string">           edible (`1`) or poisonous (`0`)</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        entropy (float): Entropy at that node</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># You need to return the following variables correctly</span></span><br><span class="line">    entropy = <span class="number">0.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(y):</span><br><span class="line">        p1 = <span class="built_in">len</span>(y[y==<span class="number">1</span>]) / <span class="built_in">len</span>(y)</span><br><span class="line">        <span class="keyword">if</span> p1 != <span class="number">0</span> <span class="keyword">and</span> p1 != <span class="number">1</span>:</span><br><span class="line">            entropy = -p1 * np.log2(p1) - (<span class="number">1</span> - p1) * np.log2(<span class="number">1</span> - p1)</span><br><span class="line">    <span class="comment">### END CODE HERE ###        </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> entropy</span><br></pre></td></tr></table></figure>
<p>划分函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_dataset</span>(<span class="params">X, node_indices, feature</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Splits the data at the given node into</span></span><br><span class="line"><span class="string">    left and right branches</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (ndarray):             Data matrix of shape(n_samples, n_features)</span></span><br><span class="line"><span class="string">        node_indices (ndarray):  List containing the active indices. I.e, the samples being considered at this step.</span></span><br><span class="line"><span class="string">        feature (int):           Index of feature to split on</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        left_indices (ndarray): Indices with feature value == 1</span></span><br><span class="line"><span class="string">        right_indices (ndarray): Indices with feature value == 0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># You need to return the following variables correctly</span></span><br><span class="line">    left_indices = []</span><br><span class="line">    right_indices = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    x = X[:,feature]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node_indices:</span><br><span class="line">        <span class="keyword">if</span> x[i] == <span class="number">1</span>:</span><br><span class="line">            left_indices.append(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right_indices.append(i)</span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> left_indices, right_indices</span><br></pre></td></tr></table></figure>
<p>信息增益计算函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UNQ_C3</span></span><br><span class="line"><span class="comment"># GRADED FUNCTION: compute_information_gain</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_information_gain</span>(<span class="params">X, y, node_indices, feature</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Compute the information of splitting the node on a given feature</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (ndarray):            Data matrix of shape(n_samples, n_features)</span></span><br><span class="line"><span class="string">        y (array like):         list or ndarray with n_samples containing the target variable</span></span><br><span class="line"><span class="string">        node_indices (ndarray): List containing the active indices. I.e, the samples being considered in this step.</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        cost (float):        Cost computed</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    </span><br><span class="line">    <span class="comment"># Split dataset</span></span><br><span class="line">    left_indices, right_indices = split_dataset(X, node_indices, feature)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Some useful variables</span></span><br><span class="line">    X_node, y_node = X[node_indices], y[node_indices]</span><br><span class="line">    X_left, y_left = X[left_indices], y[left_indices]</span><br><span class="line">    X_right, y_right = X[right_indices], y[right_indices]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># You need to return the following variables correctly</span></span><br><span class="line">    information_gain = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Weights </span></span><br><span class="line">    w_left = <span class="built_in">len</span>(X_left) / <span class="built_in">len</span>(X_node)</span><br><span class="line">    w_right = <span class="built_in">len</span>(X_right) / <span class="built_in">len</span>(X_node)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Entropy</span></span><br><span class="line">    hp_node = compute_entropy(y_node)</span><br><span class="line">    hp_left = compute_entropy(y_left)</span><br><span class="line">    hp_right = compute_entropy(y_right)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Information gain                                                   </span></span><br><span class="line">    </span><br><span class="line">    information_gain = hp_node - (w_left * hp_left + w_right * hp_right)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> information_gain</span><br></pre></td></tr></table></figure>
<p>找最大信息增益的特征：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_best_split</span>(<span class="params">X, y, node_indices</span>):</span>   </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the optimal feature and threshold value</span></span><br><span class="line"><span class="string">    to split the node data </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (ndarray):            Data matrix of shape(n_samples, n_features)</span></span><br><span class="line"><span class="string">        y (array like):         list or ndarray with n_samples containing the target variable</span></span><br><span class="line"><span class="string">        node_indices (ndarray): List containing the active indices. I.e, the samples being considered in this step.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        best_feature (int):     The index of the best feature to split</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Some useful variables</span></span><br><span class="line">    num_features = X.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># You need to return the following variables correctly</span></span><br><span class="line">    best_feature = -<span class="number">1</span></span><br><span class="line">    max_information_gain = <span class="number">0.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> <span class="built_in">range</span>(num_features):</span><br><span class="line">        information_gain = compute_information_gain(X, y, node_indices, feature)</span><br><span class="line">        <span class="keyword">if</span> information_gain &gt; max_information_gain:</span><br><span class="line">            best_feature = feature</span><br><span class="line">            max_information_gain = information_gain</span><br><span class="line">    <span class="comment">### END CODE HERE ##    </span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> best_feature</span><br></pre></td></tr></table></figure>
<p>核心递归函数建立决策树（先序遍历）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Not graded</span></span><br><span class="line">tree = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree_recursive</span>(<span class="params">X, y, node_indices, branch_name, max_depth, current_depth</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Build a tree using the recursive algorithm that split the dataset into 2 subgroups at each node.</span></span><br><span class="line"><span class="string">    This function just prints the tree.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (ndarray):            Data matrix of shape(n_samples, n_features)</span></span><br><span class="line"><span class="string">        y (array like):         list or ndarray with n_samples containing the target variable</span></span><br><span class="line"><span class="string">        node_indices (ndarray): List containing the active indices. I.e, the samples being considered in this step.</span></span><br><span class="line"><span class="string">        branch_name (string):   Name of the branch. [&#x27;Root&#x27;, &#x27;Left&#x27;, &#x27;Right&#x27;]</span></span><br><span class="line"><span class="string">        max_depth (int):        Max depth of the resulting tree. </span></span><br><span class="line"><span class="string">        current_depth (int):    Current depth. Parameter used during recursive call.</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Maximum depth reached - stop splitting</span></span><br><span class="line">    <span class="keyword">if</span> current_depth == max_depth:</span><br><span class="line">        formatting = <span class="string">&quot; &quot;</span>*current_depth + <span class="string">&quot;-&quot;</span>*current_depth</span><br><span class="line">        print(formatting, <span class="string">&quot;%s leaf node with indices&quot;</span> % branch_name, node_indices)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Otherwise, get best split and split the data</span></span><br><span class="line">    <span class="comment"># Get the best feature and threshold at this node</span></span><br><span class="line">    best_feature = get_best_split(X, y, node_indices) </span><br><span class="line">    tree.append((current_depth, branch_name, best_feature, node_indices))</span><br><span class="line">    </span><br><span class="line">    formatting = <span class="string">&quot;-&quot;</span>*current_depth</span><br><span class="line">    print(<span class="string">&quot;%s Depth %d, %s: Split on feature: %d&quot;</span> % (formatting, current_depth, branch_name, best_feature))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Split the dataset at the best feature</span></span><br><span class="line">    left_indices, right_indices = split_dataset(X, node_indices, best_feature)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># continue splitting the left and the right child. Increment current depth</span></span><br><span class="line">    build_tree_recursive(X, y, left_indices, <span class="string">&quot;Left&quot;</span>, max_depth, current_depth+<span class="number">1</span>)</span><br><span class="line">    build_tree_recursive(X, y, right_indices, <span class="string">&quot;Right&quot;</span>, max_depth, current_depth+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>调用与运行结果展示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">build_tree_recursive(X_train, y_train, root_indices, <span class="string">&quot;Root&quot;</span>, max_depth=<span class="number">2</span>, current_depth=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> Depth 0, Root: Split on feature: 2</span></span><br><span class="line"><span class="string">- Depth 1, Left: Split on feature: 0</span></span><br><span class="line"><span class="string">  -- Left leaf node with indices [0, 1, 4, 7]</span></span><br><span class="line"><span class="string">  -- Right leaf node with indices [5]</span></span><br><span class="line"><span class="string">- Depth 1, Right: Split on feature: 1</span></span><br><span class="line"><span class="string">  -- Left leaf node with indices [8]</span></span><br><span class="line"><span class="string">  -- Right leaf node with indices [2, 3, 6, 9]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-04</title>
    <url>/2023/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-04/</url>
    <content><![CDATA[<ul>
<li>无监督学习<ul>
<li>聚类</li>
<li>异常检测</li>
</ul>
</li>
<li>推荐系统</li>
<li>强化学习</li>
</ul>
<p>学习聚类算法 clustering</p>
<span id="more"></span>
<h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><p>Clustering Algorithm</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li>为相似新闻分类</li>
<li>DNA分析</li>
<li>天文数据分析</li>
</ul>
<h2 id="K-means"><a href="#K-means" class="headerlink" title="K-means"></a>K-means</h2><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ul>
<li>随机选取k个位置作为质心(centroid)初始位置</li>
<li>将每个点与每个质心距离进行比较，将其分配给最近的质心，最终形成k个集群</li>
<li>将每个集群的质心位置移动到其所有点的平均值上</li>
<li>重复上述(2)，(3)步骤直到所有质心不再移动，达到收敛</li>
</ul>
<img src="/2023/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-04/1fe54b34c77e0e1cd45fe1bf27289d1.jpg" class title="1fe54b34c77e0e1cd45fe1bf27289d1">
<p>特殊情况：</p>
<p>如果一个质心没有分配到任何点，可以：</p>
<ul>
<li>删除这个质心，变为k - 1个集群</li>
<li>重新随机分配质心位置，下轮继续（对集群数量比较严格）</li>
</ul>
<h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><img src="/2023/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-04/6b5ee73c9510a286b605d192ecdedaf.jpg" class title="6b5ee73c9510a286b605d192ecdedaf">
<p>收敛：损失函数不再下降</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>随机选择K个<strong>训练集样例</strong>作为质心初始点位</li>
<li>随机选择K个初始点位</li>
</ul>
<p>注意：单次运行K-means可能会导致局部最优解，所以要使用不同的初始化多次运行找损失函数的全局最小值</p>
<img src="/2023/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-04/eec23d73fa56882944dd846e81608e8.jpg" class title="eec23d73fa56882944dd846e81608e8">
<h3 id="选择聚类数量"><a href="#选择聚类数量" class="headerlink" title="选择聚类数量"></a>选择聚类数量</h3><p><strong>Elbow method</strong>：</p>
<p>选择一个尽量较大但之后更大J下降缓慢的点作为集群数量</p>
<img src="/2023/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-04/720fe78a4a915477220887efb57d905.jpg" class title="720fe78a4a915477220887efb57d905">
<p>缺点：应用场景局限性与人为性</p>
<p>更常用：<strong>根据业务需求</strong></p>
<p>栗子：衣服尺码</p>
<img src="/2023/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-04/9b27477623cb8b1b3e80851703ec600.jpg" class title="9b27477623cb8b1b3e80851703ec600">
<p>比较K = 3和K = 5的损失函数</p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>实现K-means：</p>
<p>找最近质心的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_closest_centroids</span>(<span class="params">X, centroids</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the centroid memberships for every example</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (ndarray): (m, n) Input values      </span></span><br><span class="line"><span class="string">        centroids (ndarray): k centroids</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        idx (array_like): (m,) closest centroids</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set K</span></span><br><span class="line">    K = centroids.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># You need to return the following variables correctly</span></span><br><span class="line">    idx = np.zeros(X.shape[<span class="number">0</span>], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(X.shape[<span class="number">0</span>]):</span><br><span class="line">        distance = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(centroids.shape[<span class="number">0</span>]):</span><br><span class="line">            norm_ij = np.linalg.norm(X[i] - centroids[j])  <span class="comment"># 默认返回二阶矩阵范数</span></span><br><span class="line">            distance.append(norm_ij)</span><br><span class="line">        idx[i] = np.argmin(distance)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### END CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> idx</span><br></pre></td></tr></table></figure>
<p>调整质心位置的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_centroids</span>(<span class="params">X, idx, K</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the new centroids by computing the means of the </span></span><br><span class="line"><span class="string">    data points assigned to each centroid.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (ndarray):   (m, n) Data points</span></span><br><span class="line"><span class="string">        idx (ndarray): (m,) Array containing index of closest centroid for each </span></span><br><span class="line"><span class="string">                       example in X. Concretely, idx[i] contains the index of </span></span><br><span class="line"><span class="string">                       the centroid closest to example i</span></span><br><span class="line"><span class="string">        K (int):       number of centroids</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        centroids (ndarray): (K, n) New centroids computed</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Useful variables</span></span><br><span class="line">    m, n = X.shape</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># You need to return the following variables correctly</span></span><br><span class="line">    centroids = np.zeros((K, n))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### START CODE HERE ###</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(K):</span><br><span class="line">        points = X[idx == k]</span><br><span class="line">        centroids[k] = np.mean(points, axis = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">### END CODE HERE ## </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> centroids</span><br></pre></td></tr></table></figure>
<p>K-means运行的核心函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_kMeans</span>(<span class="params">X, initial_centroids, max_iters=<span class="number">10</span>, plot_progress=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Runs the K-Means algorithm on data matrix X, where each row of X</span></span><br><span class="line"><span class="string">    is a single example</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize values</span></span><br><span class="line">    m, n = X.shape</span><br><span class="line">    K = initial_centroids.shape[<span class="number">0</span>]</span><br><span class="line">    centroids = initial_centroids  </span><br><span class="line">    idx = np.zeros(m)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Run K-Means</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_iters):</span><br><span class="line">        <span class="comment">#Output progress</span></span><br><span class="line">        print(<span class="string">&quot;K-Means iteration %d/%d&quot;</span> % (i, max_iters-<span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># For each example in X, assign it to the closest centroid</span></span><br><span class="line">        idx = find_closest_centroids(X, centroids)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Given the memberships, compute new centroids</span></span><br><span class="line">        centroids = compute_centroids(X, idx, K)</span><br><span class="line">    plt.show() </span><br><span class="line">    <span class="keyword">return</span> centroids, idx</span><br></pre></td></tr></table></figure>
<p>随机初始化K（以随机样例点为起点）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kMeans_init_centroids</span>(<span class="params">X, K</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This function initializes K centroids that are to be </span></span><br><span class="line"><span class="string">    used in K-Means on the dataset X</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (ndarray): Data points </span></span><br><span class="line"><span class="string">        K (int):     number of centroids/clusters</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        centroids (ndarray): Initialized centroids</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Randomly reorder the indices of examples</span></span><br><span class="line">    randidx = np.random.permutation(X.shape[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Take the first K examples as centroids</span></span><br><span class="line">    centroids = X[randidx[:K]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> centroids</span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load an example dataset</span></span><br><span class="line">X = load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set initial centroids</span></span><br><span class="line">K = <span class="number">3</span></span><br><span class="line">initial_centroids = kMeans_init_centroids(X, K)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of iterations</span></span><br><span class="line">max_iters = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">centroids, idx = run_kMeans(X, initial_centroids, max_iters, plot_progress=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h3 id="实际栗子"><a href="#实际栗子" class="headerlink" title="实际栗子"></a>实际栗子</h3><p> 以图像压缩为案例</p>
<p>将RGB图像压缩到只有16种颜色</p>
<p><strong>任务</strong>：针对128*128的彩色图像，以每个像素作为数据集，使用K-means算法找16种最优颜色进行相近颜色替代，从而做到图像压缩且画质依然优秀。</p>
<p>读取图像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load an image of a bird</span></span><br><span class="line">original_img = plt.imread(<span class="string">&#x27;bird_small.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visualizing the image</span></span><br><span class="line">plt.imshow(original_img)</span><br></pre></td></tr></table></figure>
<img src="/2023/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-04/image-20230730121606482.png" class title="image-20230730121606482">
<p>了解参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;Shape of original_img is:&quot;</span>, original_img.shape)</span><br><span class="line"><span class="comment"># Shape of original_img is: (128, 128, 3)</span></span><br></pre></td></tr></table></figure>
<p>数据调整（将<code>128 * 128 * 3</code>变为<code>16384 * 3</code>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Divide by 255 so that all values are in the range 0 - 1</span></span><br><span class="line">original_img = original_img / <span class="number">255</span></span><br><span class="line"></span><br><span class="line">X_img = np.reshape(original_img, (original_img.shape[<span class="number">0</span>] * original_img.shape[<span class="number">1</span>], <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>调用K-means算法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You should try different values of K and max_iters here</span></span><br><span class="line">K = <span class="number">16</span>                       </span><br><span class="line">max_iters = <span class="number">10</span>               </span><br><span class="line"></span><br><span class="line"><span class="comment"># Using the function you have implemented above. </span></span><br><span class="line">initial_centroids = kMeans_init_centroids(X_img, K) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Run K-Means - this takes a couple of minutes</span></span><br><span class="line">centroids, idx = run_kMeans(X_img, initial_centroids, max_iters) </span><br></pre></td></tr></table></figure>
<p>还原图像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Represent image in terms of indices</span></span><br><span class="line">X_recovered = centroids[idx, :] <span class="comment"># 将每个像素赋值为所属集群的代表RGB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reshape recovered image into proper dimensions</span></span><br><span class="line">X_recovered = np.reshape(X_recovered, original_img.shape) </span><br></pre></td></tr></table></figure>
<p>画图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Display original image</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>,<span class="number">2</span>, figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].imshow(original_img*<span class="number">255</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&#x27;Original&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_axis_off()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Display compressed image</span></span><br><span class="line">ax[<span class="number">1</span>].imshow(X_recovered*<span class="number">255</span>)</span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&#x27;Compressed with %d colours&#x27;</span>%K)</span><br><span class="line">ax[<span class="number">1</span>].set_axis_off()</span><br></pre></td></tr></table></figure>
<img src="/2023/07/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-04/image-20230730123230414.png" class title="image-20230730123230414">
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-05</title>
    <url>/2023/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-05/</url>
    <content><![CDATA[<p>学习异常检测</p>
<span id="more"></span>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>给定数据集{$x^{(1)}, $ $x^{(2)}$, …, $x^{(m)}$}，建立模型，根据模型判断新数据$x_{test}$是否异常（即是否与元数据集相似）</p>
<p>算法将找出具有高概率和低概率的值</p>
<p>如果：</p>
<ul>
<li>$p(x_{test}) &lt; \epsilon$ -&gt; 异常的信号</li>
<li>$p(x_{test}) &gt; \epsilon$ -&gt; OK</li>
</ul>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ul>
<li>欺诈检测</li>
<li>可疑账号检测</li>
<li>装置异常检测</li>
<li>商业、金融</li>
</ul>
<h1 id="高斯分布（正态分布）"><a href="#高斯分布（正态分布）" class="headerlink" title="高斯分布（正态分布）"></a>高斯分布（正态分布）</h1><script type="math/tex; mode=display">
p(x) = \frac{1}{\sqrt{2\pi}\sigma}e^{\frac{-(x-\mu)^2}{2\sigma}}</script><p>估计量：</p>
<script type="math/tex; mode=display">
\mu = \frac{1}{m}\sum_{i=1}^{m}x^{(i)}</script><script type="math/tex; mode=display">
\sigma^2 = \frac{1}{m}\sum_{i=1}^m(x^{(i)} - \mu)^2</script><h1 id="异常检测算法"><a href="#异常检测算法" class="headerlink" title="异常检测算法"></a>异常检测算法</h1><script type="math/tex; mode=display">
p(\vec x) = \prod_{j=1}^{n}p(x_j;\mu_j;\sigma^{2} )</script><p>各特征的概率独立，因此可以连乘</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul>
<li>选择n个特征xi</li>
<li>求出各自的$\mu_j$和$\sigma_j^2$</li>
<li>根据新给出的样例x，计算p(x)</li>
</ul>
<img src="/2023/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-05/image-20230730184506428.png" class title="image-20230730184506428">
<h1 id="模型评估与修正"><a href="#模型评估与修正" class="headerlink" title="模型评估与修正"></a>模型评估与修正</h1><ul>
<li>特征选取</li>
<li>$\epsilon$选取</li>
</ul>
<p>大量好的样例和少量异常的样例(还是标签)</p>
<ul>
<li>使用好的样例训练模型</li>
<li>在交叉验证集(CV)中混杂异常样例，根据损失函数调整$\epsilon$大小和特征</li>
<li>再测试集(test)中混杂异常样例，查看模型普适性和泛化能力</li>
</ul>
<p>或者：</p>
<p>由于异常数据很少，可以只包含训练集和交叉验证集</p>
<p>但因为没有测试集，观察不了实际表现，可能会过拟合</p>
<p>栗子：</p>
<img src="/2023/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-05/image-20230730190707956.png" class title="image-20230730190707956">
<p>在CV上验证评估模型时，可以使用<strong>精确率、召回率、F1分数</strong>（在偏数据集中经常使用）</p>
<h1 id="异常检测-VS-监督学习"><a href="#异常检测-VS-监督学习" class="headerlink" title="异常检测 VS 监督学习"></a>异常检测 VS 监督学习</h1><p>场景：异常数据远比正常数据少</p>
<img src="/2023/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-05/8298c62a076425cfe1293abaa00cc41.jpg" class title="8298c62a076425cfe1293abaa00cc41">
<p>异常检测：</p>
<ul>
<li>针对<strong>异常数据很少</strong>的情况</li>
<li>重点针对正常情况是什么样的进行分析，与正常情况偏离太大的数据都会是异常数据，所以不在数据集中的<strong>新的异常方式也有一定适应性</strong></li>
</ul>
<p>监督学习：</p>
<ul>
<li>针对<strong>大量</strong>的正常和异常数据</li>
<li>通过大量数据训练得到依照数据集的规律，所以所能预测的异常都只针对已出现的，<strong>对新型异常的适应性不强</strong></li>
</ul>
<h1 id="特征选择技巧"><a href="#特征选择技巧" class="headerlink" title="特征选择技巧"></a>特征选择技巧</h1><h2 id="高斯分布特征"><a href="#高斯分布特征" class="headerlink" title="高斯分布特征"></a>高斯分布特征</h2><p><strong>非高斯分布特征 -&gt; 变换 -&gt; 高斯分布特征</strong></p>
<p>变换方式：</p>
<ul>
<li>次幂</li>
<li>log(x + C) 据说C越高越好</li>
</ul>
<p>python plt的API：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.hist(x, bins=<span class="number">50</span>)   <span class="comment"># bins 直方图区间个数</span></span><br><span class="line">plt.hist(x ** <span class="number">0.4</span>, bins = <span class="number">50</span>)</span><br><span class="line">plt.hist(np.log(x + <span class="number">1</span>), bins = <span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><ul>
<li>希望p(x)对于正常样例足够大</li>
<li>希望p(x)对于异常样例足够小</li>
</ul>
<p>查看异常数据，如果其p(x)与有的正常数据的p(x)相近，那可能是有特征没有考虑进去</p>
<h2 id="组合特征"><a href="#组合特征" class="headerlink" title="组合特征"></a>组合特征</h2><p>根据已知特征进行组合</p>
<img src="/2023/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-05/e2d553b1e386125c1132cdec4588bc1.jpg" class title="e2d553b1e386125c1132cdec4588bc1">
<h1 id="implement-code"><a href="#implement-code" class="headerlink" title="implement code"></a>implement code</h1><p>计算$\mu$和$\sigma$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate_gaussian</span>(<span class="params">X</span>):</span></span><br><span class="line">    mu = <span class="number">1</span> / m * np.<span class="built_in">sum</span>(X, axis = <span class="number">0</span>)</span><br><span class="line">    var = (<span class="number">1</span> / m) * np.<span class="built_in">sum</span>((X - mu) ** <span class="number">2</span>, axis = <span class="number">0</span>) </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> mu, var</span><br></pre></td></tr></table></figure>
<p>阈值选择</p>
<img src="/2023/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-05/image-20230730203650407.png" class title="image-20230730203650407">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UNQ_C2</span></span><br><span class="line"><span class="comment"># GRADED FUNCTION: select_threshold</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_threshold</span>(<span class="params">y_val, p_val</span>):</span> </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Finds the best threshold to use for selecting outliers </span></span><br><span class="line"><span class="string">    based on the results from a validation set (p_val) </span></span><br><span class="line"><span class="string">    and the ground truth (y_val)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        y_val (ndarray): Ground truth on validation set</span></span><br><span class="line"><span class="string">        p_val (ndarray): Results on validation set</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        epsilon (float): Threshold chosen </span></span><br><span class="line"><span class="string">        F1 (float):      F1 score by choosing epsilon as threshold</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> </span><br><span class="line"></span><br><span class="line">    best_epsilon = <span class="number">0</span></span><br><span class="line">    best_F1 = <span class="number">0</span></span><br><span class="line">    F1 = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    step_size = (<span class="built_in">max</span>(p_val) - <span class="built_in">min</span>(p_val)) / <span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epsilon <span class="keyword">in</span> np.arange(<span class="built_in">min</span>(p_val), <span class="built_in">max</span>(p_val), step_size):</span><br><span class="line">    </span><br><span class="line">        predictions = (p_val &lt; epsilon)</span><br><span class="line">        </span><br><span class="line">        tp = np.<span class="built_in">sum</span>((predictions == <span class="number">1</span>) &amp; (y_val == <span class="number">1</span>))</span><br><span class="line">        fp = np.<span class="built_in">sum</span>((predictions == <span class="number">1</span>) &amp; (y_val == <span class="number">0</span>))</span><br><span class="line">        fn = np.<span class="built_in">sum</span>((predictions == <span class="number">0</span>) &amp; (y_val == <span class="number">1</span>))</span><br><span class="line">        </span><br><span class="line">        prec = tp / (tp + fp)  <span class="comment"># 精确率</span></span><br><span class="line">        rec = tp / (tp + fn)  <span class="comment"># 召回率</span></span><br><span class="line">        </span><br><span class="line">        F1 = <span class="number">2</span> * prec * rec / (prec + rec)  <span class="comment"># F1分数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> F1 &gt; best_F1:</span><br><span class="line">            best_F1 = F1</span><br><span class="line">            best_epsilon = epsilon</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> best_epsilon, best_F1</span><br></pre></td></tr></table></figure>
<p><strong>多元高斯分布计算函数</strong>：</p>
<img src="/2023/07/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-05/image-20230730204058301.png" class title="image-20230730204058301">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multivariate_gaussian</span>(<span class="params">X, mu, var</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Computes the probability </span></span><br><span class="line"><span class="string">    density function of the examples X under the multivariate gaussian </span></span><br><span class="line"><span class="string">    distribution with parameters mu and var. If var is a matrix, it is</span></span><br><span class="line"><span class="string">    treated as the covariance matrix. If var is a vector, it is treated</span></span><br><span class="line"><span class="string">    as the var values of the variances in each dimension (a diagonal</span></span><br><span class="line"><span class="string">    covariance matrix</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    k = <span class="built_in">len</span>(mu)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> var.ndim == <span class="number">1</span>:</span><br><span class="line">        var = np.diag(var)</span><br><span class="line">        </span><br><span class="line">    X = X - mu</span><br><span class="line">    p = (<span class="number">2</span>* np.pi)**(-k/<span class="number">2</span>) * np.linalg.det(var)**(-<span class="number">0.5</span>) * \</span><br><span class="line">        np.exp(-<span class="number">0.5</span> * np.<span class="built_in">sum</span>(np.matmul(X, np.linalg.pinv(var)) * X, axis=<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># np.linalg.det表示矩阵行列式，np.linalg.pinv表示矩阵的伪逆</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Estimate the Gaussian parameters</span></span><br><span class="line">mu, var = estimate_gaussian(X_train_high)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Evaluate the probabilites for the training set</span></span><br><span class="line">p = multivariate_gaussian(X_train, mu, var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Evaluate the probabilites for the cross validation set</span></span><br><span class="line">p_val = multivariate_gaussian(X_val, mu, var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find the best threshold</span></span><br><span class="line">epsilon, F1 = select_threshold(y_val, p_val)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Best epsilon found using cross-validation: %e&#x27;</span>% epsilon)</span><br><span class="line">print(<span class="string">&#x27;Best F1 on Cross Validation Set:  %f&#x27;</span>% F1)</span><br><span class="line">print(<span class="string">&#x27;# Anomalies found: %d&#x27;</span>% <span class="built_in">sum</span>(p_high &lt; epsilon))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-06</title>
    <url>/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/</url>
    <content><![CDATA[<p>学习推荐系统~</p>
<span id="more"></span>
<h1 id="理论成本函数"><a href="#理论成本函数" class="headerlink" title="理论成本函数"></a>理论成本函数</h1><img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/df23a3d1077a92dbc1c1b35fcfb58d9.jpg" class title="df23a3d1077a92dbc1c1b35fcfb58d9">
<script type="math/tex; mode=display">
min\ J(w^{(j)}, b^{(j)}) = \frac{1}{2m^{(j)}} \sum_{i:r(i, j) = 1}(w^{(j)} \cdot x^{(i)} + b^{(j) - y^{(i, j)}})^2</script><p> 正则化表示：</p>
<script type="math/tex; mode=display">
min\ J(w^{(j)}, b^{(j)}) = \frac{1}{2m^{(j)}} \sum_{i:r(i, j) = 1}(w^{(j)} \cdot x^{(i)} + b^{(j) - y^{(i, j)}})^2 + \frac{\lambda}{2m^{(j)}\sum_{k=1}^n(w_k^{(j)})^2}</script><p>推广到所有用户</p>
<img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/a8f12f0bdac1687ae7d67bc2f36cc30.jpg" class title="a8f12f0bdac1687ae7d67bc2f36cc30">
<h1 id="协同过滤算法"><a href="#协同过滤算法" class="headerlink" title="协同过滤算法"></a>协同过滤算法</h1><p>Collaborative Filtering Algorithm</p>
<h2 id="引入与概念"><a href="#引入与概念" class="headerlink" title="引入与概念"></a>引入与概念</h2><p>相反地考虑：</p>
<p>如果已经有w和b的参数值，那么我们也可以反推参数x</p>
<img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/1b518b626a6b9540c937404160fa550.jpg" class title="1b518b626a6b9540c937404160fa550">
<script type="math/tex; mode=display">
J(x^{(1)}, x^{(2)}, ..., x^{(n_m)}) = \frac{1}{2}\sum_{i=1}^{n_m}\sum_{j:r(i,j)=1}(w^{(j)} \cdot x^{(i)} +b^{(j)} - y^{(i, j)})^2 + \frac{\lambda}{2}\sum_{i=1}^{n_m}\sum_{k=1}^n(x_k^{(i)})^2</script><p>可以组合起来：</p>
<img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/fe08813b3780cdb6ae495aa09e0f962.jpg" class title="fe08813b3780cdb6ae495aa09e0f962">
<script type="math/tex; mode=display">
J(w, b, x) = \frac{1}{2}\sum_{(i, j):r(i, j) = 1}(w^{(j)} \cdot x^{(i)} +b^{(j)} - y^{(i, j)})^2 + \frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^n(w_k^{(j)})^2 + \frac{\lambda}{2}\sum_{i=1}^{n_m}\sum_{k=1}^n(x_k^{(i)})^2</script><p>现在损失函数是w,b,x三者的函数</p>
<p>所以梯度下降是针对三者的同步下降</p>
<script type="math/tex; mode=display">
w_i^{(j)} = w_i^{(j)} - \alpha \frac{\partial}{\partial w_i^{(j)}}J(w, b, x)</script><script type="math/tex; mode=display">
b^{(j)} = b^{(j)} - \alpha\frac{\partial}{\partial b^{(j)}}J(w, b, x)</script><script type="math/tex; mode=display">
x_k^{(i)} = x_k^{(i)} - \alpha\frac{\partial}{\partial x_k^{(i)}}J(w, b, x)</script><p>针对二进制标签的公式变形：</p>
<img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/64711d21a875f2e25a17f2b4efc5536.jpg" class title="64711d21a875f2e25a17f2b4efc5536">
<h2 id="均值归一化"><a href="#均值归一化" class="headerlink" title="均值归一化"></a>均值归一化</h2><p>简而言之：就是先减均值，再加均值</p>
<p>减完均值后放到$x^{(i)}$中，最后的方程再加上均值</p>
<img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/ad754b6cb7d4c491ae788dae6cf7bb7.jpg" class title="ad754b6cb7d4c491ae788dae6cf7bb7">
<p>优点：</p>
<ul>
<li>加速推荐系统搭建</li>
<li>针对没给出过样例或样例很少的新用户可以预测的更合理（即均值）</li>
</ul>
<h2 id="TensorFlow实现协同过滤算法"><a href="#TensorFlow实现协同过滤算法" class="headerlink" title="TensorFlow实现协同过滤算法"></a>TensorFlow实现协同过滤算法</h2><p>TensorFlow内置的gradient tape可以帮助我们实现偏导数的求解(梯度下降)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = tf.Variable(<span class="number">3.0</span>)</span><br><span class="line">x = <span class="number">1.0</span></span><br><span class="line">y = <span class="number">1.0</span> <span class="comment"># target value</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以J = (wx - 1) ^ 2为例</span></span><br><span class="line"></span><br><span class="line">iterations = <span class="number">30</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">iter</span> <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        fwb = w * x</span><br><span class="line">        costJ = (fwb - y) ** <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    [dJdw] = tape.gradient(costJ, [w])  <span class="comment"># Auto Diff</span></span><br><span class="line">    </span><br><span class="line">    w.assign_add(-alpha * dJdw)</span><br></pre></td></tr></table></figure>
<p>协同过滤算法实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Adam优化器</span></span><br><span class="line">optimizer = keras.optimizers.Adam(learning_rate=<span class="number">1e-1</span>)</span><br><span class="line"></span><br><span class="line">iterations = <span class="number">200</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">iter</span> <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">    <span class="keyword">with</span> tf.GradienTape() <span class="keyword">as</span> tape:</span><br><span class="line">        cost_value = cofiCostFuncV(X, W, b, Ynorm, R, num_users, num_movies, <span class="keyword">lambda</span>)  <span class="comment"># Ynorm: 归一化后评分y </span></span><br><span class="line">        grads = tape.gradient(cost_value, [X, W, b])</span><br><span class="line">        <span class="comment"># 使用Adam优化器迭代</span></span><br><span class="line">        optimizer.apply_gradients(<span class="built_in">zip</span>(grads, [X, W, b]))</span><br></pre></td></tr></table></figure>
<h2 id="寻找相关特征"><a href="#寻找相关特征" class="headerlink" title="寻找相关特征"></a>寻找相关特征</h2><p>如何判断两个样例的近似程度呢？</p>
<p>我们可以通过得到的$x^{(i)}$特征参数的<strong>距离</strong>来判断两个样例的近似程度</p>
<img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/0a0c86c56f769b43fd5c8abf58699b6.jpg" class title="0a0c86c56f769b43fd5c8abf58699b6">
<h2 id="目前算法存在的问题"><a href="#目前算法存在的问题" class="headerlink" title="目前算法存在的问题"></a>目前算法存在的问题</h2><p>主要问题：</p>
<ul>
<li><p><strong>冷启动</strong>问题</p>
<ul>
<li><p>如何处理没有多少评分的新的样例？</p>
</li>
<li><p>如何处理没有评过多少分的新用户？</p>
</li>
</ul>
</li>
<li><p>使用项目或用户的<strong>边缘信息</strong></p>
<ul>
<li>项目：类型等</li>
<li>用户：性别、年龄、位置、偏好</li>
</ul>
</li>
</ul>
<h2 id="implement-code"><a href="#implement-code" class="headerlink" title="implement code"></a>implement code</h2><p>损失函数计算</p>
<script type="math/tex; mode=display">
J(w, b, x) = \frac{1}{2m}\sum_{(i, j):r(i, j) = 1}(w^{(j)} \cdot x^{(i)} +b^{(j)} - y^{(i, j)})^2 + \frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^n(w_k^{(j)})^2 + \frac{\lambda}{2}\sum_{i=1}^{n_m}\sum_{k=1}^n(x_k^{(i)})^2</script><p>暴力实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cofi_cost_func</span>(<span class="params">X, W, b, Y, R, lambda_</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the cost for the content-based filtering</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (num_movies,num_features)): matrix of item features</span></span><br><span class="line"><span class="string">      W (ndarray (num_users,num_features)) : matrix of user parameters</span></span><br><span class="line"><span class="string">      b (ndarray (1, num_users)            : vector of user parameters</span></span><br><span class="line"><span class="string">      Y (ndarray (num_movies,num_users)    : matrix of user ratings of movies</span></span><br><span class="line"><span class="string">      R (ndarray (num_movies,num_users)    : matrix, where R(i, j) = 1 if the i-th movies was rated by the j-th user</span></span><br><span class="line"><span class="string">      lambda_ (float): regularization parameter</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      J (float) : Cost</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    nm, nu = Y.shape</span><br><span class="line">    J = <span class="number">0</span></span><br><span class="line">    <span class="comment">### START CODE HERE ###  </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(nu):</span><br><span class="line">        w = W[j, :]</span><br><span class="line">        b_j = b[<span class="number">0</span>,j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nm):</span><br><span class="line">            x = X[i, :]</span><br><span class="line">            y = Y[i, j]</span><br><span class="line">            r = R[i, j]</span><br><span class="line">            J += np.square(r * (np.dot(w, x) - y + b_j))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正则化</span></span><br><span class="line">    J += lambda_ * (np.<span class="built_in">sum</span>(np.square(W)) + np.<span class="built_in">sum</span>(np.square(X)))</span><br><span class="line">    </span><br><span class="line">    J /= <span class="number">2</span></span><br><span class="line">    <span class="comment">### END CODE HERE ### </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> J</span><br></pre></td></tr></table></figure>
<p>向量API实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cofi_cost_func_v</span>(<span class="params">X, W, b, Y, R, lambda_</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the cost for the content-based filtering</span></span><br><span class="line"><span class="string">    Vectorized for speed. Uses tensorflow operations to be compatible with custom training loop.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">      X (ndarray (num_movies,num_features)): matrix of item features</span></span><br><span class="line"><span class="string">      W (ndarray (num_users,num_features)) : matrix of user parameters</span></span><br><span class="line"><span class="string">      b (ndarray (1, num_users)            : vector of user parameters</span></span><br><span class="line"><span class="string">      Y (ndarray (num_movies,num_users)    : matrix of user ratings of movies</span></span><br><span class="line"><span class="string">      R (ndarray (num_movies,num_users)    : matrix, where R(i, j) = 1 if the i-th movies was rated by the j-th user</span></span><br><span class="line"><span class="string">      lambda_ (float): regularization parameter</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">      J (float) : Cost</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    j = (tf.linalg.matmul(X, tf.transpose(W)) + b - Y)*R</span><br><span class="line">    J = <span class="number">0.5</span> * tf.reduce_sum(j**<span class="number">2</span>) + (lambda_/<span class="number">2</span>) * (tf.reduce_sum(X**<span class="number">2</span>) + tf.reduce_sum(W**<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> J</span><br></pre></td></tr></table></figure>
<p>模拟添加新用户及其部分评分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">movieList, movieList_df = load_Movie_List_pd()</span><br><span class="line"></span><br><span class="line">my_ratings = np.zeros(num_movies)          <span class="comment">#  Initialize my ratings</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the file small_movie_list.csv for id of each movie in our dataset</span></span><br><span class="line"><span class="comment"># For example, Toy Story 3 (2010) has ID 2700, so to rate it &quot;5&quot;, you can set</span></span><br><span class="line">my_ratings[<span class="number">2700</span>] = <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#Or suppose you did not enjoy Persuasion (2007), you can set</span></span><br><span class="line">my_ratings[<span class="number">2609</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># We have selected a few movies we liked / did not like and the ratings we</span></span><br><span class="line"><span class="comment"># gave are as follows:</span></span><br><span class="line">my_ratings[<span class="number">929</span>]  = <span class="number">5</span>   <span class="comment"># Lord of the Rings: The Return of the King, The</span></span><br><span class="line">my_ratings[<span class="number">246</span>]  = <span class="number">5</span>   <span class="comment"># Shrek (2001)</span></span><br><span class="line">my_ratings[<span class="number">2716</span>] = <span class="number">3</span>   <span class="comment"># Inception</span></span><br><span class="line">my_ratings[<span class="number">1150</span>] = <span class="number">5</span>   <span class="comment"># Incredibles, The (2004)</span></span><br><span class="line">my_ratings[<span class="number">382</span>]  = <span class="number">2</span>   <span class="comment"># Amelie (Fabuleux destin d&#x27;Amélie Poulain, Le)</span></span><br><span class="line">my_ratings[<span class="number">366</span>]  = <span class="number">5</span>   <span class="comment"># Harry Potter and the Sorcerer&#x27;s Stone (a.k.a. Harry Potter and the Philosopher&#x27;s Stone) (2001)</span></span><br><span class="line">my_ratings[<span class="number">622</span>]  = <span class="number">5</span>   <span class="comment"># Harry Potter and the Chamber of Secrets (2002)</span></span><br><span class="line">my_ratings[<span class="number">988</span>]  = <span class="number">3</span>   <span class="comment"># Eternal Sunshine of the Spotless Mind (2004)</span></span><br><span class="line">my_ratings[<span class="number">2925</span>] = <span class="number">1</span>   <span class="comment"># Louis Theroux: Law &amp; Disorder (2008)</span></span><br><span class="line">my_ratings[<span class="number">2937</span>] = <span class="number">1</span>   <span class="comment"># Nothing to Declare (Rien à déclarer)</span></span><br><span class="line">my_ratings[<span class="number">793</span>]  = <span class="number">5</span>   <span class="comment"># Pirates of the Caribbean: The Curse of the Black Pearl (2003)</span></span><br><span class="line">my_rated = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(my_ratings)) <span class="keyword">if</span> my_ratings[i] &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\nNew user ratings:\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(my_ratings)):</span><br><span class="line">    <span class="keyword">if</span> my_ratings[i] &gt; <span class="number">0</span> :</span><br><span class="line">        print(<span class="string">f&#x27;Rated <span class="subst">&#123;my_ratings[i]&#125;</span> for  <span class="subst">&#123;movieList_df.loc[i,<span class="string">&quot;title&quot;</span>]&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>将新用户加入数据集中并归一化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reload ratings and add new ratings</span></span><br><span class="line">Y, R = load_ratings_small()</span><br><span class="line">Y    = np.c_[my_ratings, Y]</span><br><span class="line">R    = np.c_[(my_ratings != <span class="number">0</span>).astype(<span class="built_in">int</span>), R]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize the Dataset</span></span><br><span class="line">Ynorm, Ymean = normalizeRatings(Y, R)</span><br></pre></td></tr></table></figure>
<p>归一化函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalizeRatings</span>(<span class="params">Y, R</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Preprocess data by subtracting mean rating for every movie (every row).</span></span><br><span class="line"><span class="string">    Only include real ratings R(i,j)=1.</span></span><br><span class="line"><span class="string">    [Ynorm, Ymean] = normalizeRatings(Y, R) normalized Y so that each movie</span></span><br><span class="line"><span class="string">    has a rating of 0 on average. Unrated moves then have a mean rating (0)</span></span><br><span class="line"><span class="string">    Returns the mean rating in Ymean.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    Ymean = (np.<span class="built_in">sum</span>(Y*R,axis=<span class="number">1</span>)/(np.<span class="built_in">sum</span>(R, axis=<span class="number">1</span>)+<span class="number">1e-12</span>)).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    Ynorm = Y - np.multiply(Ymean, R) </span><br><span class="line">    <span class="keyword">return</span>(Ynorm, Ymean)</span><br></pre></td></tr></table></figure>
<p>初始化参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  Useful Values</span></span><br><span class="line">num_movies, num_users = Y.shape</span><br><span class="line">num_features = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Initial Parameters (W, X), use tf.Variable to track these variables</span></span><br><span class="line">tf.random.set_seed(<span class="number">1234</span>) <span class="comment"># for consistent results</span></span><br><span class="line">W = tf.Variable(tf.random.normal((num_users,  num_features),dtype=tf.float64),  name=<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">X = tf.Variable(tf.random.normal((num_movies, num_features),dtype=tf.float64),  name=<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">b = tf.Variable(tf.random.normal((<span class="number">1</span>,          num_users),   dtype=tf.float64),  name=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Instantiate an optimizer.</span></span><br><span class="line">optimizer = keras.optimizers.Adam(learning_rate=<span class="number">1e-1</span>)</span><br></pre></td></tr></table></figure>
<p>训练模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iterations = <span class="number">200</span></span><br><span class="line">lambda_ = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">iter</span> <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">    <span class="comment"># Use TensorFlow’s GradientTape</span></span><br><span class="line">    <span class="comment"># to record the operations used to compute the cost </span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute the cost (forward pass included in cost)</span></span><br><span class="line">        cost_value = cofi_cost_func_v(X, W, b, Ynorm, R, lambda_)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use the gradient tape to automatically retrieve</span></span><br><span class="line">    <span class="comment"># the gradients of the trainable variables with respect to the loss</span></span><br><span class="line">    grads = tape.gradient( cost_value, [X,W,b] )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Run one step of gradient descent by updating</span></span><br><span class="line">    <span class="comment"># the value of the variables to minimize the loss.</span></span><br><span class="line">    optimizer.apply_gradients( <span class="built_in">zip</span>(grads, [X,W,b]) )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Log periodically.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">iter</span> % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">f&quot;Training loss at iteration <span class="subst">&#123;<span class="built_in">iter</span>&#125;</span>: <span class="subst">&#123;cost_value:<span class="number">0.1</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>推荐与查看模型效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Make a prediction using trained weights and biases</span></span><br><span class="line">p = np.matmul(X.numpy(), np.transpose(W.numpy())) + b.numpy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#restore the mean</span></span><br><span class="line">pm = p + Ymean</span><br><span class="line"></span><br><span class="line">my_predictions = pm[:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort predictions</span></span><br><span class="line">ix = tf.argsort(my_predictions, direction=<span class="string">&#x27;DESCENDING&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    j = ix[i]</span><br><span class="line">    <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> my_rated:</span><br><span class="line">        print(<span class="string">f&#x27;Predicting rating <span class="subst">&#123;my_predictions[j]:<span class="number">0.2</span>f&#125;</span> for movie <span class="subst">&#123;movieList[j]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n\nOriginal vs Predicted ratings:\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(my_ratings)):</span><br><span class="line">    <span class="keyword">if</span> my_ratings[i] &gt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">f&#x27;Original <span class="subst">&#123;my_ratings[i]&#125;</span>, Predicted <span class="subst">&#123;my_predictions[i]:<span class="number">0.2</span>f&#125;</span> for <span class="subst">&#123;movieList[i]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>表格查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">filter</span>=(movieList_df[<span class="string">&quot;number of ratings&quot;</span>] &gt; <span class="number">20</span>)</span><br><span class="line">movieList_df[<span class="string">&quot;pred&quot;</span>] = my_predictions</span><br><span class="line">movieList_df = movieList_df.reindex(columns=[<span class="string">&quot;pred&quot;</span>, <span class="string">&quot;mean rating&quot;</span>, <span class="string">&quot;number of ratings&quot;</span>, <span class="string">&quot;title&quot;</span>])</span><br><span class="line">movieList_df.loc[ix[:<span class="number">300</span>]].loc[<span class="built_in">filter</span>].sort_values(<span class="string">&quot;mean rating&quot;</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h1 id="基于内容的过滤算法"><a href="#基于内容的过滤算法" class="headerlink" title="基于内容的过滤算法"></a>基于内容的过滤算法</h1><p>协同过滤算法：根据与你相似的用户给出的评分去给你推荐产品</p>
<p>基于内容过滤算法：根据用户和项目特征去找到好的<strong>匹配</strong>去给你推荐产品</p>
<h2 id="神经网络架构"><a href="#神经网络架构" class="headerlink" title="神经网络架构"></a>神经网络架构</h2><p>如何做用户特征$X_u$，项目特征$X_m$到$V_u$，$V_m$的映射？通过神经网络</p>
<p>$V_u$和$V_m$具有相同的结构，所以输出层的神经元个数先沟通</p>
<img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/ab4fada99f98bba9efce7dfc017f70d.jpg" class title="ab4fada99f98bba9efce7dfc017f70d">
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/9a3bc6f74cde4405ea78d3bd2dc8c9e.jpg" class title="9a3bc6f74cde4405ea78d3bd2dc8c9e">
<img src="/2023/08/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-06/ec5ddc706a5ccfd063bfc0708ccaff8.jpg" class title="ec5ddc706a5ccfd063bfc0708ccaff8">
<h2 id="推荐步骤"><a href="#推荐步骤" class="headerlink" title="推荐步骤"></a>推荐步骤</h2><ul>
<li>检索<ul>
<li>生成一个候选项目大列表<ul>
<li>针对用户最近看的10部电影推荐10部相似的</li>
<li>针对用户最多看的3中类型，找10个最高评分电影</li>
<li>20部最高评分电影</li>
</ul>
</li>
<li>合并这些电影成为列表，删除冗余（用户已看过）</li>
</ul>
</li>
<li>排序<ul>
<li>根据上述列表（对大型目录的缩减）使用模型去打分排序</li>
<li>根据排序向用户展示推荐列表</li>
</ul>
</li>
</ul>
<p>权衡：</p>
<ul>
<li>检索更多项目会导致推荐系统更好的表现，但会降低推荐的速率</li>
<li>去分析和优化，可以去做离线实验</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li>电影推荐</li>
<li>产品推荐（最可能下单）</li>
<li>广告推荐（最可能点击）</li>
<li>高利润产品推荐（用户需求不一定处于第一位）</li>
<li>视频黏性增加用户观看时长</li>
</ul>
<h2 id="TensorFlow实现基于内容过滤算法"><a href="#TensorFlow实现基于内容过滤算法" class="headerlink" title="TensorFlow实现基于内容过滤算法"></a>TensorFlow实现基于内容过滤算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_outputs = <span class="number">32</span></span><br><span class="line">tf.random.set_seed(<span class="number">1</span>)</span><br><span class="line">user_NN = tf.keras.models.Sequential([</span><br><span class="line">    <span class="comment">### START CODE HERE ###   </span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">256</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(num_outputs),</span><br><span class="line">    <span class="comment">### END CODE HERE ###  </span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">item_NN = tf.keras.models.Sequential([</span><br><span class="line">    <span class="comment">### START CODE HERE ###     </span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">256</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    tf.keras.layers.Dense(num_outputs),</span><br><span class="line">    <span class="comment">### END CODE HERE ###  </span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the user input and point to the base network</span></span><br><span class="line">input_user = tf.keras.layers.Input(shape=(num_user_features))</span><br><span class="line">vu = user_NN(input_user)</span><br><span class="line">vu = tf.linalg.l2_normalize(vu, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the item input and point to the base network</span></span><br><span class="line">input_item = tf.keras.layers.Input(shape=(num_item_features))</span><br><span class="line">vm = item_NN(input_item)</span><br><span class="line">vm = tf.linalg.l2_normalize(vm, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compute the dot product of the two vectors vu and vm</span></span><br><span class="line">output = tf.keras.layers.Dot(axes=<span class="number">1</span>)([vu, vm])</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify the inputs and output of the model</span></span><br><span class="line">model = Model([input_user, input_item], output)</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">tf.random.set_seed(<span class="number">1</span>)</span><br><span class="line">cost_fn = tf.keras.losses.MeanSquaredError()</span><br><span class="line">opt = keras.optimizers.Adam(learning_rate=<span class="number">0.01</span>)</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=opt, loss=cost_fn)</span><br><span class="line"></span><br><span class="line">tf.random.set_seed(<span class="number">1</span>)</span><br><span class="line">model.fit([user_train[:, u_s:], item_train[:, i_s:]], ynorm_train, epochs=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">model.evaluate([user_test[:, u_s:], item_test[:, i_s:]], ynorm_test)</span><br></pre></td></tr></table></figure>
<p>PS:</p>
<p>为了加速推荐系统的效率，$V_m$可以在用户接入网络前就计算好</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-07</title>
    <url>/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/</url>
    <content><![CDATA[<p>激动人心的强化学习！</p>
<span id="more"></span>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ul>
<li>机器人控制</li>
<li>工厂优化</li>
<li>金融股票交易</li>
<li>游戏AI</li>
</ul>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>奖惩机制</p>
<p>内部自己学习，黑盒</p>
<ul>
<li>State</li>
<li>Action</li>
<li>Reword</li>
<li>new State’</li>
</ul>
<script type="math/tex; mode=display">
(S_g, a_g, R(S), S')</script><ul>
<li><p>the return 回报</p>
</li>
<li><p>折扣因子 discount factor</p>
<p>让算法关注眼前的程度（每一步长乘一个r，就像利率折现）</p>
</li>
</ul>
<img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/07aeeabab85e1629fd718b20c5e1bb4.jpg" class title="07aeeabab85e1629fd718b20c5e1bb4">
<p>所以，该算法的效果可以总结为：</p>
<ul>
<li>趁早得到正反馈</li>
<li>推迟遭受或不遭受负反馈</li>
</ul>
<p>强化学习算法的<strong>目标</strong>：找到一个策略，在获知每一种所处情况下，可以提供相应的行动去最大化回报 State — function($\pi$) —&gt; Action</p>
<h2 id="马尔科夫决策过程-MDP"><a href="#马尔科夫决策过程-MDP" class="headerlink" title="马尔科夫决策过程 MDP"></a>马尔科夫决策过程 MDP</h2><p>在强化学习中，智能体观测得到环境的当前状态之后，采取动作，环境进入下一个状态，智能体又得到下一个环境状态的信息，形成一个循环回路。</p>
<script type="math/tex; mode=display">
\pi(S) = a</script><h2 id="状态动作价值函数"><a href="#状态动作价值函数" class="headerlink" title="状态动作价值函数"></a>状态动作价值函数</h2><p>Q函数</p>
<img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/26e2ac6442fb346eb345025357091f9.jpg" class title="26e2ac6442fb346eb345025357091f9">
<script type="math/tex; mode=display">
max\ Q(s, a)</script><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="贝尔曼方程"><a href="#贝尔曼方程" class="headerlink" title="贝尔曼方程"></a>贝尔曼方程</h2><img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/250f99a361490a801e43e693eafbce0.jpg" class title="250f99a361490a801e43e693eafbce0">
<script type="math/tex; mode=display">
Q(s,a) = R(s) + \gamma \ maxQ(s', a')</script><p>递归终点</p>
<script type="math/tex; mode=display">
Q(s,a)=R(s)</script><h2 id="random-stochastic-environment"><a href="#random-stochastic-environment" class="headerlink" title="random stochastic environment"></a>random stochastic environment</h2><p>模拟随机环境</p>
<p>会加入走相反方向或尝试其他操作的概率</p>
<img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/bc51caa0fa3452ca7a835955c0c348e.jpg" class title="bc51caa0fa3452ca7a835955c0c348e">
<script type="math/tex; mode=display">
Q(s,a) = R(s) + \gamma \ E[maxQ(s', a')]</script><p>最终未来回报部分演化为期望，即均值</p>
<h1 id="连续状态空间应用"><a href="#连续状态空间应用" class="headerlink" title="连续状态空间应用"></a>连续状态空间应用</h1><p><strong>汽车控制</strong>（二维平面内假设）：</p>
<ul>
<li>$x$ x轴位置</li>
<li>$y$ y轴位置</li>
<li>$\theta$ 面朝方向</li>
<li>$\dot x$ x方向速度</li>
<li>$\dot y$ y方向速度</li>
<li>$\dot \theta$ 旋转角速度</li>
</ul>
<p><strong>直升机控制</strong>：</p>
<ul>
<li>$x$ x轴位置</li>
<li>$y$ y轴位置</li>
<li>$z$ 面朝方向</li>
<li>$\phi$ 向左翻滚向右翻滚  x &amp; z</li>
<li>$\theta$ 向前翻滚向后翻滚 y &amp; z</li>
<li>$\omega$ 机头朝向 x &amp; y</li>
<li>$\dot x$ x方向速度</li>
<li>$\dot y$ y方向速度</li>
<li>$\dot z$ z方向速度</li>
<li>$\dot \phi$ 向左翻滚向右翻滚  x &amp; z</li>
<li>$\dot \theta$ 向前翻滚向后翻滚 y &amp; z</li>
<li>$\dot \omega$ 机头朝向 x &amp; y</li>
</ul>
<h2 id="实际案例：登月器"><a href="#实际案例：登月器" class="headerlink" title="实际案例：登月器"></a>实际案例：登月器</h2><img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/b1a7ad9b4d1f98addfc0fd4c1a34f4c.jpg" class title="b1a7ad9b4d1f98addfc0fd4c1a34f4c">
<p>状态定义：</p>
<ul>
<li>$x$ x轴位置</li>
<li>$y$ y轴位置</li>
<li>$\dot x$ x轴径向速度</li>
<li>$\dot y$ y轴径向速度</li>
<li>$\theta$ 偏离角度</li>
<li>$\dot \theta$ 角速度</li>
<li>$l$ 左脚是否着地（二进制 01）</li>
<li>$r$ 右脚是否着地（二进制 01）</li>
</ul>
<p>奖惩函数：</p>
<ul>
<li>降落到指定区域：100~140（根据降落位置差别给出）</li>
<li>对于靠近着陆点奖励，对于远离着陆点惩罚</li>
<li>Crash：-100</li>
<li>软着陆：+100</li>
<li>有腿着陆：+10</li>
<li>每启动一次主推进器（向上推进）：-0.3</li>
<li>每启动一次侧推进器（向左右推进）：-0.03</li>
</ul>
<h2 id="深度强化学习"><a href="#深度强化学习" class="headerlink" title="深度强化学习"></a>深度强化学习</h2><p>DQN</p>
<p>输入向量：</p>
<ul>
<li>8个状态特征 + 4个行为特征（nothing，left，main，right）</li>
</ul>
<img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/8987f5cbee0e53fa00e0ffbe763126b.jpg" class title="8987f5cbee0e53fa00e0ffbe763126b">
<ul>
<li>迭代地创建映射数据和训练网络，优化模型</li>
</ul>
<img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/35c5b0c1267470902fa0376a0e37813.jpg" class title="35c5b0c1267470902fa0376a0e37813">
<h2 id="改进方式"><a href="#改进方式" class="headerlink" title="改进方式"></a>改进方式</h2><h3 id="输出改进"><a href="#输出改进" class="headerlink" title="输出改进"></a>输出改进</h3><p>输出从一个特征转为四个特征，之后选最大值即可</p>
<img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/9be3de8231f6a522b7d8c8a7846d549.jpg" class title="9be3de8231f6a522b7d8c8a7846d549">
<h3 id="epsilon-贪婪策略"><a href="#epsilon-贪婪策略" class="headerlink" title="$\epsilon$贪婪策略"></a>$\epsilon$贪婪策略</h3><p>随机选取 -&gt; 有目的选取</p>
<ul>
<li><p>方式一：</p>
<p>选取行动a使得最大化$Q(s, a)$ </p>
</li>
<li><p>方式二：</p>
<p>95%概率选取行动a最大化$Q(s, a)$；（<strong>剥削步骤</strong> Exploitation）</p>
<p>5%概率随机选取行动a （<strong>探索步骤</strong> Exploration）</p>
<p>其中$\epsilon$ = 0.05</p>
</li>
</ul>
<p>$\epsilon$的变化过程：<strong>Gradually decrease</strong>（1.0 -&gt; 0.01）</p>
<p>注意：超参数的选择很重要，选择不好训练会花费的时间可能超级加倍</p>
<h3 id="小批量"><a href="#小批量" class="headerlink" title="小批量"></a>小批量</h3><p>mini-batch</p>
<p>如果<strong>数据量太大</strong>，每一次计算损失函数和梯度下降的过程都要全部过一遍，速度会极慢</p>
<p>可以选择每次迭代都换一批训练集，使用不同的小的训练集进行迭代训练和梯度下降，效果会如下：</p>
<img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/702dfcaaaa8fd35c1aaba922f89d9b6.jpg" class title="702dfcaaaa8fd35c1aaba922f89d9b6">
<p>对应到应用的改进：</p>
<img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/9c91245ed424c469e11967c26f791f8.jpg" class title="9c91245ed424c469e11967c26f791f8">
<h3 id="软更新"><a href="#软更新" class="headerlink" title="软更新"></a>软更新</h3><p>$Set Q = Q_{new}$转变为：</p>
<p>$W = 0.01 W_{new} + 0.09W$</p>
<p>$B = 0.01B_{new} + 0.99B$</p>
<h1 id="强化学习的局限性"><a href="#强化学习的局限性" class="headerlink" title="强化学习的局限性"></a>强化学习的局限性</h1><ul>
<li>将强化学习运用到模拟环境或游戏中的难度会比真正运用到机器人的难度要低，所以要找好技术适用方向</li>
<li>如今的强化学习运用远比监督和无监督学习少</li>
<li>强化学习的未来研究潜力会很大</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><img src="/2023/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-07/1c111be7f84d83707286d807b534154.jpg" class title="1c111be7f84d83707286d807b534154">
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础01</title>
    <url>/2022/09/06/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8001/</url>
    <content><![CDATA[<ul>
<li>快速排序</li>
<li>归并排序</li>
<li>二分法（整数、浮点数）</li>
<li>高精度（java大数类）</li>
<li>前缀和 差分</li>
<li>双指针算法</li>
<li>位运算</li>
<li>离散化</li>
<li>区间合并</li>
</ul>
<span id="more"></span>
<h2 id="看数据范围知算法"><a href="#看数据范围知算法" class="headerlink" title="看数据范围知算法"></a>看数据范围知算法</h2><img src="/2022/09/06/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8001/image-20221229215448578.png" class title="image-20221229215448578">
<h2 id="快速排序-（分治）平均nlogn"><a href="#快速排序-（分治）平均nlogn" class="headerlink" title="快速排序    （分治）平均nlogn"></a>快速排序    （分治）平均nlogn</h2><ul>
<li>确定分界点：q[l], q[r],q[(l+r)/2], 随机</li>
<li>调整区间：保证左边所有的数小于等于x，右边所有的数大于等于x</li>
<li>递归处理左右两段</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    quick_sort(q, l, j);</span><br><span class="line">    quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">    quick_sort(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java模板：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">quick_sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = a[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j) &#123;</span><br><span class="line">            <span class="keyword">do</span> i++; <span class="keyword">while</span> (a[i] &lt; x);</span><br><span class="line">            <span class="keyword">do</span> j--; <span class="keyword">while</span> (a[j] &gt; x);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = a[i];</span><br><span class="line">                a[i] = a[j];</span><br><span class="line">                a[j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(a, l, j);</span><br><span class="line">        quickSort(a, j+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(a, <span class="number">0</span>, n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)System.out.printf(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对边界小结下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">quickSort(q, l, j);</span><br><span class="line">quickSort(q, j + <span class="number">1</span>, r);</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">quickSort(q, l, i - <span class="number">1</span>);</span><br><span class="line">quickSort(q, i, r);</span><br></pre></td></tr></table></figure>
<p>是因为对于第一次处理后的数组，索引i左侧的数字都是小于等于x，但不包括q[i]。索引i右侧的数字都是大于等于x，包括q[i]。故区间分为[l,i-1]和[i,r]。<br>同理，对于第一次处理后的数组，索引j左侧的数字都是小于等于x，包括q[j]。索引j右侧的数字都是大于等于x，不包括q[j]。故区间分为[l,j]和[j+1,r]。</p>
<p>再对x位置小结：</p>
<p>如果区间取[l,i-1]和[i,r]这种，那么x不应该取左边界(l、(l+r)/2)。（防止无限循环）<br>应取 <code>x = q[r]; x = q[(l+r+1)/2];</code></p>
<p>如果区间取[l,j]和[j+1,r]这种，那么x不应该取右边界(如r、(l+r+1)/2)。<br>应取 <code>x = q[l]; x = q[(l+r)/2];</code></p>
<p>自己选择其中一种即可。</p>
<h2 id="归并排序-nlogn"><a href="#归并排序-nlogn" class="headerlink" title="归并排序    nlogn"></a>归并排序    nlogn</h2><ul>
<li>确定分界点：mid = (l+r)/2</li>
<li>递归排序（left和right）</li>
<li>归并-&gt;合二为一</li>
</ul>
<p>C++模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    merge_sort(q, l, mid), merge_sort(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    merge_sort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">merge_sort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        mergeSort(a, l, mid);</span><br><span class="line">        mergeSort(a, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i++];</span><br><span class="line">            <span class="keyword">else</span> tmp[k++] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) tmp[k++] = a[i++];</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= r) tmp[k++] = a[j++];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) a[i] = tmp[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = sc.nextInt();</span><br><span class="line">        mergeSort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) System.out.printf(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p>二分模板一共有两个，分别适用于不同情况。<br>算法思路：假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l = r时，我们就找到了目标值。</p>
<p>版本1<br>当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1;，计算mid时不需要加1。</p>
<p>C++ 代码模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>版本2<br>当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid;，此时为了防止死循环，计算mid时需要加1。</p>
<p>C++ 代码模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>这两个模板解决的是 找&gt;=||&lt;=||&gt;||&lt; 某个数的最左或最右的位置 但这个数不一定在二分的数组中如果在就能准确找到如果不在 找到的就是最接近答案的数（你要找大于等于5的第一个数）但数组中没有5 那找到的就是6的位置(如果有6的话)</em><br><em>所以二分是一定有答案的</em></p>
<h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//整数划分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binary_search</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> q = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (a[mid] &gt;= k) r = mid;</span><br><span class="line">                <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a[l] != k) System.out.println(<span class="string">&quot;-1 -1&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d &quot;</span>, l);</span><br><span class="line"></span><br><span class="line">                l = <span class="number">0</span>;</span><br><span class="line">                r = n - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                    <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (a[mid] &lt;= k) l = mid;</span><br><span class="line">                    <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\n&quot;</span>, l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>形象栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;<span class="comment">//第一个&gt;=5的数</span></span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid] &gt;= <span class="number">5</span>)r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(l);<span class="comment">//1</span></span><br><span class="line">        </span><br><span class="line">        l = <span class="number">0</span>; r = a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;<span class="comment">//最后一个&gt;=5的数</span></span><br><span class="line">            <span class="keyword">int</span> mid = l + r + <span class="number">1</span>&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid] &lt;= <span class="number">5</span>)l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(l);<span class="comment">//2</span></span><br><span class="line">        </span><br><span class="line">        l = <span class="number">0</span>; r = a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;<span class="comment">//最后一个&lt;5的数</span></span><br><span class="line">            <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid] &lt; <span class="number">5</span>)l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(l);<span class="comment">//0</span></span><br><span class="line">        </span><br><span class="line">        l = <span class="number">0</span>; r = a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;<span class="comment">//第一个&gt;5的数</span></span><br><span class="line">            <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid] &gt; <span class="number">5</span>)r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(l);<span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h3><p>求sqrt(x)：Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数二分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binary_search_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">double</span> x = sc.nextDouble();</span><br><span class="line">        <span class="keyword">double</span> l = <span class="number">0</span>, r = Math.max(<span class="number">1</span>, (<span class="keyword">int</span>) x + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt; <span class="number">1e-8</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid * mid &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%f&quot;</span>, l);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><h3 id="C-加法模板"><a href="#C-加法模板" class="headerlink" title="C++加法模板"></a>C++加法模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.size() &lt; B.size()) <span class="keyword">return</span> add(B, A);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i ++ )</span><br><span class="line">	&#123;</span><br><span class="line">    	t += A[i];</span><br><span class="line">    	<span class="keyword">if</span> (i &lt; B.size()) t += B[i];</span><br><span class="line">    	C.push_back(t % <span class="number">10</span>);</span><br><span class="line">    	t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t) C.push_back(t);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">auto</span> C = add(A, B);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>压位代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> base = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.size() &lt; B.size()) <span class="keyword">return</span> add(B, A);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i ++ )</span><br><span class="line">	&#123;</span><br><span class="line">    	t += A[i];</span><br><span class="line">    	<span class="keyword">if</span> (i &lt; B.size()) t += B[i];</span><br><span class="line">    	C.push_back(t % base);</span><br><span class="line">    	t /= base;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (t) C.push_back(t);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>, s = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">	&#123;</span><br><span class="line">    	s += (a[i] - <span class="string">&#x27;0&#x27;</span>) * t;</span><br><span class="line">    	j ++, t *= <span class="number">10</span>;</span><br><span class="line">    	<span class="keyword">if</span> (j == <span class="number">9</span> || i == <span class="number">0</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">        	A.push_back(s);</span><br><span class="line">        	s = j = <span class="number">0</span>;</span><br><span class="line">        	t = <span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = b.size() - <span class="number">1</span>, s = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">	&#123;</span><br><span class="line">    	s += (b[i] - <span class="string">&#x27;0&#x27;</span>) * t;</span><br><span class="line">    	j ++, t *= <span class="number">10</span>;</span><br><span class="line">    	<span class="keyword">if</span> (j == <span class="number">9</span> || i == <span class="number">0</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">        	B.push_back(s);</span><br><span class="line">        	s = j = <span class="number">0</span>;</span><br><span class="line">        	t = <span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = add(A, B);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; C.back();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">printf</span>(<span class="string">&quot;%09d&quot;</span>, C[i]);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-减法模板"><a href="#C-减法模板" class="headerlink" title="C++减法模板"></a>C++减法模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.size() != B.size()) <span class="keyword">return</span> A.size() &gt; B.size();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = A.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    	<span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">        	<span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.size(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.size()) t -= B[i];</span><br><span class="line">        C.push_back((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();	<span class="comment">//去掉前导0</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (cmp(A, B)) C = sub(A, B);</span><br><span class="line">	<span class="keyword">else</span> C = sub(B, A), <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-乘法模板"><a href="#C-乘法模板" class="headerlink" title="C++乘法模板"></a>C++乘法模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size() || t; i ++ )</span><br><span class="line">	&#123;</span><br><span class="line">    	<span class="keyword">if</span> (i &lt; A.size()) t += A[i] * b;</span><br><span class="line">    	C.push_back(t % <span class="number">10</span>);</span><br><span class="line">    	t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> C = mul(A, b);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-除法模板"><a href="#C-除法模板" class="headerlink" title="C++除法模板"></a>C++除法模板</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.push_back(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(C.begin(), C.end());</span><br><span class="line">    <span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> B;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; B;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> r;</span><br><span class="line">	<span class="keyword">auto</span> C = div(A, B, r);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Java大数类"><a href="#Java大数类" class="headerlink" title="Java大数类"></a>Java大数类</h3><p>BigInteger和BigDecimal都位于<code>java.math</code>包中(不要和<code>java.lang.Math</code>搞混了!!).</p>
<p>BigInteger类提供了四个最基本的BigInteger常量,分别是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(BigInteger.ONE);<span class="comment">//输出1</span></span><br><span class="line">System.out.println(BigInteger.TEN);<span class="comment">//输出10</span></span><br><span class="line">System.out.println(BigInteger.TWO);<span class="comment">//输出2</span></span><br><span class="line">System.out.println(BigInteger.ZERO);<span class="comment">//输出0</span></span><br></pre></td></tr></table></figure>
<p>常用构造方法：</p>
<ul>
<li>BigInteger(String val)<br>将BigInteger的十进制String表示转换为BigInteger。</li>
<li>BigInteger(String val, int radix) 将指定基数中的BigInteger的String表示转换为BigInteger。</li>
</ul>
<p>以下是大整数相关的api</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//随便打的两个数,不过用生成随机大整数不是更香嘛</span></span><br><span class="line">        BigInteger number1 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;347238462384523623645237465237415234165234615246742354&quot;</span>);</span><br><span class="line">        BigInteger number2 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;42673547263541874637462394142837645&quot;</span>);</span><br><span class="line">        <span class="comment">//返回一个BigInteger，其值为该BigInteger的绝对值。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abs():&quot;</span> + number1.abs().toString());</span><br><span class="line">        <span class="comment">//返回值为BigInteger (this / val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;divide():&quot;</span> + number1.divide(number2));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this % val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;remainder():&quot;</span> + number1.remainder(number2));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this + val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;add():&quot;</span> + number1.add(number2).toString());</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this &lt;&lt; n)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;shiftLeft():&quot;</span> + number1.shiftLeft(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this &gt;&gt; n)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;shiftRight():&quot;</span> + number1.shiftRight(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//返回此BigInteger的signum函数 返回-1,0,1作为BigInteger的符号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;signum():&quot;</span> + number1.signum());</span><br><span class="line">        <span class="comment">//返回此BigInteger的整数平方根。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sqrt():&quot;</span> + number1.sqrt());</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this &amp; val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;and():&quot;</span> + number1.and(number2));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this &amp; ~val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;andNot():&quot;</span> + number1.andNot(number2));</span><br><span class="line">        <span class="comment">//返回此BigInteger的二进制补码表示形式中不同于其符号位的位数.</span></span><br><span class="line">        <span class="comment">//此方法在此BigInteger，从它的符号位不同的补码表示返回的比特数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;bitCount():&quot;</span> + number1.bitCount());</span><br><span class="line">        <span class="comment">// 返回此BigInteger的最小2补码表示形式中的位数，不包括符号位。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;bitLength():&quot;</span> + number1.bitLength());</span><br><span class="line">        <span class="comment">//将其转换BigInteger为byte，以检查是否丢失了信息。如果超出了,会丢出一个ArithmeticException异常</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;byteValueExact():&quot;+number1.byteValueExact());</span></span><br><span class="line">        <span class="comment">//返回一个BigInteger，其值等于该BigInteger，并且清除了指定的位。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;clearBit:&quot;</span> + number2.clearBit(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//将此BigInteger与指定的BigInteger进行比较。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;compareTo():&quot;</span> + number1.compareTo(number2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回两个BigIntegers组成的数组，其中包含(this / val) 后跟(this % val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;divideAndRemainder():&quot;</span> + Arrays.toString(number1.divideAndRemainder(number2)));</span><br><span class="line">        <span class="comment">//将此BigInteger转换为double。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;doubleValue():&quot;</span> + number1.doubleValue());</span><br><span class="line">        <span class="comment">//将此BigInteger转换为float。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;floatValue():&quot;</span> + number1.floatValue());</span><br><span class="line"></span><br><span class="line"><span class="comment">//     返回此BigInteger和的最大值val。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;max():&quot;</span> + number1.max(number2));</span><br><span class="line">        <span class="comment">//返回此BigInteger和的最小值val。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;min():&quot;</span> + number1.min(number2));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this mod m)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;mod():&quot;</span> + number1.mod(number2));</span><br><span class="line">        <span class="comment">//返回值为(this-1 的BigInteger mod m)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;modInverse():&quot;</span> + number1.modInverse(number2));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger 。(thisexponent mod m)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;modPow():&quot;</span> + number1.modPow(BigInteger.valueOf(<span class="number">1</span>), number2));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this * val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;multiply():&quot;</span> + number1.multiply(number2));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (-this)。 </span></span><br><span class="line">        System.out.println(<span class="string">&quot;negate():&quot;</span> + number1.negate());</span><br><span class="line">        <span class="comment">//将此BigInteger与指定的Object比较是否相等。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;equals()就不说了,大家都明白....&quot;</span>);</span><br><span class="line">        <span class="comment">//返回一个BigInteger，其值等于该BigInteger的指定位被翻转。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;flipBit():&quot;</span> + number1.flipBit(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//返回一个BigInteger，其值是abs(this)和的最大公约数 abs(val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;gcd():&quot;</span> + number1.gcd(number2));</span><br><span class="line">        <span class="comment">//返回此BigInteger中最右边（最低位）的一位的索引（最右边一位的右边的零位数）。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getLowestSetBit():&quot;</span> + number1.getLowestSetBit());</span><br><span class="line">        <span class="comment">//返回此BigInteger的哈希码。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hashCode():&quot;</span> + number1.hashCode());</span><br><span class="line">        <span class="comment">//将此BigInteger转换为int。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;intValue():&quot;</span> + number1.intValue());</span><br><span class="line">        <span class="comment">// 将此转换BigInteger为int，以检查是否丢失了信息。</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;intValueExact():&quot;+number1.intValueExact());</span></span><br><span class="line">        <span class="comment">//true如果此BigInteger可能是质数，false则返回， 如果它绝对是复合的。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;isProbablePrime():&quot;</span> + number1.isProbablePrime(<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//将此BigInteger转换为long。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;longValue():&quot;</span> + number1.longValue());</span><br><span class="line">        <span class="comment">//将其转换BigInteger为long，以检查是否丢失了信息。</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;longValueExact()&quot;+number1.longValueExact());</span></span><br><span class="line">        <span class="comment">//将其转换BigInteger为short，以检查是否丢失了信息。</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;shortValueExact&quot;+number1.shortValueExact());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回大于此BigInteger可能是质数的第一个整数。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;nextProbablePrime():&quot;</span> + number1.nextProbablePrime());</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (~this)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;not():&quot;</span> + number1.not());</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this | val)。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;or():&quot;</span> + number1.or(number2));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger 。(thisexponent)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;pow():&quot;</span> + number1.pow(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//返回带有指定bitLength的正BigInteger（可能是素数）。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;probablePrime():&quot;</span> + number1.probablePrime(<span class="number">10</span>, <span class="keyword">new</span> Random(<span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回一个BigInteger，其值与此指定位设置的BigInteger等效。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;setBit():&quot;</span> + number1.setBit(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分别返回包含整数平方根两个BigInteger的平方根 s的this和它的其余部分this - s*s。</span></span><br><span class="line">        BigInteger[] arr1 = number1.sqrtAndRemainder();</span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + arr1[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this - val)。        </span></span><br><span class="line">        System.out.println(<span class="string">&quot;subtract():&quot;</span> + number1.subtract(number2));</span><br><span class="line">        <span class="comment">// true仅当设置了指定位时返回。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;testBit():&quot;</span> + number1.testBit(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 返回一个字节数组，其中包含此BigInteger的二进制补码表示形式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;toByteArray():&quot;</span> + Arrays.toString(number1.toByteArray()));</span><br><span class="line">        <span class="comment">//返回此BigInteger的十进制String表示形式。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;toString()不多说了....&quot;</span>);</span><br><span class="line">        <span class="comment">//以给定的基数返回此BigInteger的String表示形式。</span></span><br><span class="line">        <span class="comment">//返回此BigInteger在给定的基数的字符串表示形式。如果基数是从Character.MIN_RADIX到Character.MAX_RADIX包容的范围内，它会默认为10(因为Integer.toString的情况下)</span></span><br><span class="line">        <span class="comment">//说白了就是修改进制...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;toString(int radix):&quot;</span> + number1.toString(<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//返回一个BigInteger，其值等于指定的long。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;valueOf():&quot;</span> + BigInteger.valueOf(<span class="number">8</span>));</span><br><span class="line">        <span class="comment">//返回值为的BigInteger (this ^ val)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;xor(BigInteger val):&quot;</span> + number1.xor(number2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下是结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abs():347238462384523623645237465237415234165234615246742354</span><br><span class="line">divide():8137089242665013774</span><br><span class="line">remainder():534213018473473171115567876020124</span><br><span class="line">add():347238462384523623687911012500957108802697009389579999</span><br><span class="line">shiftLeft():694476924769047247290474930474830468330469230493484708</span><br><span class="line">shiftRight():173619231192261811822618732618707617082617307623371177</span><br><span class="line">signum():1</span><br><span class="line">sqrt():589269431062331302776634508</span><br><span class="line">and():42188789727018586573424610810872576</span><br><span class="line">andNot():347238462384523623603048675510396647591810004435869778</span><br><span class="line">bitCount():82</span><br><span class="line">bitLength():178</span><br><span class="line">clearBit:42673547263541874637462394142837644</span><br><span class="line">compareTo():1</span><br><span class="line">divideAndRemainder():[8137089242665013774, 534213018473473171115567876020124]</span><br><span class="line">doubleValue():3.4723846238452363E53</span><br><span class="line">floatValue():Infinity</span><br><span class="line">max():347238462384523623645237465237415234165234615246742354</span><br><span class="line">min():42673547263541874637462394142837645</span><br><span class="line">mod():534213018473473171115567876020124</span><br><span class="line">modInverse():17920544566730946678389678251539389</span><br><span class="line">modPow():534213018473473171115567876020124</span><br><span class="line">multiply():14817896936285576249282678241822399816218930984900061135427897710474330996361247767116330</span><br><span class="line">negate():-347238462384523623645237465237415234165234615246742354</span><br><span class="line">equals()就不说了,大家都明白....</span><br><span class="line">flipBit():347238462384523623645237465237415234165234615246742352</span><br><span class="line">gcd():1</span><br><span class="line">getLowestSetBit():1</span><br><span class="line">hashCode():-79126074</span><br><span class="line">intValue():1848206162</span><br><span class="line">isProbablePrime():false</span><br><span class="line">longValue():4432267828819223378</span><br><span class="line">nextProbablePrime():347238462384523623645237465237415234165234615246742411</span><br><span class="line">not():-347238462384523623645237465237415234165234615246742355</span><br><span class="line">or():347238462384523623645722222773938522229272398578707423</span><br><span class="line">pow():120574549759168227502336599248901286606998151874104553572496655773107041720898305500980652795649209257461316</span><br><span class="line">probablePrime():761</span><br><span class="line">setBit():347238462384523623645237465237415234165234615246742386</span><br><span class="line">589269431062331302776634508 683332853438534624230340290</span><br><span class="line">subtract():347238462384523623602563917973873359527772221103904709</span><br><span class="line">testBit():true</span><br><span class="line">toByteArray():[3, -96, 22, 50, -125, 1, -106, 62, 10, -24, 25, 111, -23, -33, -88, 61, -126, -108, 27, 110, 41, 99, 82]</span><br><span class="line">toString()不多说了....</span><br><span class="line">toString(int radix):164005431203003130760256403133764737520366024501555612261522</span><br><span class="line">valueOf():10</span><br><span class="line">xor(BigInteger val):347238462384523623603533433046919935655847787767834847</span><br></pre></td></tr></table></figure>
<p>另外需要大整数的题目对于Scanner一般都不友好,所以可能需要修改一下…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个小小的模板,贼好使..</span></span><br><span class="line">BufferedReader inScanner = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));    </span><br><span class="line">String[] liStrings=inScanner.readLine().split(<span class="string">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>运算</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Big_Operation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BigInteger a = <span class="keyword">new</span> BigInteger(br.readLine());</span><br><span class="line">        BigInteger b = <span class="keyword">new</span> BigInteger(br.readLine());</span><br><span class="line">        System.out.println(a.add(b));</span><br><span class="line">        System.out.println(a.subtract(b));</span><br><span class="line">        System.out.println(a.multiply(b));</span><br><span class="line">        BigInteger[] c = a.divideAndRemainder(b);</span><br><span class="line">        System.out.println(c[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(c[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前缀和差分"><a href="#前缀和差分" class="headerlink" title="前缀和差分"></a>前缀和差分</h2><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>一维：</p>
<p><code>Si = a1 + a2 + ... + ai</code>        </p>
<p><code>S0 = 0</code></p>
<p>初始化算法：<code>S[i] = S[i-1] + a[i]</code></p>
<p>作用：<code>S[r] - S[l-1] = sum[l,r]</code></p>
<p>预处理：O(n)    询问：O(1)</p>
<p>二维：</p>
<p><code>S[i][j]</code>表示矩阵0~i-1行， 0~j-1列的所有元素的和</p>
<p><code>S[x2][y2] - S[x1-1][y2] - S[x2][y1-1] + S[x1-1][y1-1]  = sum[x1~x2][y1~y2]</code></p>
<p><code>S[i][j] = S[i-1][j] + S[i][j-1] - S[i-1][j-1] + a[i][j]</code> </p>
<p>一维模板：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prefix_add</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> r = sc.nextInt();</span><br><span class="line">            System.out.println(s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二维模板：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prefix_add_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> q = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] s = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                s[i][j] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span> (q-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y1 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> x2 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y2 = sc.nextInt();</span><br><span class="line">            System.out.println(s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><p>一维</p>
<p>a[1],a[2],…,a[n]</p>
<p>构造b[1],b[2],…,b[n]</p>
<p>使得a[n] = b[1] + b[2] + … + b[n]</p>
<p>即a为b的前缀和， b为a的差分</p>
<p>b[1] = a[1]        b[2] = a[2] - a[1]    bn = a[n] - a[n-1]</p>
<p>O(n)    B-&gt;A</p>
<p>一维模板：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;<span class="comment">//b数组是a数组的前缀和</span></span><br><span class="line">    	b[l] += c;</span><br><span class="line">    	b[r+<span class="number">1</span>] -= c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	<span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">    	<span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">        	a[i] = sc.nextInt();</span><br><span class="line">        	insert(i, i, a[i]);<span class="comment">//构造原始b数组</span></span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">while</span>(m--!=<span class="number">0</span>)&#123;</span><br><span class="line">        	<span class="keyword">int</span> l = sc.nextInt();</span><br><span class="line">        	<span class="keyword">int</span> r = sc.nextInt();</span><br><span class="line">        	<span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">        	insert(l, r, c);</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        	b[i] += b[i-<span class="number">1</span>];<span class="comment">//a[i] = a[i-1] + b[i];</span></span><br><span class="line">        	System.out.printf(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>二维模板：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">difference_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] b = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        b[x1][y1] += c;</span><br><span class="line">        b[x1][y2 + <span class="number">1</span>] -= c;</span><br><span class="line">        b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">        b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> q = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                a[i][j] = sc.nextInt();</span><br><span class="line">                insert(i, j, i, j, a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span> (q-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y1 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> x2 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y2 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">            insert(x1, y1, x2, y2, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                a[i][j] = a[i - <span class="number">1</span>][j] + a[i][j - <span class="number">1</span>] - a[i - <span class="number">1</span>][j - <span class="number">1</span>] + b[i][j];<span class="comment">//前缀和还原</span></span><br><span class="line">                System.out.print(a[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h2><p>将O(n^2)降到0(n)</p>
<p>栗子：</p>
<p>单词输出：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">1000</span>];</span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n &amp;&amp; str[j] != <span class="string">&#x27; &#x27;</span>)j++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这道题的具体逻辑</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt; j; k++)<span class="built_in">cout</span> &lt;&lt; str[k];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键：看i,j之间有无单调关系</p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><ul>
<li>n的二进制表示中第k位（个位是第0位）是几：</li>
</ul>
<ol>
<li>先把第k位移到最后一位    n &gt;&gt; k</li>
<li>看个位是几 x &amp; 1</li>
</ol>
<p>-&gt; n &gt;&gt; k &amp; 1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">3</span>; k &gt;= <span class="number">0</span>; k--)<span class="built_in">cout</span> &lt;&lt; (n &gt;&gt; k &amp; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>lowbit 树状数组基本操作</li>
</ul>
<p>返回x的最后一位1</p>
<p>x &amp; -x</p>
<ol>
<li>求一个数二进制表示中1的个数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                a[i] -= lowbit(a[i]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p>值域：0~10^9    个数：10^5</p>
<ol>
<li>a[]中可能重复元素（去重）</li>
<li>如何算出a[i]离散化后的值</li>
</ol>
<p>栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">discretization</span> </span>&#123; <span class="comment">//离散化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">300010</span>;<span class="comment">//2m + n &lt;= 300000</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//离散化后数组存值</span></span><br><span class="line">        <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//a数组的前缀和</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; alls = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//用来存所有下标 x, l, r</span></span><br><span class="line"></span><br><span class="line">        List&lt;Pair&gt; add = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//用来存n次加法</span></span><br><span class="line"></span><br><span class="line">        List&lt;Pair&gt; query = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//用来存m次询问</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入n次加法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">            add.add(<span class="keyword">new</span> Pair(x, c));</span><br><span class="line">            alls.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输入m次询问</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> r = sc.nextInt();</span><br><span class="line">            query.add(<span class="keyword">new</span> Pair(l, r));</span><br><span class="line">            alls.add(l);</span><br><span class="line">            alls.add(r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Collections.sort(alls); <span class="comment">//对取到的所有值排序</span></span><br><span class="line">        <span class="keyword">int</span> unique = unique(alls); <span class="comment">//去重</span></span><br><span class="line">        alls = alls.subList(<span class="number">0</span>, unique);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Pair item : add) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = find(item.first, alls);</span><br><span class="line">            a[index] += item.second;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//前缀和预处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= alls.size(); i++) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理询问返回结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Pair item : query) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = find(item.first, alls);</span><br><span class="line">            <span class="keyword">int</span> r = find(item.second, alls);</span><br><span class="line">            System.out.println(s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二分查找,返回要找元素下标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (list.get(mid) &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r + <span class="number">1</span>;<span class="comment">//映射下标为1,2,...,n</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//去重</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">unique</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || !Objects.equals(list.get(i), list.get(i - <span class="number">1</span>))) &#123;</span><br><span class="line">                list.set(j, list.get(i));</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first;</span><br><span class="line">        <span class="keyword">int</span> second;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.first = x;</span><br><span class="line">            <span class="keyword">this</span>.second = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>HashMap</code>和<code>TreeSet</code>的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a = a; <span class="keyword">this</span>.b = b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Pair&gt; insert = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> List&lt;Pair&gt; query = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[] s = <span class="keyword">new</span> <span class="keyword">long</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> c = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">            insert.add(<span class="keyword">new</span> Pair(x, c));</span><br><span class="line">            set.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> l = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> r = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">            query.add(<span class="keyword">new</span> Pair(l, r));</span><br><span class="line">            set.add(l); set.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(Integer i : set)&#123;</span><br><span class="line">            map.put(i, p++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Pair pair : insert)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = pair.a;</span><br><span class="line">            <span class="keyword">int</span> c = pair.b;</span><br><span class="line">            <span class="keyword">int</span> pos = map.get(x);</span><br><span class="line">            s[pos] += c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)&#123;</span><br><span class="line">            s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Pair pair : query)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = map.get(pair.a);</span><br><span class="line">            <span class="keyword">int</span> r = map.get(pair.b);</span><br><span class="line">            System.out.println(s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区间合并-贪心"><a href="#区间合并-贪心" class="headerlink" title="区间合并    贪心"></a>区间合并    贪心</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">interval_merge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Interval</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> start, end;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Interval</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.start = l;</span><br><span class="line">            <span class="keyword">this</span>.end = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Interval object)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(start, object.start);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        List&lt;Interval&gt; intervals = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> r = sc.nextInt();</span><br><span class="line">            intervals.add(<span class="keyword">new</span> Interval(l, r));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(intervals);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = intervals.get(<span class="number">0</span>).start;</span><br><span class="line">        <span class="keyword">int</span> end = intervals.get(<span class="number">0</span>).end;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;<span class="comment">//初始已经取了一个</span></span><br><span class="line">        <span class="keyword">for</span> (Interval interval : intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (interval.start &lt;= end) end = Math.max(end, interval.end);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                start = interval.start;</span><br><span class="line">                end = interval.end;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础04</title>
    <url>/2023/01/10/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8004/</url>
    <content><![CDATA[<ul>
<li>数论<ul>
<li>质数</li>
<li>约数</li>
</ul>
</li>
<li>欧拉函数</li>
<li>快速幂</li>
<li>扩展欧几里得</li>
<li>高斯消元</li>
<li>组合计数</li>
<li>容斥原理</li>
<li>简单博弈论</li>
</ul>
<span id="more"></span>
<p><strong>a/b上取整 = (a + b - 1) / b</strong></p>
<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><p>在大于1的整数中，如果只包含1和本身这两个约数，就被称为质数，或者叫素数</p>
<h3 id="（1）质数的判定——试除法"><a href="#（1）质数的判定——试除法" class="headerlink" title="（1）质数的判定——试除法"></a>（1）质数的判定——试除法</h3><p><code>O(sqrt(n))</code></p>
<p>写成<code>i &lt;= n / i</code>    <code>i * i &lt; n</code>可能会溢出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n / i; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（2）分解质因数——试除法"><a href="#（2）分解质因数——试除法" class="headerlink" title="（2）分解质因数——试除法"></a>（2）分解质因数——试除法</h3><p> <code>O(logn) ~ O(sqrt(n))</code></p>
<p>从小到大枚举所有数</p>
<p>n中最多只包含一个大于sqrt(n)的质因子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n / i; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;<span class="comment">//成立则i一定为质数</span></span><br><span class="line">            <span class="keyword">int</span> s = <span class="number">0</span>;<span class="comment">//幂</span></span><br><span class="line">            <span class="keyword">while</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line">                n /= i;</span><br><span class="line">                s++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>)println(n + <span class="string">&quot; 1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（3）质数筛"><a href="#（3）质数筛" class="headerlink" title="（3）质数筛"></a>（3）质数筛</h3><p>A. 埃式筛法：复杂度<code>O(nloglogn)</code></p>
<p>质数定理：1~n中有<code>n/lnn</code>个质数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] primes = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= n; j += i)st[j] = <span class="keyword">true</span>;<span class="comment">//化简为只筛质数的倍数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>B. 线性筛法：复杂度<code>O(n)</code></p>
<p><strong>合数n只会被其最小质因子筛掉</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. i % pj == 0</span><br><span class="line">  pj一定是i的最小质因子,pj一定是pj*i的最小质因子</span><br><span class="line">2. i% pj != 0</span><br><span class="line">  pj一定小于i的所有质因子,pj也一定是pj*i的最小质因子</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] primes = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])primes[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j++)&#123;</span><br><span class="line">            st[primes[j] * i] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. primes[j] &lt;= n / i</span><br><span class="line">保证primes[j] * i &lt;= n st不会超出范围</span><br><span class="line">2. 筛数有顺序,有规范 -&gt; 合数pj*i只会被其最小质因数筛掉</span><br><span class="line"></span><br><span class="line">//1)当i%primes[j]!=0时,说明此时遍历到的primes[j]不是i的质因子，那么只可能是此时的primes[j]&lt;i的</span><br><span class="line">//最小质因子,所以primes[j]*i的最小质因子就是primes[j];</span><br><span class="line">//2)当有i%primes[j]==0时,说明i的最小质因子是primes[j],因此primes[j]*i的最小质因子也就应该是</span><br><span class="line">//prime[j]，之后接着用st[primes[j+1]*i]=true去筛合数时，就不是用最小质因子去更新了,因为i有最小</span><br><span class="line">//质因子primes[j]&lt;primes[j+1],此时的primes[j+1]不是primes[j+1]*i的最小质因子，此时就应该</span><br><span class="line">//退出循环，避免之后重复进行筛选。</span><br></pre></td></tr></table></figure>
<h2 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h2><h3 id="（1）试除法求一个数的所有约数"><a href="#（1）试除法求一个数的所有约数" class="headerlink" title="（1）试除法求一个数的所有约数"></a>（1）试除法求一个数的所有约数</h3><p>复杂度<code>O(sqrt(n))</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get_divisors</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x / i; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            <span class="keyword">if</span> (i != x / i) list.add(x / i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(list);<span class="comment">//排序复杂度logn*loglogn</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : list)&#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有int范围内的质数个数：105097565</p>
<p>所有int范围内的整数(2147483647)，约数个数最多的数是1600个(2095133040)（一个数n的约数个数可以用log(n)估计）</p>
<p>1百万以内：最大一个720720 -&gt;有240个约数</p>
<h3 id="（2）约数个数"><a href="#（2）约数个数" class="headerlink" title="（2）约数个数"></a>（2）约数个数</h3><p>基于算数基本定理：</p>
<script type="math/tex; mode=display">N = P_1^{\alpha_1}P_2^{\alpha_2}P_3^{\alpha_3}...P_k^{\alpha_k}</script><script type="math/tex; mode=display">
d = P_1^{\beta_1}P_2^{\beta_2}P_3^{\beta_3}...P_k^{\beta_k}
(0<=\beta_i<=\alpha_i)</script><p>约数个数：</p>
<script type="math/tex; mode=display">
(\alpha_1 + 1)(\alpha_2 + 1)(\alpha_3 + 1)...(\alpha_k + 1)</script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getDivisors_number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod = (<span class="keyword">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//创建一个哈希表</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(n-- != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(x % i == <span class="number">0</span>)&#123;</span><br><span class="line">                    x /= i;</span><br><span class="line">                    map.put(i, map.getOrDefault(i, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; <span class="number">1</span>)map.put(x, map.getOrDefault(x, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> res1 = <span class="number">1L</span>;<span class="comment">//res1 -&gt; 约数个数</span></span><br><span class="line">        <span class="keyword">for</span>(Integer key : map.keySet())res1 = res1 * (map.get(key) + <span class="number">1</span>) % mod;</span><br><span class="line">        System.out.println(res1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（3）约数之和"><a href="#（3）约数之和" class="headerlink" title="（3）约数之和"></a>（3）约数之和</h3><p>约数之和：</p>
<script type="math/tex; mode=display">
(P_1^0+P_1^1+...+P_1^{\alpha_1})*(P_2^0+P_2^1+...+P_2^{\alpha_2})*...*(P_k^0+P_k^1+...+P_k^{\alpha_k})</script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getDivisors_Sum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod = (<span class="keyword">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//创建一个哈希表</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(n-- != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(x % i == <span class="number">0</span>)&#123;</span><br><span class="line">                    x /= i;</span><br><span class="line">                    map.put(i, map.getOrDefault(i, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; <span class="number">1</span>)map.put(x, map.getOrDefault(x, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> res2 = <span class="number">1L</span>;</span><br><span class="line">        <span class="keyword">for</span>(Integer p : map.keySet())&#123;</span><br><span class="line">            <span class="keyword">int</span> a = map.get(p);</span><br><span class="line">            <span class="keyword">long</span> t = <span class="number">1L</span>;</span><br><span class="line">            <span class="keyword">while</span>(a -- != <span class="number">0</span>)t = (t * p + <span class="number">1</span>) % mod;</span><br><span class="line">            res2 = res2 * t % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（4）最大公因数"><a href="#（4）最大公因数" class="headerlink" title="（4）最大公因数"></a>（4）最大公因数</h3><p>辗转相除法<code>O(logn)</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">gcd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GCD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : GCD(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(n-- != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">            System.out.println(GCD(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><img src="/2023/01/10/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8004/image-20221106174836232.png" class title="image-20221106174836232">
<script type="math/tex; mode=display">
\varphi(n) = 1到n中与n互质的数的个数</script><p>特别的，1和任何n互质，n和n不互质</p>
<p>（互质：两个数的公因数只有1）</p>
<p>分解质因数</p>
<script type="math/tex; mode=display">
N = P_1^{\alpha_1}P_2^{\alpha_2}P_3^{\alpha_3}...P_k^{\alpha_k}</script><script type="math/tex; mode=display">
\varphi(n)=N(1-\frac{1}{P_1})(1-\frac{1}{P_2})...(1-\frac{1}{P_k})</script><p>证明：</p>
<p>容斥原理：</p>
<ol>
<li>从1~N中去掉p1,p2,…,pk的所有倍数</li>
</ol>
<script type="math/tex; mode=display">
N-\frac{N}{P_1}-\frac{N}{P_2}-...--\frac{N}{P_k}</script><ol>
<li>加上所有pi*pj的倍数</li>
</ol>
<script type="math/tex; mode=display">
+\frac{N}{P_1P_2}+\frac{N}{P_1P_3}+...</script><ol>
<li>减去所有pi <em> pj </em> pk的倍数</li>
</ol>
<script type="math/tex; mode=display">
-\frac{N}{P_1P_2P_3}-\frac{N}{P_1P_2P_4}-...</script><ol>
<li>….</li>
</ol>
<p>代码：</p>
<p>复杂度O(sqrt(n))</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1</span>)res = res / x * (x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>筛法求欧拉函数（在线性筛法的基础上）</p>
<p>复杂度：O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] primes = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] phi = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get_Euler</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;<span class="comment">//针对质数的欧拉函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j++) &#123;</span><br><span class="line">            st[i * primes[j]] = <span class="keyword">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) &#123;<span class="comment">//pj是i的最小质因数</span></span><br><span class="line">                phi[i * primes[j]] = phi[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           phi[i * primes[j]] = phi[i] * (primes[j] - <span class="number">1</span>);<span class="comment">//pj小于i的最小质因数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        res += phi[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>补充：</p>
<ul>
<li>欧拉定理：</li>
</ul>
<p>若a与n互质，则有</p>
<script type="math/tex; mode=display">
a^{\varphi(n)} mod n = 1</script><ul>
<li>费马小定理：</li>
</ul>
<p>当p为质数，整数a不是p的倍数（互质的更弱条件）时:</p>
<script type="math/tex; mode=display">
a^{p-1} mod p = 1</script><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>快速求出<code>a^k mod p</code>的结果</p>
<p>复杂度：O(log k)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">PMI</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span></span>&#123;<span class="comment">//a ^ b % p</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">1</span>) res = (<span class="keyword">int</span>)((<span class="keyword">long</span>)res * a % p);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (<span class="keyword">int</span>) ((<span class="keyword">long</span>)a * a % p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p><strong>裴蜀定理</strong>：对于任意正整数a,b，那么一定存在非零整数x,y，使得：<code>ax + by = gcd(a,b)</code></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">裴蜀定理      -------   扩展欧几里得算法</span><br><span class="line">可以求出最大公约数d，且可以求出 ax + by = d 的系数 </span><br><span class="line">(a, b)</span><br><span class="line">ax + by = d</span><br><span class="line">a&#x27; = a / d</span><br><span class="line">b&#x27; = b / d</span><br><span class="line"></span><br><span class="line">//任意一组解</span><br><span class="line">x = x0 + kb&#x27;</span><br><span class="line">y = y0 + ka&#x27;</span><br><span class="line"></span><br><span class="line">证明过程：</span><br><span class="line">由</span><br><span class="line">ax0 + by0 = d</span><br><span class="line">ax&#x27; + by&#x27; = d</span><br><span class="line"></span><br><span class="line">推出:</span><br><span class="line">a(x&#x27; - x0) = b(y0 - y&#x27;)</span><br><span class="line">a&#x27;(x&#x27; - x0) = b&#x27;(y0 - y&#x27;)</span><br><span class="line"></span><br><span class="line">=&gt; b&#x27;|a&#x27;(x&#x27; - x0)</span><br><span class="line">由于a&#x27; 与 b&#x27; 互质</span><br><span class="line">=&gt; b&#x27;|(x&#x27; - x0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=&gt; x&#x27; - x0 = kb&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最小正整数解：</p>
<p><code>x = x0 % (b / d)</code></p>
<p><code>y = y0 % (a / d)</code></p>
<p><em>同时有以下小性质：</em></p>
<p><em><code>gcd(a,b) = 1</code>，即a与b互质时：它们最大不能凑出来的数是`(a - 1) </em> (b - 1) + 1`*</p>
<p><code>bx′+(a%b)y′=gcd(b,a%b)</code></p>
<p><code>bx′+(a−⌊a/b⌋∗b)y′=gcd(b,a%b)</code></p>
<p>有<code>ay′+b(x′−⌊a/b⌋∗y′)=gcd(b,a%b)=gcd(a,b)</code></p>
<p>故<code>x=y′,y=x′−⌊a/b⌋∗y′</code></p>
<p>算法复杂度：log(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exgcd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exGCD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>[] x, <span class="keyword">int</span>[] y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;<span class="comment">//递归出口(找到了最大公约数)</span></span><br><span class="line">            x[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        exGCD(b, a % b, y, x);</span><br><span class="line">        y[<span class="number">0</span>] -= (a / b) * x[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">            exGCD(a, b, x, y);</span><br><span class="line">            System.out.println(x[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + y[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解线性同余方程"><a href="#解线性同余方程" class="headerlink" title="解线性同余方程"></a>解线性同余方程</h3><p> 对于求解更一般的方程 <code>ax+by=c</code>，设 <code>d=gcd(a,b)</code> 则其有解当且仅当 <code>d|c</code></p>
<p>求解方法如下：</p>
<p><code>a(x0∗c/d)+b(y0∗c/d)=c</code></p>
<p>故有<strong>特解</strong>：<code>x′=x0∗c/d</code>，<code>y′=y0∗c/d</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">exGCD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>[] x, <span class="keyword">int</span>[] y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;<span class="comment">//递归出口(找到了最大公约数)</span></span><br><span class="line">            x[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> d = exGCD(b, a % b, y, x);</span><br><span class="line">        y[<span class="number">0</span>] -= (a / b) * x[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">while</span>(n -- != <span class="number">0</span>)&#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> m = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">int</span> d = exGCD(a, m, x, y);</span><br><span class="line">            <span class="keyword">if</span>(b % d == <span class="number">0</span>)System.out.println((<span class="keyword">long</span>)x[<span class="number">0</span>] * b / d % m);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><p>先略过了CPU跟它不兼容</p>
<h2 id="高斯消元解线性方程"><a href="#高斯消元解线性方程" class="headerlink" title="高斯消元解线性方程"></a>高斯消元解线性方程</h2><p>用线代矩阵形式求解n元方程组，时间复杂度：O(n^3)</p>
<ul>
<li><p>列满秩：唯一解</p>
</li>
<li><p>存在<code>0x = 非零</code> : 无解</p>
</li>
<li><p>存在<code>0x = 0</code>：无穷多解</p>
</li>
</ul>
<p>算法实现：</p>
<ul>
<li>化为n*(n+1)的矩阵</li>
<li>枚举每一列（1到n列）<ul>
<li>找到绝对值最大的一行</li>
<li>将该行换到最上面</li>
<li>将该行第一个数变成1</li>
<li>将下面所有行的第c列消成零</li>
</ul>
</li>
<li>（得到上三角矩阵）</li>
<li>回溯消去上面对应列的系数</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span>[][] a = <span class="keyword">new</span> <span class="keyword">double</span>[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Gauss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c, r;</span><br><span class="line">        <span class="keyword">for</span> (c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; c++) &#123;<span class="comment">//枚举每一列c(n列)</span></span><br><span class="line">            <span class="keyword">int</span> t = r;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &lt; n; i++)</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(a[i][c]) &gt; Math.abs(a[t][c])) t = i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为零就跳过</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(a[t][c]) &lt; eps) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//交换</span></span><br><span class="line">            <span class="keyword">double</span>[] temp = a[t];</span><br><span class="line">            a[t] = a[r];</span><br><span class="line">            a[r] = temp;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= c; i--)<span class="comment">//逆序操作,避免a[r][c]先被操作</span></span><br><span class="line">                <span class="comment">//如果a[r][c]已经是1了就跳过</span></span><br><span class="line">                <span class="keyword">if</span> (Math.abs(a[r][c] - <span class="number">1</span>) &gt; eps) a[r][i] /= a[r][c];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将r下面的每一行的第c列化为0</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(a[i][c]) &gt; eps)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt;= c; j--)</span><br><span class="line">                        a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r &lt; n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(a[i][n]) &gt; eps) <span class="keyword">return</span> <span class="number">2</span>;<span class="comment">//无解 0 = !0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//有无穷多组解 0 = 0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回溯消去上面对应列的系数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">//倒序求真解</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                a[i][n] -= a[j][n] * a[i][j];<span class="comment">//神来之笔 大道至简</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                a[i][j] = Double.parseDouble(s[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = Gauss();</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) System.out.println(<span class="string">&quot;No solution&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">1</span>) System.out.println(<span class="string">&quot;Infinite group solutions&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(a[i][n]) &lt; eps) a[i][n] = <span class="number">0</span>;<span class="comment">//去掉输出-0.00的情况</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%.2f\n&quot;</span>, a[i][n]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><p>核心公式：</p>
<script type="math/tex; mode=display">
C_a^b=C_{a-1}^b+C_{a-1}^{b-1}</script><ol>
<li><p>范围：10万组询问     1&lt;= b&lt;=a&lt;=2000： O(n^2)</p>
<p><strong>递推</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">combination01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">2010</span>;<span class="comment">//2000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] c = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod = (<span class="keyword">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>)c[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> c[i][j] = (c[i-<span class="number">1</span>][j] + c[i-<span class="number">1</span>][j-<span class="number">1</span>]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>范围：1万组询问     1&lt;= b&lt;=a&lt;=10^5： O(nlogn)</p>
<p><strong>预处理</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] fact = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//阶乘</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] infact = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//阶乘逆元</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod = (<span class="keyword">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span> % p;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">1</span>) res = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) res * a % mod);</span><br><span class="line">            a = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) a * a % p);</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//预处理</span></span><br><span class="line">        fact[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            fact[i] = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) fact[i - <span class="number">1</span>] * i % mod);</span><br><span class="line">            infact[i] = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) infact[i - <span class="number">1</span>] * qmi(i, mod - <span class="number">2</span>, mod) % mod);<span class="comment">//逆元</span></span><br><span class="line">        &#125;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(((<span class="keyword">long</span>)fact[a] * infact[b]) % mod * infact[a - b] % mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者倒序求出阶乘逆元：复杂度降低为O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] fact = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//阶乘</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] infact = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//阶乘逆元</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod = (<span class="keyword">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span> % p;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">1</span>) res = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) res * a % mod);</span><br><span class="line">            a = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) a * a % p);</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//预处理</span></span><br><span class="line">        fact[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            fact[i] = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) fact[i - <span class="number">1</span>] * i % mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(fact[N-1]);</span></span><br><span class="line">        infact[N - <span class="number">1</span>] = qmi(fact[N - <span class="number">1</span>], mod - <span class="number">2</span>, mod);</span><br><span class="line">        <span class="comment">// System.out.println(infact[N-1]);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = N - <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">            infact[i] = (<span class="keyword">int</span>)((<span class="keyword">long</span>)infact[i+<span class="number">1</span>] * (i + <span class="number">1</span>) % mod);</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(((<span class="keyword">long</span>)fact[a] * infact[b]) % mod * infact[a - b] % mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>范围：20组询问     1&lt;= b&lt;=a&lt;=10^18, 1 &lt;= p &lt;= 10^5</li>
</ol>
<p>卢卡斯定理：lucas </p>
<script type="math/tex; mode=display">
C_a^b\equiv C_{amodp}^{bmodp} * C_{a/p}^{b/p}(mod p)</script><p>时间复杂度：</p>
<script type="math/tex; mode=display">
O(log_p^n*p*log_p)</script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">combination3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> p;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span> % p;</span><br><span class="line">        <span class="keyword">while</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((b &amp; <span class="number">1</span>) == <span class="number">1</span>)res = (<span class="keyword">int</span>)((<span class="keyword">long</span>)res * a % p);</span><br><span class="line">            a = (<span class="keyword">int</span>)((<span class="keyword">long</span>) a * a % p);</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = (<span class="keyword">int</span>)a; i &lt;= b; i++, j--)&#123;</span><br><span class="line">            res = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) res * j % p);</span><br><span class="line">            res = (<span class="keyword">int</span>) ((<span class="keyword">long</span>) res * qmi(i, p-<span class="number">2</span>) % p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lucas</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; p &amp;&amp; b &lt; p)&#123;</span><br><span class="line">            <span class="keyword">return</span> C(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) ((<span class="keyword">long</span>) lucas(a/p, b/p) * C(a % p, b % p) % p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">while</span>(n -- != <span class="number">0</span>)&#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">long</span> a = Long.parseLong(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">long</span> b = Long.parseLong(s[<span class="number">1</span>]);</span><br><span class="line">            p = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">            System.out.println(lucas(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>没有模除降低数量级，单纯求组合数 1≤b≤a≤5000</li>
</ol>
<ul>
<li>从定义出发，求：</li>
</ul>
<script type="math/tex; mode=display">
C_a^b =\frac{a!}{b! * (a-b)!}</script><ul>
<li><p>对阶乘分解质因数,有：</p>
<p>因此，a!中含有的p的个数可化简为：</p>
</li>
</ul>
<script type="math/tex; mode=display">
cnt = \lfloor{\frac{a}{p}}\rfloor+\lfloor{\frac{a}{p^2}}\rfloor+\lfloor{\frac{a}{p^3}}\rfloor+...</script><ul>
<li><p>高精度乘法求结果：</p>
<p>Java的大数类可以解决</p>
<script type="math/tex; mode=display">
a!=p_0^{a_0}p_1^{a_1}...p_n^{a_n}</script></li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">combination04</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">5050</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] primes = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//记录a范围内的所有素数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//求Cab中对应存在每一个素数的指数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get_primes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//线性筛</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st[i]) primes[cnt++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j++) &#123;</span><br><span class="line">                st[primes[j] * i] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> p)</span> </span>&#123;<span class="comment">//求n!中p的个数</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            res += n / p;</span><br><span class="line">            n /= p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">        get_primes(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = primes[i];</span><br><span class="line">            sum[i] = get(a, p) - get(b, p) - get(a - b, p);</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger res = <span class="keyword">new</span> BigInteger(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sum[i]; j++)&#123;</span><br><span class="line">                res = res.multiply(<span class="keyword">new</span> BigInteger(String.valueOf(primes[i])));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h2><script type="math/tex; mode=display">
C_{2n}^n - C_{2n}^{n-1} = \frac{1}{n+1} * C_{2n}^{n}</script><p>适用于较多的问题：</p>
<p>例如：</p>
<ol>
<li><p>给定 n 个 0 和 n 个 1，它们将按照某种顺序排成长度为 2n 的序列，求它们能排列成的所有序列中，能够满足任意前缀序列中 0 的个数都不少于 1 的个数的序列有多少个</p>
<img src="/2023/01/10/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8004/image-20230102221743044.png" class title="image-20230102221743044">
<p>触碰到红线的都是非法情况，可以在路径触碰到红线的点后进行红线的轴对称处理，那么这些非法路径将最终汇聚在(5,7)这个点上，变化后路径与变化前路径是一一对应的。</p>
</li>
<li><p>一列火车 n 节车厢，依次编号为1,2,3,…,n。每节车厢有两种运动方式，进栈与出栈，问 n 节车厢出栈的可能排列方式有多少种。</p>
</li>
</ol>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Catalan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod = (<span class="keyword">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//费马小定理 前提:p为质数</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span> % mod;</span><br><span class="line">        <span class="keyword">while</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((b &amp; <span class="number">1</span>) != <span class="number">0</span>) res = (<span class="keyword">int</span>)((<span class="keyword">long</span>)res * a % mod);</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            a = (<span class="keyword">int</span>)((<span class="keyword">long</span>)a * a % mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">2</span> * n;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = a; i &lt;= n; i++, j--)&#123;</span><br><span class="line">            res = (<span class="keyword">int</span>)((<span class="keyword">long</span>)res * qmi(i, mod-<span class="number">2</span>) % mod);<span class="comment">//一定要注意类型转换</span></span><br><span class="line">            res = (<span class="keyword">int</span>)((<span class="keyword">long</span>)res * j % mod);</span><br><span class="line">        &#125;</span><br><span class="line">        res = (<span class="keyword">int</span>)((<span class="keyword">long</span>)res * qmi(n+<span class="number">1</span>, mod-<span class="number">2</span>) % mod);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h2><p>公理：（二项式定理得到 (1+x)^n）</p>
<script type="math/tex; mode=display">
C_n^0+C_n^1+C_n^2+...+C_n^n = 2^n</script><script type="math/tex; mode=display">
C_n^0-C_n^1+C_n^2-C_n^3+...+(-1)^{n-1}C_n^n = 1</script><p>复杂度：O(2^n)</p>
<p>例题：</p>
<p>给定一个整数 n 和 m 个不同的质数 p1, p2,…,pm。  请你求出 1∼n 中能被 p1,p2,…,pm 中的至少一个数整除的整数有多少个。</p>
<p>1≤m≤16 , 1≤n,pi≤10^9</p>
<img src="/2023/01/10/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8004/image-20230103115359306.png" class title="image-20230103115359306">
<img src="/2023/01/10/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8004/image-20230103115429514.png" class title="image-20230103115429514">
<p>复杂度：O(2^m * m) 最大2^20 一百万可接受</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exclusion</span> </span>&#123;<span class="comment">//容斥原理</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            p[i] = Integer.parseInt(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; m); i++)&#123;<span class="comment">//对i的位运算</span></span><br><span class="line">            <span class="keyword">long</span> t = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((i &gt;&gt; j &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;<span class="comment">//i二进制中第j位的数是否为1</span></span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="keyword">if</span>(t * p[j] &gt; n)&#123;<span class="comment">//巧妙判定界限</span></span><br><span class="line">                        t = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    t *= p[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(t != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt % <span class="number">2</span> == <span class="number">1</span>)res += n/t;<span class="comment">//奇数为正</span></span><br><span class="line">                <span class="keyword">else</span> res -= n /t;<span class="comment">//偶数为负</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><p><strong>公平组合游戏ICG</strong></p>
<p>若一个游戏满足：</p>
<ol>
<li>由两名玩家交替行动</li>
<li>在游戏进程的任意时刻，可以执行的合法行动与轮到哪名玩家无关</li>
<li>不能行动的玩家判负</li>
</ol>
<p>NIM博弈属于公平组合有熟悉，但城建的棋类游戏，比如围棋，就不是公平组合游戏，因为围棋交战双方分别智能落黑子和白子，胜负判定也比较复杂，不满足条件2和条件3</p>
<p><strong>有向图游戏</strong></p>
<p>给定一个有向无环图，图中有一个唯一的起点，在起点上放一枚棋子，两名玩家交替地把这枚棋子沿有向边进行移动，每次可以移动一步，无法移动者判负，该游戏被称为有向图游戏</p>
<p>任何一个公平组合游戏都可以转化为有向图游戏，具体方法是：把每个局面看成图中的一个节点，并且从每个局面向沿着合法行动能够到达的下一个局面连有向边</p>
<p>NIM游戏：</p>
<p><strong>先手必败状态</strong>：无论如何操作，所有的剩余状态必败（走不到任何一个必败状态）</p>
<p><strong>先手必胜状态</strong>：可以将剩余状态操作为某一种先手必败状态（可以走到某个必败状态）</p>
<p>题目：给定 n 堆石子，两位玩家轮流操作，每次操作可以从任意一堆石子中拿走任意数量的石子（可以拿完，但不能不拿），最后无法进行操作的人视为失败。问如果两人都采用最优策略，先手是否必胜。</p>
<p><strong>定理</strong>：</p>
<p>如果石子堆a[i]中，若有：</p>
<script type="math/tex; mode=display">
{a_1}\oplus{a_2}\oplus{a_3}\oplus...\oplus{a_n} = 0</script><p>则先手必败；</p>
<p>若有：</p>
<script type="math/tex; mode=display">
{a_1}\oplus{a_2}\oplus{a_3}\oplus...\oplus{a_n} = 1</script><p>则有先手必胜</p>
<p>证明：</p>
<p>(1) 有先手必败态：</p>
<script type="math/tex; mode=display">
0 \oplus 0 \oplus...\oplus = 0</script><p>(2)有一般情况：</p>
<script type="math/tex; mode=display">
{a_1}\oplus{a_2}\oplus{a_3}\oplus...\oplus{a_n} = x ≠ 0</script><p>设x的最高为1位为第k位，则必存在ai的第k位为1，所以ai ^ x &lt; ai（高于k位的ai不变，k位变为零）</p>
<p>于是可以从ai堆中拿走(ai - ai ^ x)个石子，剩余ai ^ x，于是有：</p>
<script type="math/tex; mode=display">
{a_1}\oplus{a_2}\oplus...\oplus{a_i\oplus{x}}\oplus{a_n} = x\oplus{x} = 0</script><p>于是，必定存在手段使任何一种异或不为0的情况转化为异或为零的情况</p>
<p>(3)针对异或为0的情况，如果操作使其中一堆石子ai变为ai’，利用反证法：如果</p>
<script type="math/tex; mode=display">
{a_1}\oplus{a_2}\oplus...\oplus{a_i'}\oplus{a_n} = 0</script><p>且</p>
<script type="math/tex; mode=display">
{a_1}\oplus{a_2}\oplus...\oplus{a_i}\oplus{a_n} = 0</script><p>两者异或发现：</p>
<script type="math/tex; mode=display">
a_i \oplus a_i' = 0</script><p>二者相同，于是得出结论：异或为0的局面操作后必然会变为异或不为0的局面</p>
<p>综上三条，得到定理。</p>
<p><strong>mex运算</strong>：</p>
<p>找到集合中不存在的最小的自然数</p>
<p><strong>SG 函数</strong>：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">在有向图游戏中，对于每个节点x，设从x出发共有k条有向边，分别达到节点y1,y2,...yk，定义SG(x)为x的后继节点y1,y2,...yk的SG函数值构成的集合再执行mex(S)运算的结果，即：SG(X)=mex(&#123;SG(y1),SG(y2),...,SG(yk)&#125;)</span><br><span class="line">特别地，整个有向图游戏的SG函数被定义为有向图游戏起点s的SG函数值，即SG(G)=SG(s)</span><br></pre></td></tr></table></figure>
<p>SG(终点) = 0</p>
<ul>
<li><p>先手 SG(x) = 0 必败</p>
</li>
<li><p>先手 SG(x) ≠ 0 必胜</p>
</li>
</ul>
<p>SG 定理：</p>
<p><code>SG(A,B) = SG(A) ^ SG(B)</code> 即可通过异或拆分为子情况子状态</p>
<p>例题：</p>
<p>给定 n 堆石子以及一个由 k 个不同正整数构成的数字集合 S。</p>
<p>现在有两位玩家轮流操作，每次操作可以从任意一堆石子中拿取石子，每次拿取的石子数量必须包含于集合 S，最后无法进行操作的人视为失败。</p>
<p>问如果两人都采用最优策略，先手是否必胜。</p>
<p>1≤n,k≤100 , 1≤si,ni≤10000</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">10010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> k, n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//存储S集合</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[M];<span class="comment">//存储sg值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sg</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//记忆化搜索，妙在根据题目需求,不必把所有f[i]求出</span></span><br><span class="line">        <span class="keyword">if</span>(f[x] != -<span class="number">1</span>)<span class="keyword">return</span> f[x];</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//HashSet存储</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= s[i])set.add(sg(x - s[i]));<span class="comment">//递归处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(i))<span class="keyword">return</span> f[x] = i;<span class="comment">//sg函数的具体求法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        k = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)s[i] = sc.nextInt();</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        Arrays.fill(f,-<span class="number">1</span>);<span class="comment">//赋初始值为-1</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">            res ^= sg(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res != <span class="number">0</span>)System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础03</title>
    <url>/2022/10/27/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8003/</url>
    <content><![CDATA[<ul>
<li>DFS</li>
<li>BFS</li>
<li>树与图的存储</li>
<li>树与图的深度优先遍历</li>
<li>树与图的宽度优先遍历</li>
<li>拓扑排序</li>
<li>最短路<ul>
<li>朴素dijkstra算法</li>
<li>堆优化版dijkstra算法</li>
<li>Bellman-Ford</li>
<li>spfa</li>
<li>Floyd</li>
</ul>
</li>
<li>最小生成树<ul>
<li>朴素版Prim</li>
<li>Kruskal</li>
</ul>
</li>
<li>二分图<ul>
<li>染色法</li>
<li>匈牙利算法</li>
</ul>
</li>
</ul>
<span id="more"></span>
<div class="table-container">
<table>
<thead>
<tr>
<th>算法</th>
<th>数据结构</th>
<th>空间</th>
<th>性质</th>
</tr>
</thead>
<tbody>
<tr>
<td>DFS</td>
<td>stack</td>
<td>O(h)</td>
<td>不具有最短性</td>
</tr>
<tr>
<td>BFS</td>
<td>queue</td>
<td>O(2^h)</td>
<td>最短路(边权为1)</td>
</tr>
</tbody>
</table>
</div>
<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DFS</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] path = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k == n)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)System.out.print(path[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">                path[k] = i;</span><br><span class="line">                st[i] = <span class="keyword">true</span>;</span><br><span class="line">                dfs(k + <span class="number">1</span>);</span><br><span class="line">                st[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m;<span class="comment">//图的长宽</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hh, tt;<span class="comment">//队头队尾</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] g = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];<span class="comment">//存图</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] d = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];<span class="comment">//存距离</span></span><br><span class="line">    <span class="keyword">static</span> PII[] q = <span class="keyword">new</span> PII[N * N];<span class="comment">//队列存下标x,y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    static PII[][] prev = new PII[N][N];//存路径</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hh = <span class="number">0</span>;</span><br><span class="line">        tt = -<span class="number">1</span>;</span><br><span class="line">        d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        q[++tt] = <span class="keyword">new</span> PII(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//向量数组</span></span><br><span class="line">        <span class="keyword">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt) &#123;</span><br><span class="line">            PII t = q[hh++];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = t.first + dx[i];</span><br><span class="line">                <span class="keyword">int</span> y = t.second + dy[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m &amp;&amp; g[x][y] == <span class="number">0</span> &amp;&amp; d[x][y] == -<span class="number">1</span>)&#123;</span><br><span class="line">                    d[x][y] = d[t.first][t.second] + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//                    prev[x][y] = t;</span></span><br><span class="line">                    q[++tt] = <span class="keyword">new</span> PII(x,y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        int x = n - 1;</span></span><br><span class="line"><span class="comment">//        int y = m - 1;</span></span><br><span class="line"><span class="comment">//        while(x !=0 || y != 0)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print(x + &quot; &quot; + y);</span></span><br><span class="line"><span class="comment">//            System.out.println();</span></span><br><span class="line"><span class="comment">//            PII t = prev[x][y];</span></span><br><span class="line"><span class="comment">//            x = t.first;</span></span><br><span class="line"><span class="comment">//            y = t.second;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> d[n-<span class="number">1</span>][m-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">        m = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String[] st = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                g[i][j] = Integer.parseInt(st[j]);</span><br><span class="line">                d[i][j] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(bfs());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PII</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first, second;</span><br><span class="line">    PII(<span class="keyword">int</span> first, <span class="keyword">int</span> second) &#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树和图的存储"><a href="#树和图的存储" class="headerlink" title="树和图的存储"></a>树和图的存储</h2><p>树是特殊的图-&gt;无环连通图</p>
<p>无向图是一种特殊的有向图（建两条边）</p>
<p>有向图：</p>
<ul>
<li>邻接矩阵 g[a,b] n^2 -&gt;稠密图</li>
<li>邻接表 n个单链表（拉链法）-&gt;稀疏图</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] q = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="comment">//存储</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = h[a];</span><br><span class="line">        h[a] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//DFS</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        st[u] = <span class="keyword">true</span>;<span class="comment">//标记</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[u]; i != <span class="number">0</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(!st[j])dfs(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hh = <span class="number">0</span>;</span><br><span class="line">        q[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//存储起始点</span></span><br><span class="line">        <span class="keyword">while</span>(hh &lt;= tt)&#123;</span><br><span class="line">            <span class="keyword">int</span> t = q[hh++];<span class="comment">//出队</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h[t]; i != <span class="number">0</span>; i = ne[i])&#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    st[j] = <span class="keyword">true</span>;</span><br><span class="line">                    q[++tt] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ...;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        dfs(i);</span><br><span class="line">        bfs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="拓扑序列"><a href="#拓扑序列" class="headerlink" title="拓扑序列"></a>拓扑序列</h2><p>对于图A中的每条边 (x,y)，x 在 A 中都出现在 y 之前，则称 A 是该图的一个拓扑序列</p>
<p>有向无环图-&gt;拓扑图</p>
<p>一个有向无环图一定至少存在一个入度为0的点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">top_sort</span> </span>&#123;<span class="comment">//拓扑序列</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] q = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] d = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//存入度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>, n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = h[a];</span><br><span class="line">        h[a] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">topSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tt = -<span class="number">1</span>, hh = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="comment">//让所有入度为0的节点入队</span></span><br><span class="line">            <span class="keyword">if</span> (d[i] == <span class="number">0</span>) q[++tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = q[hh++];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t]; i != <span class="number">0</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span> (--d[j] == <span class="number">0</span>) q[++tt] = j;<span class="comment">//入队</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tt == n - <span class="number">1</span>;<span class="comment">//判断所有点是否都入队了-&gt;存在环则必有点入度始终不为0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            d[b]++;<span class="comment">//b入度+1</span></span><br><span class="line">            add(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (topSort()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) System.out.print(q[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><ul>
<li>单源最短路-&gt;一个点到其他所有点的最短距离<ul>
<li>所有边权都是正数<ul>
<li>朴素Dijkstra算法 O(n^2) 适用于稠密图</li>
<li>堆优化版Dijkstra算法 O(mlogn)  适用于稀疏图</li>
</ul>
</li>
<li>存在负权边<ul>
<li>Bellman-Ford O(nm)</li>
<li>SPFA 一般O(m) 最坏O(nm)</li>
</ul>
</li>
</ul>
</li>
<li>多源汇最短路-&gt;询问多个点到其他所有点的最短距离<ul>
<li>Floyd算法 O(n^3)</li>
</ul>
</li>
</ul>
<h3 id="朴素dijkstra算法"><a href="#朴素dijkstra算法" class="headerlink" title="朴素dijkstra算法"></a>朴素dijkstra算法</h3><p>复杂度：</p>
<p>寻找路径最短的点：O(n^2)</p>
<p>更新距离：O(m)</p>
<p>所以总的时间复杂度为O(n^2)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">510</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] g = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];<span class="comment">//稠密图使用邻接矩阵存储</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N]; <span class="comment">//相当于s集合,确定了和1号店的最短距离的点加入到s集合中</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> MAX  = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(dist, MAX);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">//找到当前距离1号点最近的点t</span></span><br><span class="line">            <span class="keyword">int</span> t = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[j] &amp;&amp; (t == -<span class="number">1</span> || dist[t] &gt; dist[j])) t = j;</span><br><span class="line">            &#125;</span><br><span class="line">            st[t] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                dist[j] = Math.min(dist[j], dist[t] + g[t][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dist[n]==MAX)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化g为正无穷,解决重边的问题</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Arrays.fill(g[i], MAX);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String[] arr = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(arr[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(arr[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> c = Integer.parseInt(arr[<span class="number">2</span>]);</span><br><span class="line">            g[a][b] = Math.min(g[a][b], c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Dijkstra());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆优化版dijkstra算法"><a href="#堆优化版dijkstra算法" class="headerlink" title="堆优化版dijkstra算法"></a>堆优化版dijkstra算法</h3><p>复杂度：</p>
<p>寻找路径最短的点：O(n) &lt;- O(1)*n</p>
<p>加入集合S：O(n)</p>
<p>更新距离：O(mlogn) &lt;- O(logn)*m</p>
<p>c++版</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>; <span class="comment">// 把N改为150010就能ac</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 稀疏图用邻接表来存</span></span><br><span class="line"><span class="keyword">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="keyword">int</span> w[N]; <span class="comment">// 用来存权重</span></span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="keyword">bool</span> st[N]; <span class="comment">// 如果为true说明这个点的最短路径已经确定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 有重边也不要紧，假设1-&gt;2有权重为2和3的边，再遍历到点1的时候2号点的距离会更新两次放入堆中</span></span><br><span class="line">    <span class="comment">// 这样堆中会有很多冗余的点，但是在弹出的时候还是会弹出最小值2+x（x为之前确定的最短路径），</span></span><br><span class="line">    <span class="comment">// 并标记st为true，所以下一次弹出3+x会continue不会向下执行。</span></span><br><span class="line">    w[idx] = c;</span><br><span class="line">    e[idx] = y;</span><br><span class="line">    ne[idx] = h[x]; </span><br><span class="line">    h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;PII, <span class="built_in">vector</span>&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; <span class="comment">// 定义一个小根堆</span></span><br><span class="line">    <span class="comment">// 这里heap中为什么要存pair呢，首先小根堆是根据距离来排的，所以有一个变量要是距离，</span></span><br><span class="line">    <span class="comment">// 其次在从堆中拿出来的时候要知道知道这个点是哪个点，不然怎么更新邻接点呢？所以第二个变量要存点。</span></span><br><span class="line">    heap.push(&#123; <span class="number">0</span>, <span class="number">1</span> &#125;); <span class="comment">// 这个顺序不能倒，pair排序时是先根据first，再根据second，这里显然要根据距离排序</span></span><br><span class="line">    <span class="keyword">while</span>(heap.size())</span><br><span class="line">    &#123;</span><br><span class="line">        PII k = heap.top(); <span class="comment">// 取不在集合S中距离最短的点</span></span><br><span class="line">        heap.pop();</span><br><span class="line">        <span class="keyword">int</span> ver = k.second, distance = k.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i]; <span class="comment">// i只是个下标，e中在存的是i这个下标对应的点。</span></span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; distance + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.push(&#123; dist[j], j &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;c);</span><br><span class="line">        add(x, y, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dijkstra() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>java版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dijkstra_heap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">150010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        w[idx] = c;</span><br><span class="line">        ne[idx] = h[a];</span><br><span class="line">        h[a] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;PII&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        queue.add(<span class="keyword">new</span> PII(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//1、找到当前未在s中出现过且离源点最近的点</span></span><br><span class="line">            PII p = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> distant = p.getDistant();</span><br><span class="line">            <span class="keyword">int</span> t = p.getIndex();</span><br><span class="line">            <span class="keyword">if</span> (st[t]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//2、将该点进行标记</span></span><br><span class="line">            st[t] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//3、用t更新其他点的距离</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t]; i != <span class="number">0</span>; i = ne[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span> (dist[j] &gt; distant + w[i]) &#123;</span><br><span class="line">                    dist[j] = distant + w[i];</span><br><span class="line">                    queue.add(<span class="keyword">new</span> PII(dist[j], j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dist[n] == INF) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> c = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line">            add(a, b, c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dijkstra());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PII</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">PII</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> distant;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDistant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> distant;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PII</span><span class="params">(<span class="keyword">int</span> distant, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.distant = distant;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(PII o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(distant, o.distant);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h3><p>Bellman - ford 算法是求含负权图的单源最短路径的一种算法，效率较低，代码难度较小。其原理为连续进行松弛，在每次松弛时把每条边都更新一下，若在 n-1 次松弛后还能更新，则说明图中有负环，因此无法得出结果，否则就完成。</p>
<p>(通俗的来讲就是：假设 1 号点到 n 号点是可达的，每一个点同时向指向的方向出发，更新相邻的点的最短距离，通过循环 n-1 次操作，若图中不存在负环，则 1 号点一定会到达 n 号点，若图中存在负环，则在 n-1 次松弛后一定还会更新)</p>
<p>bellman - ford算法擅长解决有边数限制的最短路问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bellman_ford</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">505</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Edges</span> </span>&#123;<span class="comment">//结构体存边</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> b;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line">        Edges(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            <span class="keyword">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="keyword">static</span> Edges[] e = <span class="keyword">new</span> Edges[M];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] backup = <span class="keyword">new</span> <span class="keyword">int</span>[M];<span class="comment">//备份数组</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bellmanFord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(dist, max);<span class="comment">//初始化一开始全部都是max</span></span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//初始化一开始全部都是max</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            backup = Arrays.copyOf(dist, n + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = e[j].a;</span><br><span class="line">                <span class="keyword">int</span> b = e[j].b;</span><br><span class="line">                <span class="keyword">int</span> c = e[j].c;</span><br><span class="line">                dist[b] = Math.min(dist[b], backup[a] + c);<span class="comment">//用上面的点来更新后面的点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为到不了最后的n点，然后存在负权边能够到达n，将n的值更新了之后，变得比max小，防止出现这种情况</span></span><br><span class="line">        <span class="keyword">if</span> (dist[n] &gt; max / <span class="number">2</span>) System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(dist[n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        k = Integer.parseInt(str[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> c = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line">            e[i] = <span class="keyword">new</span> Edges(a, b, c);</span><br><span class="line">        &#125;</span><br><span class="line">        bellmanFord();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><p>通过队列来优化bellman的步骤： <code>dist[b] = Math.min(dist[b], dist[a] + c)</code></p>
<p>一定有dist[a]减小才有dist[b]的更新，故通过队列优化（与dijkstra类似）</p>
<p>队列中存储的都是自身更新后可能会引起其他点变化的点（只干有用的事，无用的点不存）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不存在负环</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">spfa</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>, n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        w[idx] = c;</span><br><span class="line">        ne[idx] = h[a];</span><br><span class="line">        h[a] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Arrays.fill(dist, MAX);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        st[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        q.offer(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> t = q.poll();</span><br><span class="line">            st[t] = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//遍历这个点连接的所有边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h[t]; i != <span class="number">0</span>; i = ne[i])&#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="comment">//更新一下最短路</span></span><br><span class="line">                <span class="keyword">if</span>(dist[j] &gt; dist[t] + w[i])&#123;</span><br><span class="line">                    dist[j] = dist[t] + w[i];</span><br><span class="line">                    <span class="comment">//当前点被更新，加入队列</span></span><br><span class="line">                    <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                        q.offer(j);</span><br><span class="line">                        st[j] = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dist[n] == MAX)System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(dist[n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> c = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line">            add(a, b, c);</span><br><span class="line">        &#125;</span><br><span class="line">        Spfa();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spfa判断负环：</p>
<p>维护每个节点的cnt[]数组，记录路径长度，如果cnt[j]&gt;=n，根据抽屉原理，所谓最短路一定走过了n条边，即n+1个点，说明其中两个点相同，即存在负环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不存在负环</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>, n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        w[idx] = c;</span><br><span class="line">        ne[idx] = h[a];</span><br><span class="line">        h[a] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">Spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//全部点入队这样就没有负环无法经过,题中没说是否是连通图</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            st[i] = <span class="keyword">true</span>;</span><br><span class="line">            q.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> t = q.poll();</span><br><span class="line">            st[t] = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//遍历这个点连接的所有边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h[t]; i != <span class="number">0</span>; i = ne[i])&#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="comment">//更新一下最短路</span></span><br><span class="line">                <span class="keyword">if</span>(dist[j] &gt; dist[t] + w[i])&#123;</span><br><span class="line">                    dist[j] = dist[t] + w[i];</span><br><span class="line">                    <span class="comment">//记录路径长度</span></span><br><span class="line">                    cnt[j] = cnt[t] + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//如果长度大于等于n,说明走过n+1个点,说明走过负环</span></span><br><span class="line">                    <span class="keyword">if</span>(cnt[j] &gt;= n)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//当前点被更新，加入队列</span></span><br><span class="line">                    <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                        q.offer(j);</span><br><span class="line">                        st[j] = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> c = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line">            add(a, b, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Spfa())System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><p>时间复杂度:O(n^3)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">floyd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] d = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//精髓 dp[k,i,j]-&gt;在1~k个点中考虑i,j的最短路</span></span><br><span class="line">    <span class="comment">//递推式 dp[k,i,j] = dp[k-1,i,k] + dp[k-1,k,j];</span></span><br><span class="line">    <span class="comment">//化简:dp[i,j] = dp[i,k] + dp[k,j];</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                    d[i][j] = Math.min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(str[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j)d[i][j] = <span class="number">0</span>;<span class="comment">//自环的忽略</span></span><br><span class="line">                <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(m-- != <span class="number">0</span>)&#123;</span><br><span class="line">            String[] s1 = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(s1[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> y = Integer.parseInt(s1[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> z = Integer.parseInt(s1[<span class="number">2</span>]);</span><br><span class="line">            d[x][y] = Math.min(d[x][y], z);<span class="comment">//重边取最小</span></span><br><span class="line">        &#125;</span><br><span class="line">        Floyd();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(k-- != <span class="number">0</span>)&#123;</span><br><span class="line">            String[] s2 = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s2[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s2[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> t = d[a][b];</span><br><span class="line">            <span class="keyword">if</span>(t &gt; INF/<span class="number">2</span>)System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>针对无向图</p>
<ul>
<li>Prim<ul>
<li><strong>朴素版Prim</strong>（稠密图）O(n^2)</li>
<li>堆优化版的Prim（稀疏图）O(mlogn)</li>
</ul>
</li>
<li><strong>Kruskal</strong>    （稀疏图）O(mlogm)</li>
</ul>
<h3 id="朴素版Prim"><a href="#朴素版Prim" class="headerlink" title="朴素版Prim"></a>朴素版Prim</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//朴素prim算法(稠密图)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">prim</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">510</span>;</span><br><span class="line">    <span class="comment">//static int M = 100010;//m ~ n ^ 2 稠密图</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] g = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[j] &amp;&amp; (t == -<span class="number">1</span> || dist[t] &gt; dist[j])) t = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明图不连通,无最小生成树</span></span><br><span class="line">            <span class="keyword">if</span> (dist[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line">            <span class="comment">//选出一条最小生成树的边,记录下来</span></span><br><span class="line">            res += dist[t];</span><br><span class="line">            st[t] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//更新其他点到集合的距离-&gt;已经在集合内的就不必再更新了防止捣乱</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st[j]) dist[j] = Math.min(dist[j], g[t][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Arrays.fill(g[i], INF);</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> c = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line">            g[a][b] = g[b][a] = Math.min(g[a][b], c);<span class="comment">//无向图不要忘记</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = Prim();</span><br><span class="line">        <span class="keyword">if</span> (t == INF) System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><ul>
<li><p>将所有边按权重从小到大排序O(mlogm)</p>
</li>
<li><p>枚举每条边a,b 权重c</p>
<p>如果a,b不连通，将这条边加入集合中 O(m)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">2</span> * N;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">edge</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, w;</span><br><span class="line"></span><br><span class="line">        edge(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> w) &#123;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            <span class="keyword">this</span>.w = w;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(edge o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.w, o.w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> edge[] e = <span class="keyword">new</span> edge[M];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = find(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.sort(e, <span class="number">0</span>, m);<span class="comment">//0~m-1排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//记录权值之和</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//记录边数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = e[i].a;</span><br><span class="line">            <span class="keyword">int</span> b = e[i].b;</span><br><span class="line">            <span class="keyword">int</span> w = e[i].w;</span><br><span class="line">            a = find(a);</span><br><span class="line">            b = find(b);</span><br><span class="line">            <span class="keyword">if</span>(a != b)&#123;</span><br><span class="line">                p[a] = b;<span class="comment">//合并</span></span><br><span class="line">                res += w;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt &lt; n - <span class="number">1</span>)<span class="keyword">return</span> INF;<span class="comment">//不连通</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> w = Integer.parseInt(s[<span class="number">2</span>]);</span><br><span class="line">            e[i] = <span class="keyword">new</span> edge(a, b, w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = Kruskal();</span><br><span class="line">        <span class="keyword">if</span> (t == INF) System.out.println(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><ul>
<li>染色法 O(n+m)</li>
<li>匈牙利算法  最坏O(mn)  实际运行时间一般远小于O(mn)</li>
</ul>
<p>二分图：图中点可以分到两个集合中，且边都是一个集合指向另一个集合，集合内部没有边</p>
<h3 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h3><p><strong>二分图&lt;=&gt;不含奇数环&lt;=&gt;二染色不矛盾</strong></p>
<p>O(n+m)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">colour</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">2</span> * N;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] color = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>, n, m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = h[a];</span><br><span class="line">        h[a] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        color[u] = c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[u]; i != <span class="number">0</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (color[j] == <span class="number">0</span>) &#123;<span class="comment">//未染色</span></span><br><span class="line">                <span class="keyword">if</span> (!dfs(j, <span class="number">3</span> - c))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(color[j] == c)<span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//矛盾</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            add(a, b);</span><br><span class="line">            add(b, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[i] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> (!dfs(i, <span class="number">1</span>)) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><p>已知二分图，求两个点集中边数的最大匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xiongyali</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">505</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] match = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//match是表示女生对应的男生是谁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>, n1, n2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = h[a];</span><br><span class="line">        h[a] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每一次遍历一遍传进来的左边集合x对应的右边集合中的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">0</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="comment">// 判断这个点是不是已经用过了，没用过继续</span></span><br><span class="line">            <span class="keyword">if</span> (!st[j]) &#123;</span><br><span class="line">                st[j] = <span class="keyword">true</span>;<span class="comment">//递归判重防止死循环</span></span><br><span class="line">                <span class="comment">//女生还没被匹配或者谦让的美德起了作用</span></span><br><span class="line">                <span class="keyword">if</span> (match[j] == <span class="number">0</span> || find(match[j])) &#123;</span><br><span class="line">                    match[j] = x;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n1 = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        n2 = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">            add(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">            <span class="comment">//每一次模拟都要将st数组清空,这个判断重复的点,match是物有所主了</span></span><br><span class="line">            <span class="comment">//st数组用来保证本次匹配过程中，右边集合中的每个点只被遍历一次，防止死循环</span></span><br><span class="line">            <span class="comment">//match存的是右边集合中的每个点当前匹配的点是哪个，但就算某个点当前已经匹配了某个点</span></span><br><span class="line">            <span class="comment">//也有可能被再次遍历，所以不能起到判重的作用</span></span><br><span class="line">            Arrays.fill(st, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (find(i)) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础02</title>
    <url>/2022/09/17/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8002/</url>
    <content><![CDATA[<ul>
<li>链表与邻接表</li>
<li>栈与队列</li>
<li>kmp</li>
<li>Trie</li>
<li>并查集</li>
<li>堆</li>
<li>哈希表</li>
<li>树状数组</li>
<li>线段树</li>
</ul>
<span id="more"></span>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="数组模拟单链表"><a href="#数组模拟单链表" class="headerlink" title="数组模拟单链表"></a>数组模拟单链表</h3><p>邻接表（存储数、图）</p>
<p><code>head -&gt; null</code></p>
<p><code>head -&gt; o0 -&gt; o1 -&gt; o2 -&gt; null</code></p>
<p><code>int e[N]</code>    表示值</p>
<p><code>int ne[N]</code> 表示next指针（指向next的下标）为空：<code>ne[n-1] = -1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">chain_list_1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="comment">//head表示头结点的下标</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="comment">//e[i]表示节点i的值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="comment">//ne[i]表示节点i的next指针是多少</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="comment">//idx存储当前已经用到了哪个节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = -<span class="number">1</span>;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将x插到头结点</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add_to_head</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        e[idx] = x;</span><br><span class="line">        ne[idx] = head;</span><br><span class="line">        head = idx;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将x插到下标是k的点后面</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        e[idx] = x;</span><br><span class="line">        ne[idx] = ne[k];</span><br><span class="line">        ne[k] = idx;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将下标是k的点后面的点删掉</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ne[k] = ne[ne[k]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String op = sc.next();</span><br><span class="line">            <span class="keyword">if</span> (op.charAt(<span class="number">0</span>) == <span class="string">&#x27;H&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">                add_to_head(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op.charAt(<span class="number">0</span>) == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="number">0</span>) head = ne[head];</span><br><span class="line">                <span class="keyword">else</span> remove(k - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">                <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">                add(k - <span class="number">1</span>, x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, e[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="数组模拟双链表"><a href="#数组模拟双链表" class="headerlink" title="数组模拟双链表"></a>数组模拟双链表</h3><p>优化某些问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">chain_list_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="comment">//e[i]表示节点i的值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="comment">//l[i]表示节点i左边指向点的下标</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] l = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="comment">//r[i]表示节点i右边指向点的下标</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//idx存储当前已经用到了哪个节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//0表示左端点,l表示右端点</span></span><br><span class="line">        r[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        idx = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在下标是k的点的右边，插入x</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        e[idx] = x;</span><br><span class="line">        r[idx] = r[k];</span><br><span class="line">        l[idx] = k;</span><br><span class="line">        l[r[k]] = idx;</span><br><span class="line">        r[k] = idx;<span class="comment">//注意两句不能写反</span></span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除第k个点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        r[l[k]] = r[k];</span><br><span class="line">        l[r[k]] = l[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模拟栈"><a href="#模拟栈" class="headerlink" title="模拟栈"></a>模拟栈</h2><img src="/2022/09/17/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8002/image-20220908101852296.png" class title="image-20220908101852296">
<h2 id="模拟队列"><a href="#模拟队列" class="headerlink" title="模拟队列"></a>模拟队列</h2><img src="/2022/09/17/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8002/image-20220908102715426.png" class title="image-20220908102715426">
<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>给定一个序列，求这个序列中每个数左边（右边）离其最近的比它小的数的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] stack = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(m -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            x = sc.nextInt();</span><br><span class="line">            <span class="keyword">while</span>(tt != <span class="number">0</span> &amp;&amp; stack[tt] &gt;= x) tt --;</span><br><span class="line">            <span class="keyword">if</span>(tt != <span class="number">0</span>) System.out.print(stack[tt] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.print(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line">            stack[++ tt] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] q = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> k = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = Integer.parseInt(str[i]);</span><br><span class="line">        <span class="keyword">int</span> hh = <span class="number">0</span>, tt = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;<span class="comment">//单增队列</span></span><br><span class="line"></span><br><span class="line">            q[++tt] = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) System.out.print(a[q[hh]] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        hh = <span class="number">0</span>;</span><br><span class="line">        tt = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">            <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;<span class="comment">//单减队列</span></span><br><span class="line">            q[++tt] = i;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) System.out.print(a[q[hh]] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ne[] = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        Integer n = Integer.parseInt(br.readLine());</span><br><span class="line">        String s1 = <span class="string">&quot; &quot;</span> + br.readLine();</span><br><span class="line">        Integer m = Integer.parseInt(br.readLine());</span><br><span class="line">        String s2 = <span class="string">&quot; &quot;</span> + br.readLine();</span><br><span class="line">        <span class="keyword">char</span>[] a1 = s1.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] a2 = s2.toCharArray();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ne[]：存储一个字符串以每个位置为结尾的‘可匹配最长前后缀’的长度。</span></span><br><span class="line"><span class="comment">         * 构建ne[]数组：</span></span><br><span class="line"><span class="comment">         *              1,初始化ne[1] = 0,i从2开始。</span></span><br><span class="line"><span class="comment">         *              2,若匹配，s[i]=s[j+1]说明1~j+1是i的可匹配最长后缀,ne[i] = ++j;</span></span><br><span class="line"><span class="comment">         *              3,若不匹配，则从j的最长前缀位置+1的位置继续与i比较</span></span><br><span class="line"><span class="comment">         *              (因为i-1和j拥有相同的最长前后缀，我们拿j的前缀去对齐i-1的后缀),</span></span><br><span class="line"><span class="comment">         *              即令j = ne[j],继续比较j+1与i，若匹配转-&gt;&gt;2</span></span><br><span class="line"><span class="comment">         *              4,若一直得不到匹配j最终会降到0，也就是i的‘可匹配最长前后缀’的长度</span></span><br><span class="line"><span class="comment">         *              要从零开始重新计算</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>,j = <span class="number">0</span>;i &lt;= n ;i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j!=<span class="number">0</span>&amp;&amp;a1[i]!=a1[j+<span class="number">1</span>]) j = ne[j]; </span><br><span class="line">            <span class="keyword">if</span>(a1[i]==a1[j+<span class="number">1</span>]) j++;</span><br><span class="line">            ne[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 匹配两个字符串：</span></span><br><span class="line"><span class="comment">         *      1，从i=1的位置开始逐个匹配，利用ne[]数组减少比较次数</span></span><br><span class="line"><span class="comment">         *      2，若i与j+1的位置不匹配（已知1~j匹配i-j~i-1)，</span></span><br><span class="line"><span class="comment">         *      j跳回ne[j]继续比较(因为1~j匹配i-j~i-1,所以1~ne[j]也能匹配到i-ne[j]~i-1)</span></span><br><span class="line"><span class="comment">         *      3，若匹配则j++,直到j==n能确定匹配成功</span></span><br><span class="line"><span class="comment">         *      4，成功后依然j = ne[j],就是把这次成功当成失败，继续匹配下一个位置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>; i &lt;= m;i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j!=<span class="number">0</span>&amp;&amp;a2[i]!=a1[j+<span class="number">1</span>]) j = ne[j];</span><br><span class="line">            <span class="keyword">if</span>(a2[i]==a1[j+<span class="number">1</span>]) j++;</span><br><span class="line">            <span class="keyword">if</span>(j==n) &#123;</span><br><span class="line">                j = ne[j];</span><br><span class="line">                bw.write(i-n+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 时间复杂度：</span></span><br><span class="line"><span class="comment">         *      因为：j最多加m次，再加之前j每次都会减少且最少减一，j&gt;0</span></span><br><span class="line"><span class="comment">         *      所以：while循环最多执行m次,若大于m次，j&lt;0矛盾</span></span><br><span class="line"><span class="comment">         *      最终答案：O(2m)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>KMP在求循环节中的运用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Test case #&quot;</span> + cnt++);</span><br><span class="line">            <span class="keyword">char</span>[] s = (<span class="string">&quot; &quot;</span> + br.readLine()).toCharArray();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; s[i] != s[j + <span class="number">1</span>])j = ne[j];</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j + <span class="number">1</span>])j++;</span><br><span class="line">                ne[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//通过ne数组对循环节进行检验</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> t = i - ne[i];<span class="comment">//循环节长度</span></span><br><span class="line">                <span class="keyword">if</span>(i % t == <span class="number">0</span> &amp;&amp; i / t &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(i + <span class="string">&quot; &quot;</span> + i / t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h2><p>用来高效存储和查找字符串集合的数据结构</p>
<p>集合的数据结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">trie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] son = <span class="keyword">new</span> <span class="keyword">int</span>[N][<span class="number">26</span>];<span class="comment">//存储节点下标(第N个节点是否存在?的儿子,不存在为0,存在存储儿子的idx位置)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//标记以其为结尾的字符串个数便于查询</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">0</span>;<span class="comment">//保证每个Trie树的新分支(新节点)存储空间不同不冲突</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = str.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (son[p][u] == <span class="number">0</span>) son[p][u] = ++idx;</span><br><span class="line">            p = son[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[p]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = str.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (son[p][u] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            p = son[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt[p];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String op = sc.next();</span><br><span class="line">            <span class="keyword">if</span> (op.equals(<span class="string">&quot;I&quot;</span>)) insert(sc.next());</span><br><span class="line">            <span class="keyword">else</span> System.out.println(query(sc.next()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好栗子：</p>
<p><strong>异或数列</strong>：</p>
<p>在给定的 N 个整数 A1，A2……AN 中选出两个进行 xor（异或）运算，得到的结果最大是多少？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">31</span> * <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] son = <span class="keyword">new</span> <span class="keyword">int</span>[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = x &gt;&gt; i &amp; <span class="number">1</span>;<span class="comment">//位运算取第k位</span></span><br><span class="line">            <span class="keyword">if</span> (son[p][k] == <span class="number">0</span>) son[p][k] = ++idx;</span><br><span class="line">            p = son[p][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> kp = k == <span class="number">0</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (son[p][kp] != <span class="number">0</span>) &#123;</span><br><span class="line">                p = son[p][kp];</span><br><span class="line">                res = res * <span class="number">2</span> + kp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p = son[p][k];</span><br><span class="line">                res = res * <span class="number">2</span> + k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">            insert(a[i]);</span><br><span class="line">            <span class="keyword">int</span> res = query(a[i]);</span><br><span class="line">            max = Math.max(max, res ^ a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><ul>
<li><p>将两个元素合并</p>
</li>
<li><p>询问两个元素是否在一个集合当中</p>
</li>
</ul>
<p>并查集可在近乎O(1)的复杂度情况下完成这两个操作</p>
<p><strong>基本原理</strong>：每一个集合用树来表示，树根的编号就是树的编号。每个节点存储它的父节点</p>
<ul>
<li><p>问题一：如何判断树根    <code>if(p[x] == x)</code></p>
</li>
<li><p>问题二：如何求x的集合编号 <code>while(p[x] != x) x = p[x]</code></p>
</li>
<li><p>问题三：如何合并两个集合    px是x的集合编号 py是y的集合编号    <code>p[x] = y</code></p>
</li>
<li>问题四：统计各集合内元素个数    合并集合时    <code>cnt[y] += cnt[x]</code> 以y为合并集合根节点，返回cnt[find(a)]</li>
</ul>
<p>优化：路径压缩</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//返回x的祖宗节点+路径压缩</span></span><br><span class="line">    <span class="keyword">if</span>(p[x]!=x)p[x] = find(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)p[i] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, op, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span>)p[find(a)] = find(b);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(find(a) == find(b)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>java模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">union_set</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//返回x的祖宗节点+路径压缩</span></span><br><span class="line">        <span class="keyword">if</span>(p[x]!=x)p[x] = find(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)p[i] = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(m-- != <span class="number">0</span>)&#123;</span><br><span class="line">            String op = sc.next();</span><br><span class="line">            <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(op.equals(<span class="string">&quot;M&quot;</span>))p[find(a)] = find(b);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(find(a) == find(b))System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆-&gt;完全二叉树</p>
<p>小根堆：每个节点的值小于等于其左右儿子节点的值</p>
<p>堆的存储：</p>
<p>x的左儿子：2x</p>
<p>x的右儿子：2x+1</p>
<p><code>down(x)&#123;&#125;</code> O(logn)<br><code>up(x)&#123;&#125;</code> O(logn)</p>
<p>堆支持的操作</p>
<ul>
<li>插入一个数    <code>heap[ ++ size] = x; up[size];</code></li>
<li>求集合当中的最小值    <code>heap[1];</code></li>
<li>删除最小值    <code>heap[1] = heap[size]; size--;down(1);</code></li>
<li>删除任意一个元素    <code>heap[k] = heap[size];size--;down(k);up(k);</code></li>
<li>修改任意一个元素    <code>heap[k] = x; down(k);up(k);</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(u!=t)&#123;</span><br><span class="line">        swap(h[u], h[t]);</span><br><span class="line">        down(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(u/<span class="number">2</span> &amp;&amp; h[u/<span class="number">2</span>] &gt; h[u]) &#123;</span><br><span class="line">        swap(h[u], h[u/<span class="number">2</span>]);</span><br><span class="line">        u /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">heap_sort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = u;</span><br><span class="line">        <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[k]) k = u * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[k]) k = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (k != u) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = h[k];</span><br><span class="line">            h[k] = h[u];</span><br><span class="line">            h[u] = t;</span><br><span class="line">            down(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (u / <span class="number">2</span> &gt;= <span class="number">1</span> &amp;&amp; h[u / <span class="number">2</span>] &gt; h[u]) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = h[u];</span><br><span class="line">            h[u] = h[u / <span class="number">2</span>];</span><br><span class="line">            h[u / <span class="number">2</span>] = t;</span><br><span class="line">            u /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="comment">//习惯堆下标从1开始</span></span><br><span class="line">            h[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        size = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) down(i);<span class="comment">//初始化堆 复杂度O(n)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m-- != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(h[<span class="number">1</span>] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            h[<span class="number">1</span>] = h[size];</span><br><span class="line">            size--;</span><br><span class="line">            down(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><ul>
<li>存储结构：开放寻址法、拉链法（链地址法）</li>
<li>字符串哈希方式</li>
</ul>
<h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hash</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">200003</span>;<span class="comment">// 质数 一般开数据范围的2~3倍, 这样大概率就没有冲突了</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> C = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//存在返回对应下标,不存在返回其应该存储的位置</span></span><br><span class="line">        <span class="keyword">int</span> k = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">while</span>(h[k] != C &amp;&amp; h[k] != x)&#123;</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">if</span>(k == N) k = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Arrays.fill(h, C);</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String s = sc.next();</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> k = find(x);</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;I&quot;</span>))h[k] = x;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(h[k] != C)System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拉链法（链地址法）"><a href="#拉链法（链地址法）" class="headerlink" title="拉链法（链地址法）"></a>拉链法（链地址法）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链地址法(拉链法)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hash</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100003</span>;<span class="comment">//选择质数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];<span class="comment">//hash table</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = (x % N + N) % N;<span class="comment">//保证大于等于0</span></span><br><span class="line">        e[idx] = x;</span><br><span class="line">        ne[idx] = h[k];</span><br><span class="line">        h[k] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[k]; i != <span class="number">0</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(e[i] == x)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">            String s = sc.next();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;I&quot;</span>)) &#123;</span><br><span class="line">                insert(sc.nextInt());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (find(sc.nextInt())) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串前缀哈希方式"><a href="#字符串前缀哈希方式" class="headerlink" title="字符串前缀哈希方式"></a>字符串前缀哈希方式</h3><p>(字符串哈希) O(n)+O(m)</p>
<p>全称字符串前缀哈希法，把字符串变成一个p进制数字（哈希值），实现不同的字符串映射到不同的数字。</p>
<p>对形如 <code>X1X2X3⋯Xn−1Xn</code> 的字符串,采用字符的ascii 码乘上 P 的次方来计算哈希值。</p>
<p>映射公式 <code>(X1×Pn−1+X2×Pn−2+⋯+Xn−1×P1+Xn×P0)modQ</code></p>
<p>注意点：</p>
<ol>
<li>任意字符不可以映射成0，否则会出现不同的字符串都映射成0的情况，比如A,AA,AAA皆为0</li>
<li>冲突问题：通过巧妙设置P (131 或 13331) , Q (2^64)的值，一般可以理解为不产生冲突。</li>
</ol>
<p>问题是比较不同区间的子串是否相同，就转化为对应的哈希值是否相同。</p>
<p>求一个字符串的哈希值就相当于求前缀和，求一个字符串的子串哈希值就相当于求部分和。</p>
<p>前缀和公式 <code>h[i]=h[i-1]×P+s[i] i∈[1,n]</code> h为前缀和数组，s为字符串数组</p>
<p>区间和公式 <code>h[l,r]=h[r]−h[l−1]×P[r−l+1]</code></p>
<p>区间和公式的理解: ABCDE 与 ABC 的前三个字符值是一样，只差两位，</p>
<p>乘上 P2 把 ABC 变为 ABC00，再用 ABCDE - ABC00 得到 DE 的哈希值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">string_hash</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> P = <span class="number">131</span>; <span class="comment">//经验值P = 131, 13331</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前缀哈希求完后需要进行模2^64来防止相同的冲突</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[] p = <span class="keyword">new</span> <span class="keyword">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[] h = <span class="keyword">new</span> <span class="keyword">long</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;<span class="comment">//获得l~r区间的哈希值</span></span><br><span class="line">        <span class="keyword">return</span> h[r] - h[l-<span class="number">1</span>] * p[r-l+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        String s = sc.next();</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            p[i] = p[i-<span class="number">1</span>] * P;</span><br><span class="line">            h[i] = h[i-<span class="number">1</span>] * P + s.charAt(i-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(m-- != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> r1 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> l2 = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> r2 = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(get(l1,r1) == get(l2,r2))System.out.println(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p><strong>可解决问题：</strong></p>
<ul>
<li>快速求前缀和 O(logn)</li>
<li>快速求<strong>前缀最大值</strong></li>
<li>修改 O(logn) 查询 O(logn)</li>
</ul>
<p><strong>本质上解决一类问题的在线做法：单点修改、区间查询</strong></p>
<p><strong>*数组</strong> 求前缀和 O(n) 修改 O(1)*</p>
<p><strong>*前缀和数组</strong> 查询O(1) 修改O(n)* </p>
<p><strong><code>c[x] = a[x - lowbit(x) + 1, x] = a(x - lowbit(x), x]</code></strong></p>
<p><code>c[x]</code>长度：<code>lowbit(x)</code></p>
<p>区间描述：以x结尾的，长度是2^k(k为x的最后一位1的位置)的区间</p>
<img src="/2022/09/17/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8002/image-20230324164314318.png" class title="image-20230324164314318">
<p>父节点找子节点：（适用于求前缀和）</p>
<script type="math/tex; mode=display">a_x + c_{x - 1} + c_{x - 1 - lowbit(x - 1)} + ...</script><p>子节点找父节点(适用于修改操作 子节点变动引起父节点变动)</p>
<script type="math/tex; mode=display">P  = x+ lowbit(x)</script><p><strong>模板：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只能加上一个数，不能完全变成一个数，但可以用<code>x + (-x) + y</code>转化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123; <span class="comment">//修改t[x] (并修改受其影响的父结点)</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))t[i] += k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//查询t[x] (由父结点找到所有子结点) sum[1~x]</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i != <span class="number">0</span>; i -= lowbit(i))&#123;</span><br><span class="line">        res += t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化（单点加）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)add(i, a[i]);</span><br></pre></td></tr></table></figure>
<p>查询a[l ~ r] (求区间和)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sum(r) - sum(l - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>树状数组下标必须以1开始</strong></p>
<p>例题：楼兰图腾（单点修改，区间查询）</p>
<p><a href="https://www.acwing.com/problem/content/243/">https://www.acwing.com/problem/content/243/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] t = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] lower = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] higher = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//求二进制最后一位1</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改操作，找到所有唯一的父节点，相当于递归，往上找父节点</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))&#123;</span><br><span class="line">            t[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询操作，求前缀和操作，根据画出来的树状图，即所有每次减去一个最后一位1</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i != <span class="number">0</span>; i -= lowbit(i))&#123;</span><br><span class="line">            res += t[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        n = Integer.parseInt(br.readLine());</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            a[i] = Integer.parseInt(str[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y = a[i];<span class="comment">//y表示坐标</span></span><br><span class="line">            lower[i] = sum(y - <span class="number">1</span>);<span class="comment">//然后这里求y-1就是因为左边是比他小的数，所以上面up不加的</span></span><br><span class="line">            higher[i] = sum(n) - sum(y);<span class="comment">//右边所有比他大的数</span></span><br><span class="line">            add(y, <span class="number">1</span>);<span class="comment">//然后在y这个坐标加上1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.fill(t, <span class="number">0</span>);<span class="comment">//因为需要进行两边操作，所以需要进行清空树状数组</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//会爆int,因为每一个点左右两边最坏可能都有n个数</span></span><br><span class="line">        <span class="comment">//那就是n方个数，然后执行n次，就是n3方，爆int</span></span><br><span class="line">        <span class="keyword">long</span> resA = <span class="number">0</span>, resV = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;<span class="comment">//然后将数组翻转过来，重新操作一遍，原理一样</span></span><br><span class="line">            <span class="keyword">int</span> y = a[i];</span><br><span class="line">            resA += (<span class="keyword">long</span>)lower[i] * sum(y - <span class="number">1</span>);</span><br><span class="line">            resV += (<span class="keyword">long</span>)higher[i] * (sum(n) - sum(y));</span><br><span class="line">            add(y, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(resV + <span class="string">&quot; &quot;</span> + resA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>差分逆运算也可以转变成前缀和进行树状数组操作</strong></p>
<p>例题：一个简单的整数问题（区间查询，单点修改）</p>
<p><a href="https://www.acwing.com/problem/content/248/">https://www.acwing.com/problem/content/248/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[] b = <span class="keyword">new</span> <span class="keyword">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[] tr = <span class="keyword">new</span> <span class="keyword">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))tr[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= lowbit(i))res += tr[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            a[i] = Integer.parseInt(str[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            add(i, a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m-- != <span class="number">0</span>)&#123;</span><br><span class="line">            str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            String op = str[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(op.equals(<span class="string">&quot;C&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> l = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">int</span> r = Integer.parseInt(str[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">int</span> d = Integer.parseInt(str[<span class="number">3</span>]);</span><br><span class="line">                add(l, d); add(r + <span class="number">1</span>, -d);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> x = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">                System.out.println(sum(x));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>详细用法见blog：</p>
<p><a href="https://blog.csdn.net/qq_52466006/article/details/120978631">https://blog.csdn.net/qq_52466006/article/details/120978631</a></p>
<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p>作用：</p>
<ul>
<li>求连续区间和</li>
<li>求长度、求面积</li>
<li>染色问题</li>
</ul>
<h3 id="pushup"><a href="#pushup" class="headerlink" title="pushup"></a>pushup</h3><p>子节点算父节点</p>
<ul>
<li>pushup(u)</li>
<li>build() 将一段区间初始化成线段树</li>
<li>modify()<ul>
<li>修改单点 easy</li>
<li>修改区间 pushdown 懒标记</li>
</ul>
</li>
<li>query() 查询某段区间信息 O(4logn)</li>
</ul>
<p><strong>空间大小：4n（n为节点个数）</strong></p>
<img src="/2022/09/17/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8002/image-20230327163838094.png" class title="image-20230327163838094">
<p><strong>build</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    tr[u] = <span class="keyword">new</span> Node(l, r, <span class="number">0</span>);<span class="comment">//可变</span></span><br><span class="line">    <span class="keyword">if</span>(l == r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">//pushup(u);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>query</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)<span class="keyword">return</span> tr[u].v;<span class="comment">//树中节点已经被完全包含在[l, r]中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)v = query(u &lt;&lt; <span class="number">1</span>, l, r);<span class="comment">//与左子树有交集</span></span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)v = Math.max(v, query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));<span class="comment">//与右子树有交集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)<span class="keyword">return</span> tr[u].v;<span class="comment">//树中节点已经被完全包含在[l, r]中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)<span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span>, l, r);<span class="comment">//全在左子树</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)<span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);<span class="comment">//全在右子树</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> left = query(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">int</span> right = query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l , r);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>pushup</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123; <span class="comment">//由子节点的信息，来计算父节点的信息</span></span><br><span class="line">	tr[u].v = Math.max(tr[u &lt;&lt; <span class="number">1</span>].v, tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>modify</strong>（单点修改）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == x &amp;&amp; tr[u].r == x)tr[u].v = v;<span class="comment">//找到了叶节点</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span>(x &lt;= mid)modify(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line">        <span class="keyword">else</span> modify(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line">        pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题</p>
<p>最大数 <a href="https://www.acwing.com/problem/content/description/1277/">https://www.acwing.com/problem/content/description/1277/</a></p>
<p>维护最大值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="keyword">int</span> v; <span class="comment">//区间[l, r]中的最大值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.l = l; <span class="keyword">this</span>.r = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Node[] tr = <span class="keyword">new</span> Node[N * <span class="number">4</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        tr[u] = <span class="keyword">new</span> Node(l, r);</span><br><span class="line">        <span class="keyword">if</span>(l == r)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123; <span class="comment">//由子节点的信息，来计算父节点的信息</span></span><br><span class="line">        tr[u].v = Math.max(tr[u &lt;&lt; <span class="number">1</span>].v, tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)<span class="keyword">return</span> tr[u].v;<span class="comment">//树中节点已经被完全包含在[l, r]中</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid)v = query(u &lt;&lt; <span class="number">1</span>, l, r);<span class="comment">//与左子树有交集</span></span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid)v = Math.max(v, query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));<span class="comment">//与右子树有交集</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].l == x &amp;&amp; tr[u].r == x)tr[u].v = v;<span class="comment">//找到了叶节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x &lt;= mid)modify(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line">            <span class="keyword">else</span> modify(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line">            pushup(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>, last = <span class="number">0</span>;<span class="comment">//n表示动态序列长度 last表示上一次查询结果</span></span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> p = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">        <span class="keyword">while</span>(m-- != <span class="number">0</span>)&#123;</span><br><span class="line">            str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            String op = str[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> x = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(op.equals(<span class="string">&quot;Q&quot;</span>))&#123;</span><br><span class="line">                last = query(<span class="number">1</span>, n - x + <span class="number">1</span>, n);</span><br><span class="line">                System.out.println(last);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                modify(<span class="number">1</span>, n + <span class="number">1</span>, (<span class="keyword">int</span>)(((<span class="keyword">long</span>)last + x) % p));<span class="comment">//注意防止溢出</span></span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>维护区间和：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l, r, w;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.l = l; <span class="keyword">this</span>.r = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Node[] tr = <span class="keyword">new</span> Node[N * <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        tr[u] = <span class="keyword">new</span> Node(l, r);</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            build(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">            build(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">            pushup(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        tr[u].w = tr[u &lt;&lt; <span class="number">1</span>].w + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)<span class="keyword">return</span> tr[u].w;</span><br><span class="line">        <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid)sum += query(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid)sum += query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].l == x &amp;&amp; tr[u].r == x)tr[u].w += v;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x &lt;= mid)modify(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line">            <span class="keyword">else</span> modify(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line">            pushup(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            a[i] = Integer.parseInt(str[i - <span class="number">1</span>]);</span><br><span class="line">            modify(<span class="number">1</span>, i, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m-- != <span class="number">0</span>)&#123;</span><br><span class="line">            str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> k = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(str[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">                bw.write(query(<span class="number">1</span>, a, b) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                modify(<span class="number">1</span>, a, b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="pushdown（懒标记、延迟标记）"><a href="#pushdown（懒标记、延迟标记）" class="headerlink" title="pushdown（懒标记、延迟标记）"></a>pushdown（懒标记、延迟标记）</h3><p>父节点算子节点</p>
<p>扫描线</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>英语口语复习</title>
    <url>/2023/08/31/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>雅思英语口语备考ing</p>
<span id="more"></span>
<h1 id="传统面试问题"><a href="#传统面试问题" class="headerlink" title="传统面试问题"></a>传统面试问题</h1><p><strong>1. What can you tell me about yourself？</strong></p>
<p>hello, my name is zhaowenli, and I come from shanxi Province. I am a junior in my graduate school UESTC, and I major in software engining, and minor in finance, which is also a special point for the plan of our cultivation. According to the current ranking of mine, I can achieve the qualification of our school to be promoted as a postgraduate without examinations. During my learning career in collage, I have learned the basic skill and knowledge of software making . I also have a period of internship of working in the company as the Java back-end developer for three or four month. Further more, I kind of like the big fan of program design and I achieve a few prizes in this field as you can see. So the cultivation plan of our school and the practical experience made me become more practical in problem fixing and more efficient in coding or program building and etc. Also, I served as the technical director in our student organization and one of the commitee members in our class, so I believe my ability of cooperating with others and handling with human relationship is quite well. Last but not least, I think the development for a person should be comprehensive. So not only in study and research, I also like to pursue something others especially in sports and music. I think only in that way can make my life more colorful and dynamic. That’s all, thanks for your listening.</p>
<p><strong>2. What would you like to be doing five years after graduation？</strong></p>
<p>From my perspective, I think the future plan we made always based on the experience and horizon we have currently. During my learning career in collage, I have learned the basic skill and knowledge of software making, especially on back-end development. So dealing with data gradually becomes a part of daily work, like how to collect them, how to form it and write them to database and manage them and etc.</p>
<p>big data; data mining; artificial intelligence; </p>
<p><strong>3. What is your greatest strength？</strong></p>
<p>I feel that my strongest strength is my ability to stick to things to get them done. I feel a real sense of accomplishment when I finish a job especially when it is tough to handle. The process is kind of like: If this direction doesn’t work, think differently, or solve the problem step by step. </p>
<p><strong>4. What is your greatest weakness？</strong></p>
<p>I‘m such a perfectionist that I will not stop until a job is well done. no matter how long it would spend or how much the energy would take.  I sometimes need to fulfill this kind of thought from my inner voice and it force me to do things better until perfect. But in others’ opinion it could just a waste of time. </p>
<p><strong>5. How do you feel about your progress to date？</strong></p>
<ul>
<li><p><strong>ability</strong> </p>
<ul>
<li>knowledge software building</li>
<li>cooperating with other</li>
<li>social contact</li>
</ul>
</li>
<li><p><strong>experience</strong></p>
<ul>
<li>leadership</li>
<li>internship</li>
</ul>
</li>
</ul>
<h1 id="其他常见问题"><a href="#其他常见问题" class="headerlink" title="其他常见问题"></a>其他常见问题</h1><ol>
<li><p>Why did you choose peking university？</p>
</li>
<li><p>Why did you choose xx major？</p>
</li>
<li><p>What would you like to be doing five years after graduation？</p>
</li>
<li><p>What has been your greatest accomplishment？</p>
</li>
<li><p>Describe your greatest strengths and weaknesses.</p>
</li>
</ol>
<p>11 .What have you learned from the jobs you have held？</p>
<h1 id="行为面试问题"><a href="#行为面试问题" class="headerlink" title="行为面试问题"></a>行为面试问题</h1><ol>
<li><p>Describe the best/worst team of which you have been a member.</p>
</li>
<li><p>Tell me about a time when your course load was heaviest. How did you get all of your work done？</p>
</li>
<li><p>Give me a specific example of a time when you sold someone on an idea or concept.</p>
</li>
<li><p>Tell me about a time when you were creative in solving a problem.</p>
</li>
<li><p>Describe a time when you got co-workers or classmates who dislike each other to work together.</p>
</li>
<li><p>Tell me about a time when you made a bad decision.</p>
</li>
</ol>
<h1 id="压力面试问题"><a href="#压力面试问题" class="headerlink" title="压力面试问题"></a>压力面试问题</h1><ol>
<li><p>What kinds of people do you find it difficult to work with？</p>
</li>
<li><p>What are some of the things you find difficult to do？</p>
</li>
<li><p>How would you evaluate me as an interviewer？</p>
</li>
<li><p>What interests you least about MBA？</p>
</li>
<li><p>How do you handle rejection？</p>
</li>
<li><p>What is the worst thing you have heard about our school？</p>
</li>
<li><p>See this pen I‘m holding. Sell it to me.</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础05</title>
    <url>/2023/01/19/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8005/</url>
    <content><![CDATA[<p>学习动态规划</p>
<p>常用模型</p>
<ul>
<li>背包</li>
<li>线性DP</li>
<li>计数类DP</li>
<li>数位统计DP</li>
<li>状态压缩DP</li>
<li>树形DP</li>
<li>记忆化搜索</li>
</ul>
<span id="more"></span>
<h1 id="闫式DP"><a href="#闫式DP" class="headerlink" title="闫式DP"></a>闫式DP</h1><p>没有模板，理解分析方式（集合的思想）</p>
<img src="/2023/01/19/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8005/image-20230110120402651.png" class title="image-20230110120402651">
<h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><p>模板问题：有n个物品和容量为v的背包，每件物品有体积vi和价值wi，问能装下的最大价值w</p>
<h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p>每件物品只能用1次（0,1）</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li><p>集合</p>
<ul>
<li>表示所有选法</li>
<li>条件：<ol>
<li>只从前i个物品中选</li>
<li>总体积&lt;=j</li>
</ol>
</li>
</ul>
</li>
<li><p>属性：</p>
<p><strong>Max</strong>、Min、数量</p>
</li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：<code>f(i,j)</code> </p>
<p>-&gt; 不含i情况<code>f(i-1, j)</code> + 含i情况<code>f(i-1, j - vi) + wi</code></p>
</li>
</ul>
<p>得到公式：<code>dp[i][j] = Math.max(dp[i][j], dp[i-1][j-v[i]] + w[i]);</code></p>
<p>二维dp实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;<span class="comment">//注意下标</span></span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            v[i] = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            w[i] = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= v[i])&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i-<span class="number">1</span>][j-v[i]] + w[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[n][m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dp优化：二维等价成一维</p>
<p>因为：i只用到了i-1，将i删去，交换循环方向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//一维实现降低空间复杂度</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;<span class="comment">//注意下标</span></span><br><span class="line">            String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            v[i] = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            w[i] = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= v[i]; j--)&#123;<span class="comment">//巧妙改变顺序 保证计算的是dp[i-1][j-v[i]] 正序则dp[i][j-v[i]]会被提前计算</span></span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j-v[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p>每件物品有无限个</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li><p>集合</p>
<ul>
<li>表示所有选法</li>
<li>条件：<ol>
<li>只从前i个物品中选</li>
<li>总体积&lt;=j</li>
</ol>
</li>
</ul>
</li>
<li><p>属性：</p>
<p><strong>Max</strong>、Min、数量</p>
</li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：<code>f(i,j)</code>    </p>
<p>-&gt; 没有选i的情况<code>f(i - 1, j)</code> + 选了k个i的情况<code>f(i - 1, j - k * vi) + k * w[i]</code>（可合并）</p>
</li>
</ul>
<p>三维实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k * v[i] &lt;= j; k++)</span><br><span class="line">                f[i][j] = Math.max(f[i][j], f[i-<span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">System.out.println(f[n][m]);</span><br></pre></td></tr></table></figure>
<p>dp优化：</p>
<img src="/2023/01/19/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8005/image-20230110230206940.png" class title="image-20230110230206940">
<p>得到公式：<code>f(i, j) = Max(f[i - 1, j], f[i, j - v] + w)</code></p>
<p>可以理解为分为不含i的情况 + 至少含一次i的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">        f[i][j] = f[i-<span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= v[i])</span><br><span class="line">	        f[i][j] = Math.max(f[i][j], f[i][j - v[i]] + w[i]);</span><br><span class="line">System.out.println(f[n][m]);</span><br></pre></td></tr></table></figure>
<p>可以看出01背包问题是i - 1，完全背包问题是i</p>
<p>那么完全背包也可以优化成一维：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = v[i]; j &lt;= m; j++)</span><br><span class="line">		dp[j] = Math.max(dp[j], dp[j - v[i]] + w[i]);</span><br></pre></td></tr></table></figure>
<h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>限定每个物品有si个（有限）</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li><p>集合</p>
<ul>
<li>表示所有选法</li>
<li>条件：<ol>
<li>只从前i个物品中选</li>
<li>总体积&lt;=j</li>
</ol>
</li>
</ul>
</li>
<li><p>属性：</p>
<p><strong>Max</strong>、Min、数量</p>
</li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：<code>f(i,j)</code>    </p>
<p>-&gt; 没有选i的情况<code>f(i - 1, j)</code> + 选了k个i的情况<code>f(i - 1, j - k * vi) + k * w[i]</code>（可合并）</p>
</li>
</ul>
<p>朴素三位和完全背包类似：</p>
<p>复杂度: O(v <em> w </em> s)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k++)</span><br><span class="line">                f[i][j] = Math.max(f[i][j], f[i-<span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">System.out.println(f[n][m]);</span><br></pre></td></tr></table></figure>
<img src="/2023/01/19/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8005/image-20230112200052395.png" class title="image-20230112200052395">
<p>然而多重背包问题不能用完全背包优化 ， 因为是多重背包不能确定是否有最后一项（因为s不一定可使背包边满），而完全背包一定每有最后一项。</p>
<p>二进制优化</p>
<p>将s[i]分组，以二进制为标准，分成<code>1, 2, 4, 8, ..., 2^(k), c</code>，其中c为<code>s[i] - (2^(k+1) - 1)</code></p>
<p>可以证明，这组数可以表示0~s[i]之间的所有数</p>
<p>因为：<code>1, 2, 4, 8, ..., 2^(k)</code>可表示<code>[0, 2^(k+1) - 1]</code>中所有的数；加上c可表示<code>[c, s[i]]</code>中所有的数；而<code>c &lt;= 2 ^ (k+1)</code>，两区间可以合并</p>
<p>这样对于每个s[i]，可以将其分为log(s[i])个数分别考虑选择，这样就可以将问题转换为n扩大到n * log(s[i])个数后进行01背包</p>
<p>复杂度：O(n <em> m </em> log[s])</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">11010</span>;<span class="comment">//1000 * Math.log(2, 2000)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">2010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] v = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            String[] arr = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(arr[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> b = Integer.parseInt(arr[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> s = Integer.parseInt(arr[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(k &lt;= s)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                v[cnt] = a * k;</span><br><span class="line">                w[cnt] = b * k;</span><br><span class="line">                s -= k;</span><br><span class="line">                k *= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                v[cnt] = a * s;</span><br><span class="line">                w[cnt] = b * s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        n = cnt;<span class="comment">//不要漏了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;<span class="comment">//01背包</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= v[i]; j--)&#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a>分组背包问题</h3><p>有n组物品，每组物品有若干个，但每组只能选一个物品</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li><p>集合</p>
<ul>
<li>表示所有选法</li>
<li>条件：<ol>
<li>只从<strong>前i组</strong>物品中选</li>
<li>总体积&lt;=j</li>
</ol>
</li>
</ul>
</li>
<li><p>属性：</p>
<p><strong>Max</strong>、Min、数量</p>
</li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：<code>f(i,j)</code></p>
<p>-&gt; 第i组没有选的情况<code>f(i - 1, j)</code> + 第i组选了第k个的情况<code>f(i - 1, j - v[i,k]) + w[i,k]</code></p>
</li>
</ul>
<p>复杂度<code>O(n^3)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] v = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[N];<span class="comment">//第i组中物品数量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            s[i] = Integer.parseInt(br.readLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= s[i]; j++)&#123;</span><br><span class="line">                String[] arr = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                v[i][j] = Integer.parseInt(arr[<span class="number">0</span>]);</span><br><span class="line">                w[i][j] = Integer.parseInt(arr[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= s[i]; k++)&#123;<span class="comment">//注意这里遍历顺序不能变</span></span><br><span class="line">                    <span class="keyword">if</span>(j &gt;= v[i][k])dp[j] = Math.max(dp[j], dp[j - v[i][k]] + w[i][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><h3 id="最长上升序列"><a href="#最长上升序列" class="headerlink" title="最长上升序列"></a>最长上升序列</h3><p>给定一个长度为 N 的数列，求数值严格单调递增的子序列的长度最长是多少。</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i)</p>
<ul>
<li>集合<ul>
<li>所有以i结尾的上升子序列</li>
</ul>
</li>
<li>属性：是<strong>Max</strong></li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：以该子序列倒数第二个数位置进行划分，分为i类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)a[i] = sc.nextInt();</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] &gt; a[j])dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)res = Math.max(res, dp[i]);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p>给定两个长度分别为 N 和 M 的字符串 A 和 B，求既是 A 的子序列又是 B 的子序列的字符串长度最长是多少。</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li>集合<ul>
<li>所有在第一个序列的前i个字母中出现，且在第二个序列的前j个字母中出现的子序列</li>
</ul>
</li>
<li>属性：是<strong>Max</strong></li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：以a[i] b[j] 是否被选划分集合为4中情况</p>
<p>00: <code>dp[i-1, j-1]</code> </p>
<p>11: <code>dp[i-1, j-1] + 1</code></p>
<p>01: <code>dp[i-1, j]</code> <strong>包含了</strong>a[i]不出现,b[j]出现的情况(01)</p>
<p>10: <code>dp[i, j-1]</code> <strong>包含了</strong>a[i]出现,b[j]不出现的情况(10)</p>
<p>而01和10的情况中自然包含了00情况，于是代码中可以不写</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        String a = sc.next();</span><br><span class="line">        String b = sc.next();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                f[i][j] = Math.max(f[i-<span class="number">1</span>][j], f[i][j-<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(a.charAt(i-<span class="number">1</span>) == b.charAt(j-<span class="number">1</span>))f[i][j] = Math.max(f[i][j], f[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(f[n][m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h3><p>给定两个字符串 A 和 B，现在要将 A 经过若干操作变为 B，可进行的操作有：  </p>
<p>删除–将字符串 A 中的某个字符删除。</p>
<p>插入–在字符串 A 的某个位置插入某个字符。 </p>
<p>替换–将字符串 A 中的某个字符替换为另一个字符。 </p>
<p>现在请你求出，将 A 变为 B 至少需要进行多少次操作。</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li>集合<ul>
<li>所有将<code>a[1~i]</code>变成<code>b[1~j]</code>的操作方式</li>
</ul>
</li>
<li>属性：是<strong>Min</strong></li>
</ul>
</li>
<li><p>状态计算：</p>
<ul>
<li><p>集合划分：根据最后一步操作</p>
<p>删除<code>a[i]</code>：<code>f[i-1][j] + 1</code></p>
<p>插入<code>a[i]</code>：<code>f[i][j-1] + 1</code></p>
<p>替换<code>a[i]</code>：<code>f[i-1][j-1] + 1</code></p>
</li>
</ul>
</li>
</ul>
<p>复杂度：<code>O(3*n^2)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> INF = (<span class="keyword">int</span>)<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">		String a = sc.next();</span><br><span class="line">		<span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">		String b = sc.next();</span><br><span class="line">		<span class="comment">//切记初始化</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)f[i][<span class="number">0</span>] = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)f[<span class="number">0</span>][j] = j;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">				f[i][j] = Math.min(f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span> (a.charAt(i - <span class="number">1</span>) == b.charAt(j - <span class="number">1</span>))</span><br><span class="line">					f[i][j] = Math.min(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">				f[i][j] = Math.min(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(f[n][m]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h3><p>区间 DP 常用模版<br>所有的区间dp问题枚举时，第一维通常是枚举区间长度，并且一般 len = 1 时用来初始化，枚举从 len = 2 开始；第二维枚举起点 i （右端点 j 自动获得，j = i + len - 1）</p>
<p>模板代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++) &#123;         <span class="comment">// 区间长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123; <span class="comment">// 枚举起点</span></span><br><span class="line">        <span class="keyword">int</span> j = i + len - <span class="number">1</span>;                 <span class="comment">// 区间终点</span></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">            dp[i][j] = 初始值</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++) &#123;        <span class="comment">// 枚举分割点，构造状态转移方程</span></span><br><span class="line">            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + <span class="number">1</span>][j] + w[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li>集合<ul>
<li>所有将第i堆石子到第j对石子合并成一堆石子的合并方式</li>
</ul>
</li>
<li>属性：是<strong>Min</strong></li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：以最后一步是左边哪一部分和右边哪一部分合并，即以分界线划分成j - i组    [i, k], [k + 1, j] k = [i,  j-1]</p>
<p><code>f[i][j] = min(f[i][k] + f[k+1][j] + s[j] - s[i-1])</code></p>
</li>
</ul>
<p>复杂度：O(N^3)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">310</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> INF = (<span class="keyword">int</span>)<span class="number">2e9</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            s[i] = sc.nextInt();</span><br><span class="line">            s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//len = 1时无需合并,f[i][i] = 0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)&#123;<span class="comment">//先枚举长度 保证需要的f[][]提前被算好了</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> l = i, r = i + len - <span class="number">1</span>;</span><br><span class="line">                f[l][r] = INF;<span class="comment">//求最小值切记要初始化</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt; r; k++)&#123;</span><br><span class="line">                    f[l][r] = Math.min(f[l][r], f[l][k] + f[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(f[<span class="number">1</span>][n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="计数类DP"><a href="#计数类DP" class="headerlink" title="计数类DP"></a>计数类DP</h2><h3 id="整数拆分"><a href="#整数拆分" class="headerlink" title="整数拆分"></a>整数拆分</h3><p>一个正整数 n 可以表示成若干个正整数之和，形如：<code>n=n1+n2+…+nk</code>，其中 <code>n1≥n2≥…≥nk,k≥1</code>。  我们将这样的一种表示称为正整数 n 的一种划分。  现在给定一个正整数 n，请你求出 n 共有多少种不同的划分方法。</p>
<p><strong>方法一</strong>：理解为<strong>完全背包问题</strong></p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li>集合<ul>
<li>选择1~i个数的和恰好为j的方案数</li>
</ul>
</li>
<li>属性：<strong>数量</strong></li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：以选择i的数量为划分依据，分为不选i，选s个i</p>
<p>状态转移：<code>f[i][j] = (f[i - 1][j] + sum(f[i - 1][j - s * i]))</code>其中s * i &lt;= j</p>
<p>发现可以同完全背包问题一样得到优化如下：</p>
<p><code>f[i][j] = (f[i - 1][j] + f[i][j - i])</code></p>
<p>也可变成一维：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod = (<span class="keyword">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++)&#123;</span><br><span class="line">                f[j] = (f[j] + f[j - i]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(f[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>方法二：</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li>集合<ul>
<li>所有总和是i，并且恰好表示成j个正整数的和的方案数</li>
</ul>
</li>
<li>属性：<strong>数量</strong></li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：j个数的最小值是否为1</p>
<p>为1，将1去掉得到<code>f[i-1][j-1]</code>；不为1，将所有数减1，得到<code>f[i - j][j]</code></p>
<p>状态转移：<code>f[i][j] = f[i-1][j-1] + f[i - j][j]</code></p>
<p>最终答案是<code>res = sum(f[n][1~n])</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod = (<span class="keyword">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//注意初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">                f[i][j] = (f[i - <span class="number">1</span>][j - <span class="number">1</span>] + f[i - j][j]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)res = (res + f[n][i]) % mod;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数位统计DP"><a href="#数位统计DP" class="headerlink" title="数位统计DP"></a>数位统计DP</h2><p>计数问题：</p>
<p>给定两个整数 a 和 b，求 a 和 b 之间的所有数字中 0∼9 的出现次数。</p>
<p>0&lt;a,b&lt;100000000</p>
<p>求一个函数count(n ,x)表示1~n中x出现的次数(x = 0 ~ 9)</p>
<p><strong>分情况讨论</strong>：</p>
<img src="/2023/01/19/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8005/image-20230116094445965.png" class title="image-20230116094445965">
<p>边界问题：</p>
<ul>
<li>当所求x出现在最高位时，没有(1)的情况</li>
<li>当所求x = 0时，为了规避前导零的情况，abc != 0, 故是abc * 999</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(List&lt;Integer&gt; list, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &gt;= r; i--)&#123;</span><br><span class="line">            res = res * <span class="number">10</span> + list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">power10</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            res *= <span class="number">10</span>;</span><br><span class="line">            x--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            l.add(n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = l.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//0不需要枚举最高位</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span> - (x == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>); i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len - <span class="number">1</span>)&#123;</span><br><span class="line">                res += get(l, len - <span class="number">1</span>, i + <span class="number">1</span>) * power10(i);</span><br><span class="line">                <span class="keyword">if</span>(x == <span class="number">0</span>)res -= power10(i);<span class="comment">//前导零的情况</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(l.get(i) &gt; x)res += power10(i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l.get(i) == x) res += get(l, i - <span class="number">1</span>, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">                <span class="keyword">int</span> t = a;</span><br><span class="line">                a = b;</span><br><span class="line">                b = t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">                System.out.print(count(b, i) - count(a - <span class="number">1</span>, i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="状态压缩DP"><a href="#状态压缩DP" class="headerlink" title="状态压缩DP"></a>状态压缩DP</h2><p>例题：</p>
<h3 id="蒙德里安的梦想"><a href="#蒙德里安的梦想" class="headerlink" title="蒙德里安的梦想"></a>蒙德里安的梦想</h3><p>求把 N×MN×M 的棋盘分割成若干个 1×2 的长方形，有多少种方案。</p>
<p>例如当 N=2，M=4 时，共有 5 种方案。当 N=2，M=3 时，共有 3 种方案。</p>
<p>如下图所示：</p>
<img src="/2023/01/19/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8005/19_4dd1644c20-2411_1.jpg" class title="2411_1.jpg">
<p>问给定N,M后的方案数。</p>
<p><code>1≤N,M≤11</code></p>
<p>解：</p>
<p>核心：先放横着的，再放竖着的</p>
<p>总方案数：只放横着的小方块的合法方案数</p>
<p>合法判断：所有剩余位置能否填充满竖着的小方块-&gt;可以按列来看。每一列内部所有连续的空着的小方块，需要是偶数个</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li>集合<ul>
<li>已经将前i-1列摆好，且从第i-1列，伸出到第i列的状态是j（二进制）的所有方案</li>
</ul>
</li>
<li>属性：<strong>数量</strong></li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：根据i-1列伸出的小方格状态划分为2^n种情况</p>
<p>条件：</p>
<p>（1）(j&amp;k) == 0(i-2列伸到i-1列的状态是k)</p>
<p>（2）所有连续空着的位置的长度必须是偶数</p>
<p>最终答案：<code>f[m][0]</code>第m+1列状态都为0的所有方案</p>
</li>
</ul>
<p>时间复杂度：O(11 <em> 2^11 </em> 2^11)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">12</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[][] f = <span class="keyword">new</span> <span class="keyword">long</span>[N][M];<span class="comment">//动态规划数组</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[][] state = <span class="keyword">new</span> <span class="keyword">boolean</span>[M][M];<span class="comment">//由一个状态i变到一个状态j是否合法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] st = <span class="keyword">new</span> <span class="keyword">boolean</span>[M];<span class="comment">//表示0~2^n-1中的状态是否合法(偶数个0连续)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//预处理st数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//表示当前前面0的个数</span></span><br><span class="line">                <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;<span class="comment">//枚举位数</span></span><br><span class="line">                    <span class="keyword">if</span>((i &gt;&gt; j &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(cnt % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                            flag = <span class="keyword">false</span>;<span class="comment">//前面有奇数个0,不成立</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        cnt = <span class="number">0</span>;<span class="comment">//偶数个0恢复状态</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> cnt++;<span class="comment">//如果当前不是1,cnt累加0的个数</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断一下最后一层0的个数</span></span><br><span class="line">                <span class="keyword">if</span>(cnt % <span class="number">2</span> == <span class="number">1</span>)flag = <span class="keyword">false</span>;</span><br><span class="line">                st[i] = flag;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)&#123;</span><br><span class="line">                Arrays.fill(state[i], <span class="keyword">false</span>);<span class="comment">//将状态清零防止上一组干扰</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; j++)&#123;</span><br><span class="line">                    <span class="comment">//满足：1.i和j状态相同位不能同时为1</span></span><br><span class="line">                    <span class="comment">//2. 被i和j塞满的位置满足连续偶数个0</span></span><br><span class="line">                    <span class="keyword">if</span>((i &amp; j) == <span class="number">0</span> &amp;&amp; st[i | j])&#123;</span><br><span class="line">                        state[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)Arrays.fill(f[i], <span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始化：空着也表示一种方案数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;<span class="comment">//枚举每一列</span></span><br><span class="line">               <span class="comment">//枚举i - 1 到 i 的所有方案</span></span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; j++)&#123;</span><br><span class="line">                   <span class="comment">//枚举i - 2 到 i - 1的方案数</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; n; k++)&#123;</span><br><span class="line">                       <span class="comment">//现在的方案等于前面每种k方案的总和</span></span><br><span class="line">                       <span class="keyword">if</span>(state[j][k])f[i][j] += f[i - <span class="number">1</span>][k];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(f[m][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h3><p>给定一张 n 个点的带权无向图，点从 0∼n−1 标号，求起点 0 到终点 n−1 的最短 Hamilton 路径。  Hamilton 路径的定义是从 0 到 n−1 不重不漏地经过每个点恰好一次。</p>
<p>输出一个整数，表示最短 Hamilton 路径的长度。<code>1≤n≤20 0≤a[i,j]≤107</code></p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i,j)</p>
<ul>
<li>集合<ul>
<li>所有从0走到j，走过的所有点状态是i（二进制 表示是否走过）的所有路径</li>
</ul>
</li>
<li>属性：<strong>Min</strong></li>
</ul>
</li>
<li><p>状态计算</p>
<p>-&gt;集合划分：倒数第二个点是k （0,1,2,…,m）</p>
<p><code>Min(f(i - &#123;j&#125;, k) )+ a(k, j)</code></p>
</li>
</ul>
<p>复杂度：<code>n * n * 2 ^ n</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[M][N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                w[i][j] = Integer.parseInt(str[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)&#123;</span><br><span class="line">            Arrays.fill(f[i], <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//初始化0到0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((i &gt;&gt; j &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>((i - (<span class="number">1</span> &lt;&lt; j) &gt;&gt; k &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">                            f[i][j] = Math.min(f[i][j], f[i - (<span class="number">1</span> &lt;&lt; j)][k] + w[k][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h3 id="没有上司的舞会"><a href="#没有上司的舞会" class="headerlink" title="没有上司的舞会"></a>没有上司的舞会</h3><p>Ural 大学有 N 名职员，编号为 1∼N。  </p>
<p>他们的关系就像一棵以校长为根的树，父节点就是子节点的直接上司。  </p>
<p>每个职员有一个快乐指数，用整数 Hi 给出，其中 1≤i≤N。 </p>
<p> 现在要召开一场周年庆宴会，不过，没有职员愿意和直接上司一起参会。  在满足这个条件的前提下，主办方希望邀请一部分职员参会，使得所有参会职员的快乐指数总和最大，求这个最大值。  </p>
<p>输入格式 第一行一个整数 N。  </p>
<p>接下来 N 行，第 i 行表示 i 号职员的快乐指数 Hi。 </p>
<p>接下来 N−1 行，每行输入一对整数 L,K，表示 K 是 L 的直接上司。  </p>
<p>输出格式 输出最大的快乐指数。  </p>
<p>数据范围 1≤N≤6000, −128≤Hi≤127</p>
<p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(u, 0 / 1)</p>
<ul>
<li>集合<ul>
<li>f(u,0)所有从以u为根的子树中选择，并且不选u这个点的方案</li>
<li>f(u,1)所有从以u为根的子树中选择，并且选择u这个点的方案</li>
</ul>
</li>
<li>属性：<strong>Min</strong></li>
</ul>
</li>
<li><p>状态计算(设u的子节点为<code>si</code>)</p>
<p><code>f(u, 0) = sum(max(f(si, 0), f(si, 1)))</code></p>
<p><code>f(u, 1) = sum(f(si, 0))</code></p>
</li>
</ul>
<p>复杂度：<code>O(n)</code>（状态数：<code>2n</code>，所有节点儿子的数量（总枚举次数：n-1）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">6010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[N][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] happy = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] ne = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] has_father = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];<span class="comment">//寻根</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//a父节点 b子节点</span></span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = h[a];</span><br><span class="line">        h[a] = idx ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        f[u][<span class="number">1</span>] = happy[u];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h[u]; i != <span class="number">0</span>; i = ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            dfs(j);</span><br><span class="line">            f[u][<span class="number">0</span>] += Math.max(f[j][<span class="number">0</span>], f[j][<span class="number">1</span>]);</span><br><span class="line">            f[u][<span class="number">1</span>] += f[j][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)happy[i] = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">            add(b, a);<span class="comment">//注意顺序</span></span><br><span class="line">            has_father[a] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(has_father[root])root++;</span><br><span class="line">        </span><br><span class="line">        dfs(root);</span><br><span class="line">        System.out.println(Math.max(f[root][<span class="number">0</span>], f[root][<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><h3 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h3><p><code>Dp</code>:</p>
<ul>
<li><p>状态表示f(i, j)</p>
<ul>
<li>集合<ul>
<li>所有从(i, j)开始滑的路径</li>
</ul>
</li>
<li>属性：<strong>Max</strong></li>
</ul>
</li>
<li><p>状态计算(设u的子节点为<code>si</code>)</p>
<p>集合划分：按第一步滑动方向分成四种</p>
<p><code>f[x][y] = Math.max(f[x][y], dfs(nx, ny) + 1);</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">310</span>;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[x][y] != <span class="number">0</span>)<span class="keyword">return</span> f[x][y];<span class="comment">//记忆化搜索</span></span><br><span class="line">        f[x][y] = <span class="number">1</span>;<span class="comment">//记得初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line">            <span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(nx &gt; <span class="number">0</span> &amp;&amp; ny &gt; <span class="number">0</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &lt;= m &amp;&amp; a[x][y] &gt; a[nx][ny])&#123;</span><br><span class="line">                f[x][y] = Math.max(f[x][y], dfs(nx, ny) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[x][y];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        n = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">        m = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                a[i][j] = Integer.parseInt(str[j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                max = Math.max(max, dfs(i, j));</span><br><span class="line">        </span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯-1</title>
    <url>/2022/01/17/%E8%93%9D%E6%A1%A5%E6%9D%AF-1/</url>
    <content><![CDATA[<p>学习高精度计算</p>
<span id="more"></span>
<h1 id="高精度的接收方法和存储方法"><a href="#高精度的接收方法和存储方法" class="headerlink" title="高精度的接收方法和存储方法"></a>高精度的接收方法和存储方法</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><ul>
<li>字符串方式</li>
<li>循环加数组</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	len = length(s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		a[i]=s[len-i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将数串s转换为数组a，并倒序存储 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="comment">//或直接用循环加数组方式输入出具</span></span><br></pre></td></tr></table></figure>
<h2 id="进位-借位"><a href="#进位-借位" class="headerlink" title="进位 借位"></a>进位 借位</h2><h3 id="加法进位"><a href="#加法进位" class="headerlink" title="加法进位"></a>加法进位</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">c[i]=a[i]+b[i];</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=<span class="number">10</span>)&#123;c[i]%=<span class="number">10</span>;++c[i+<span class="number">1</span>];&#125;</span><br></pre></td></tr></table></figure>
<p>算法描述如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=length(a)||i&lt;=length(b))</span><br><span class="line">	c[i]=a[i]+b[i]+x;</span><br><span class="line">	x=c[i]/<span class="number">10</span>;</span><br><span class="line">    c[i]%=<span class="number">10</span>;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="减法借位"><a href="#减法借位" class="headerlink" title="减法借位"></a>减法借位</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])&#123;--a[i+<span class="number">1</span>];a[i]+=<span class="number">10</span>;&#125;</span><br><span class="line">c[i]=a[i]-b[i];</span><br></pre></td></tr></table></figure>
<p>算法描述如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> spacename <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">256</span>],b[<span class="number">256</span>],c[<span class="number">256</span>],lena,lenb,lenc,i;</span><br><span class="line">    <span class="keyword">char</span> n[<span class="number">256</span>],n1[<span class="number">256</span>],n2[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">	<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input minuend:&quot;</span>);gets(n1);<span class="comment">//输入被减数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input subtrahend:&quot;</span>);gets(n2);<span class="comment">//输入减数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(n1)&lt;<span class="built_in">strlen</span>(n2)||<span class="built_in">strlen</span>(n1)==<span class="built_in">strlen</span>(n2)&amp;&amp;<span class="built_in">strcmp</span>(n1,n2)&lt;<span class="number">0</span>)<span class="comment">//结果为负</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(n,n1);</span><br><span class="line">        <span class="built_in">strcpy</span>(n1,n2);</span><br><span class="line">        <span class="built_in">strcpy</span>(n2,n);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lena=<span class="built_in">strlen</span>(n1);lenb=<span class="built_in">strlen</span>(n2);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)a[lena-i]=<span class="keyword">int</span>(n1[i]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//被减数放入a数组</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)b[lenb-i]=<span class="keyword">int</span>(n2[i]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//减数放入b数组</span></span><br><span class="line">    i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=lena||i&lt;=lenb)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;b[i])&#123;</span><br><span class="line">            --a[i+<span class="number">1</span>];</span><br><span class="line">            a[i]+=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c[i]=a[i]-b[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    lenc=i;</span><br><span class="line">    <span class="keyword">while</span>((c[lenc]==<span class="number">0</span>)&amp;&amp;(lenc&gt;<span class="number">1</span>))lenc--;<span class="comment">//最高位的0不输出</span></span><br><span class="line">    <span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)<span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="乘法进位"><a href="#乘法进位" class="headerlink" title="乘法进位"></a>乘法进位</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">c[i+j<span class="number">-1</span>]=a[i]*a[j]+x+c[i+j<span class="number">-1</span>];</span><br><span class="line">x=c[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">c[i+j<span class="number">-1</span>]%=<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h3 id="按位相除"><a href="#按位相除" class="headerlink" title="按位相除"></a>按位相除</h3><p><strong>高精除以低精</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//char a1[101]=&quot;12345&quot;;被除数</span></span><br><span class="line"><span class="comment">//int b = 3;除数</span></span><br><span class="line"><span class="comment">//a[100];存放数</span></span><br><span class="line"><span class="comment">//x=0;借位数</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=lena;i++)&#123;</span><br><span class="line">    c[i]=(x*<span class="number">10</span>+a[i])/b;</span><br><span class="line">    x=(x*<span class="number">10</span>+a[i])%b;</span><br><span class="line">&#125;</span><br><span class="line">lenc=<span class="number">1</span>;<span class="comment">//起始为0</span></span><br><span class="line"><span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&lt;lena)</span><br><span class="line">    lenc++; <span class="comment">//删除前导0</span></span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&lt;=lena;i++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p><strong>高精除以高精</strong></p>
<p>用减法模拟出发，对被除数的每一位都减去除数见到当前位置的数字小于除数</p>
<h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>回文数</p>
<p>若依个数（首位不为零）从左向右读与从右向左读都是一样，我们就将其称为回文数。</p>
<p>写一个程序，给定一个N（2&lt;N&lt;=10或N=16）进制数M，求最少经过几步可以得到回文数。如果在30步以内（包含30步）不可能得到回文数，则输入“impossible”</p>
<p>输入样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9 87</span><br></pre></td></tr></table></figure>
<p>输出样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<p>算法分析</p>
<p>N进制算法：</p>
<ul>
<li>当前位规范由%10改为%n</li>
<li>进位处理由/10改为/n</li>
<li>其他运算规则不变</li>
</ul>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">101</span>],b[<span class="number">101</span>],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	a[<span class="number">0</span>] = s.length();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[a[<span class="number">0</span>]-i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[a[<span class="number">0</span>]-i]&lt;=<span class="string">&#x27;9&#x27;</span>)a[i]=s[a[<span class="number">0</span>]-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span> a[i]=s[a[<span class="number">0</span>]-i]-<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>;<span class="comment">//将数串s转换为数组a，并倒序存储 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)b[i]=a[a[<span class="number">0</span>]-i+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)a[i]+=b[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)&#123;</span><br><span class="line">		a[i+<span class="number">1</span>]+=a[i]/n;</span><br><span class="line">		a[i]%=n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a[a[<span class="number">0</span>]+<span class="number">1</span>]&gt;<span class="number">0</span>)a[<span class="number">0</span>]++;<span class="comment">//修正新的a的位数(a+b)最多只能有一个进位 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]!=a[a[<span class="number">0</span>]-i+<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	init(a);</span><br><span class="line">	<span class="keyword">if</span>(check(a))&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(ans++&lt;=<span class="number">30</span>)&#123;</span><br><span class="line">		add(a);</span><br><span class="line">		<span class="keyword">if</span>(check(a))&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h1 id="利用重载运算符进行高精度计算"><a href="#利用重载运算符进行高精度计算" class="headerlink" title="利用重载运算符进行高精度计算"></a>利用重载运算符进行高精度计算</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">4000</span>;</span><br><span class="line">str BIGNUM&#123;</span><br><span class="line">	<span class="keyword">int</span> len,s[MAXN];</span><br><span class="line">    BIGNUM()&#123;len=<span class="number">1</span>;<span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BIGNUM x;</code>有<code>x.len=1</code>,<code>x.s</code>中全部元素均为0</p>
<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值="></a>赋值=</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BIGNUM <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">char</span>* num)&#123; <span class="comment">//operator是关键字</span></span><br><span class="line">    len = <span class="built_in">strlen</span>(num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)s[i]=num[len-i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGNUM <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">int</span> num)&#123;</span><br><span class="line">    <span class="keyword">char</span> a[MAXN];</span><br><span class="line">    <span class="built_in">sprintf</span>(a,<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line">    *<span class="keyword">this</span> = a;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BIGNUM(<span class="keyword">int</span> num)&#123;*<span class="keyword">this</span>=num;&#125;<span class="comment">//数值型初始化</span></span><br><span class="line">BIGNUM(<span class="keyword">const</span> <span class="keyword">char</span> *num)&#123;*<span class="keyword">this</span>=num;&#125;<span class="comment">//字符串初始化</span></span><br></pre></td></tr></table></figure>
<h2 id="输出-lt-lt"><a href="#输出-lt-lt" class="headerlink" title="输出&lt;&lt;"></a>输出&lt;&lt;</h2><p>对<code>&lt;&lt;</code>的重载</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp; out,<span class="keyword">const</span> BIGNUM&amp; x)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x.len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;x.s[i];</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="输入-gt-gt"><a href="#输入-gt-gt" class="headerlink" title="输入&gt;&gt;"></a>输入&gt;&gt;</h2><p>对<code>&gt;&gt;</code>的重载</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;in,BIGNUM &amp;x)&#123;</span><br><span class="line">	<span class="keyword">char</span> num[MAXN];</span><br><span class="line">    in&gt;&gt;num;</span><br><span class="line">    x=num;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运算-，"><a href="#运算-，" class="headerlink" title="运算 +，+="></a>运算 +，+=</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BIGNUM <span class="keyword">operator</span> + (<span class="keyword">const</span> BIGNUM &amp;a)&#123;</span><br><span class="line">	BIGNUM c;<span class="comment">//sum</span></span><br><span class="line">    c.len=max(len,a.len)+<span class="number">1</span>;<span class="comment">//，默认两个数相加有进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x=<span class="number">0</span>;i&lt;c.len;++i)&#123;</span><br><span class="line">        c.s[i]=s[i]+a.s[i]+x;</span><br><span class="line">        x=c.s[i]/<span class="number">10</span>;</span><br><span class="line">        c.s[i]=c.s[i]%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c.s[c.len<span class="number">-1</span>])--c.len;<span class="comment">//如果没有进位长度就减1</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BIGNUM <span class="keyword">operator</span> += (<span class="keyword">const</span> BIGNUM &amp;a)&#123;</span><br><span class="line">	*<span class="keyword">this</span> = *<span class="keyword">this</span>+a;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="比较-lt-gt-lt-gt"><a href="#比较-lt-gt-lt-gt" class="headerlink" title="比较&lt;, &gt;, &lt;=, &gt;=, ==, !="></a>比较&lt;, &gt;, &lt;=, &gt;=, ==, !=</h2><p>&lt;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> BIGNUM &amp;x)<span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len!=x.len)<span class="keyword">return</span> len&lt;x.len;<span class="comment">//注意不能有前导零</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=x.s[i])<span class="keyword">return</span> s[i]&lt;x.s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//全部都相等，说明小于不成立</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> BIGNUM &amp;x)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;*<span class="keyword">this</span>;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> BIGNUM &amp;x)<span class="keyword">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&gt;x);&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> BIGNUM &amp;x)<span class="keyword">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&lt;x);&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> BIGNUM &amp;x)<span class="keyword">const</span>&#123;<span class="keyword">return</span> !(x&lt;*<span class="keyword">this</span>||*<span class="keyword">this</span>&lt;x);&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> BIGNUM &amp;x)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;*<span class="keyword">this</span>||*<span class="keyword">this</span>&lt;x;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>计算10000以内n的阶乘（0&lt;=n&lt;=10000）</p>
<p>输入：整数n 输出：一行，即n!的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,x,len=<span class="number">1</span>;<span class="comment">//x进位 </span></span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">40010</span>]; </span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		x=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len;j++)&#123;</span><br><span class="line">			a[j]=a[j]*i+x;</span><br><span class="line">			x=a[j]/<span class="number">10</span>;</span><br><span class="line">			a[j]%=<span class="number">10</span>;</span><br><span class="line">			<span class="keyword">if</span>(x!=<span class="number">0</span>&amp;&amp;j==len)len++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">1</span>;i--)<span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础06</title>
    <url>/2023/01/20/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%8006/</url>
    <content><![CDATA[<p>贪心问题~</p>
<ul>
<li>区间问题</li>
<li>哈夫曼树</li>
<li>排序不等式</li>
<li>绝对值不等式</li>
<li>推公式</li>
</ul>
<span id="more"></span>
<p>贪心前提：是单峰问题：局部最优解 -&gt; 全局最优解</p>
<h2 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h2><p>给定 N 个闭区间 <code>[ai,bi]</code>，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。</p>
<p>解法：</p>
<ul>
<li><p>将每个区间按又断电从小到大排序</p>
</li>
<li><p>从前往后依次枚举每个区间</p>
<p>如果当前区间中已经包含点，则直接pass</p>
<p>否则，选择当前区间的右端点</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span></span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">int</span> l, r;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.l = l;</span><br><span class="line">			<span class="keyword">this</span>.r = r;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">	<span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">	<span class="keyword">static</span> Range[] range = <span class="keyword">new</span> Range[N];</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> l = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">int</span> r = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">			range[i] = <span class="keyword">new</span> Range(l ,r);</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(range, <span class="number">0</span>, n, (o1, o2) -&gt; Integer.compare(o1.r, o2.r));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> ed = (<span class="keyword">int</span>)-<span class="number">2e9</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(range[i].l &gt; ed) &#123;</span><br><span class="line">				ed = range[i].r;</span><br><span class="line">				res++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(res);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最大不相交区间数量"><a href="#最大不相交区间数量" class="headerlink" title="最大不相交区间数量"></a>最大不相交区间数量</h3><p>给定 N 个闭区间 <code>[ai,bi]</code>，请你在数轴上选择若干区间，使得选中的区间之间互不相交（包括端点）。  输出可选取区间的最大数量。</p>
<p><strong>代码与思路同上~</strong></p>
<h3 id="区间分组"><a href="#区间分组" class="headerlink" title="区间分组"></a>区间分组</h3><p>给定 N 个闭区间 [ai,bi]，请你将这些区间分成若干组，使得每组内部的区间两两之间（包括端点）没有交集，并使得组数尽可能小。</p>
<p><code>1≤N≤105, −10^9≤ai≤bi≤10^9</code></p>
<p>解法：</p>
<ul>
<li><p>将所有区间按左端点从小到大排序</p>
</li>
<li><p>从前往后处理每个区间</p>
<p>判断能否将其放到某个现有的组中（l &gt; 组内Max_r则可以)</p>
<ul>
<li><p>如果不存在这样的组，则开新组，然后再将其放进去</p>
</li>
<li><p>如果存在这样的组，将其放进去，并更新当前组的Max_r</p>
<p>如果满足条件的有多组，则可随意选择一组放入，不影响结果，这里我们可以选择Max_r最小的一组放入</p>
</li>
</ul>
</li>
<li><p>n^2复杂度可以通过堆优化：小根堆（优先队列实现）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span></span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">int</span> l, r;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.l = l;</span><br><span class="line">			<span class="keyword">this</span>.r = r;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">	<span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">	<span class="keyword">static</span> Range[] range = <span class="keyword">new</span> Range[N];</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> l = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">int</span> r = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">			range[i] = <span class="keyword">new</span> Range(l, r);</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(range, <span class="number">0</span>, n, (o1, o2) -&gt; o1.l - o2.l);</span><br><span class="line">		PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;();<span class="comment">//默认小根堆</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(heap.isEmpty() || heap.peek() &gt;= range[i].l) &#123;</span><br><span class="line">				heap.add(range[i].r);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				heap.poll();</span><br><span class="line">				heap.add(range[i].r);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(heap.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h3><p>给定 N 个闭区间 <code>[ai,bi]</code> 以及一个线段区间 <code>[s,t]</code>，请你选择尽量少的区间，将指定线段区间完全覆盖。  输出最少区间数，如果无法完全覆盖则输出 −1。</p>
<p>解法：</p>
<ul>
<li>将所有区间按左端点从小到大排序</li>
<li>从前往后依次枚举每个区间，在所有能覆盖start的区间中，选择右端点最大的区间；然后将start更新成右端点的最大值</li>
</ul>
<p><code>1≤N≤10^5, −10^9≤ai≤bi≤10^9, −10^9≤s≤t≤10^9</code></p>
<p>通过双指针来做时间复杂度为O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span></span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">int</span> l, r;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.l = l;</span><br><span class="line">			<span class="keyword">this</span>.r = r;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">	<span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">	<span class="keyword">static</span> Range[] range = <span class="keyword">new</span> Range[N];</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> s = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">int</span> t = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> a = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">int</span> b = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">			range[i] = <span class="keyword">new</span> Range(a, b);</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(range, <span class="number">0</span>, n, (o1, o2) -&gt; o1.l - o2.l);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//双指针</span></span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">boolean</span> flag  = <span class="keyword">false</span>;<span class="comment">//判断长度是否达到</span></span><br><span class="line">		<span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">			<span class="keyword">int</span> r = (<span class="keyword">int</span>)-<span class="number">2e9</span>;</span><br><span class="line">			<span class="keyword">int</span> j = i;</span><br><span class="line">			<span class="keyword">while</span>(j &lt; n &amp;&amp; range[j].l &lt;= s) &#123;</span><br><span class="line">				r = Math.max(r, range[j].r);</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			res++;</span><br><span class="line">			<span class="keyword">if</span>(r &lt; s)<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(r &gt;= t) &#123;<span class="comment">//必须有这个条件成立才满足题设</span></span><br><span class="line">			    flag = <span class="keyword">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			s = r;</span><br><span class="line">			i = j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)System.out.println(res);</span><br><span class="line">		<span class="keyword">else</span> System.out.println(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h2><p><strong>哈夫曼树：</strong></p>
<p>给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p>
<p>见题：</p>
<p><a href="https://www.acwing.com/problem/content/description/150/">https://www.acwing.com/problem/content/description/150/</a></p>
<p>解法：</p>
<p>经典哈夫曼树的模型，每次合并重量最小的两堆果子即可。</p>
<p>时间复杂度:使用小根堆维护所有果子，每次弹出堆顶的两堆果子，并将其合并，合并之后将两堆重量之和再次插入小根堆中</p>
<p>每次操作会将果子的堆数减一，一共操作 n−1次即可将所有果子合并成1堆。每次操作涉及到2次堆的删除操作和1次堆的插入操作，计算量是 <code>O(logn)</code>。因此总时间复杂度是 <code>O(nlogn)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine().trim());</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(str[i]);</span><br><span class="line">            q.add(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = q.peek();</span><br><span class="line">            q.poll();</span><br><span class="line">            <span class="keyword">int</span> b = q.peek();</span><br><span class="line">            q.poll();</span><br><span class="line">            res += a + b;</span><br><span class="line">            q.add(a+b);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="排序不等式"><a href="#排序不等式" class="headerlink" title="排序不等式"></a>排序不等式</h2><p>逆序乘 &lt;= 乱序乘 &lt;= 顺序乘</p>
<p>有 n 个人排队到 1 个水龙头处打水，第 i 个人装满水桶所需的时间是 ti，请问如何安排他们的打水顺序才能使所有人的等待时间之和最小？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] t = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            t[i] = Integer.parseInt(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(t, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            res += (n - i - <span class="number">1</span>) * t[i];<span class="comment">//逆序乘最小</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="绝对值不等式"><a href="#绝对值不等式" class="headerlink" title="绝对值不等式"></a>绝对值不等式</h2><p><code>|a - x| + |b - x| &gt;= |a - b|  a &lt;= x &lt;= b</code></p>
<p>在一条数轴上有 N 家商店，它们的坐标分别为 <code>A1∼AN</code>。</p>
<p>现在需要在数轴上建立一家货仓，每天清晨，从货仓到每家商店都要运送一车商品。</p>
<p>为了提高效率，求把货仓建在何处，可以使得货仓到每家商店的距离之和最小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            a[i] = Integer.parseInt(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(a, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; i++)&#123;</span><br><span class="line">            res += a[n - i - <span class="number">1</span>] - a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="推公式"><a href="#推公式" class="headerlink" title="推公式"></a>推公式</h2><p> N 头奶牛叠罗汉，其中的每一头都有着自己的重量 <code>Wi</code> 以及自己的强壮程度 <code>Si</code>。  一头牛支撑不住的可能性取决于它头上所有牛的总重量（不包括它自己）减去它的身体强壮程度的值，现在称该数值为风险值，风险值越大，这只牛撑不住的可能性越高。  您的任务是确定奶牛的排序，使得所有奶牛的<strong>风险值中的最大值尽可能的小</strong>。</p>
<p><code>1≤N≤50000, 1≤Wi≤10,000, 1≤Si≤1,000,000,000</code></p>
<p>解法：</p>
<p><strong>按照<code>wi+si</code>从小到大的顺序排，最大的危险系数一定是最小的</strong></p>
<p>证明：（反证法）</p>
<p>对于第i个位置上的牛和第i+1个位置上的牛，如果有<code>wi+si &gt; w(i+1)+s(i+1)</code></p>
<p>分析：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>i位置</th>
<th>i+1位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>交换前</td>
<td><code>w1+...+w(i-1) - s(i)</code></td>
<td><code>w1+...+w(i-1)+w(i) - s(i+1)</code></td>
</tr>
<tr>
<td>交换后</td>
<td><code>w1+...+w(i-1) - s(i + 1)</code></td>
<td><code>w1+...+w(i-1)+w(i+1) - s(i)</code></td>
</tr>
</tbody>
</table>
</div>
<p>调整：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>i位置</th>
<th>i+1位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>交换前</td>
<td><code>- s(i)</code></td>
<td><code>w(i) - s(i+1)</code></td>
</tr>
<tr>
<td>交换后</td>
<td><code>- s(i + 1)</code></td>
<td><code>w(i+1) - s(i)</code></td>
</tr>
</tbody>
</table>
</div>
<p>再调整 <code>+ s(i + 1) + s(i)</code>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>i位置</th>
<th>i+1位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>交换前</td>
<td><code>s(i + 1)</code></td>
<td><code>w(i) + s(i)</code></td>
</tr>
<tr>
<td>交换后</td>
<td><code>s(i)</code></td>
<td><code>w(i+1) + s(i + 1)</code></td>
</tr>
</tbody>
</table>
</div>
<p>有<code>Max[s(i+1), w(i) + s(i)] &gt;= w(i) + s(i) &gt;= Max(s(i), w(i + 1) + s(i +1))</code></p>
<p><strong>交换使得Max的值向小的方向改变</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> w, s;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.w = w;</span><br><span class="line">            <span class="keyword">this</span>.s = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">50010</span>;</span><br><span class="line">    <span class="keyword">static</span> Pair[] p = <span class="keyword">new</span> Pair[N];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            String[] str = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> w = Integer.parseInt(str[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> s = Integer.parseInt(str[<span class="number">1</span>]);</span><br><span class="line">            p[i] = <span class="keyword">new</span> Pair(w, s);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(p, <span class="number">0</span>, n, (o1,o2) -&gt; (o1.w + o1.s - o2.w - o2.s));</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = (<span class="keyword">int</span>)-<span class="number">2e9</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            res = Math.max(res, sum - p[i].s);</span><br><span class="line">            sum += p[i].w;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯-2</title>
    <url>/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/</url>
    <content><![CDATA[<p>学习递推、递归</p>
<span id="more"></span>
<h1 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h1><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><strong>斐波那契数列</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1010</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;<span class="comment">//初始化前几项</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];<span class="comment">//递推</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[n]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="走楼梯问题"><a href="#走楼梯问题" class="headerlink" title="走楼梯问题"></a><strong>走楼梯问题</strong></h3><p>共有n阶台阶，上楼一步1、2、3阶，计算有几种走法。</p>
<p>输入样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<p>输出样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">7</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d[<span class="number">110</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    d[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    d[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    d[<span class="number">3</span>]=<span class="number">4</span>;<span class="comment">//初始化3种基本情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        d[i]=d[i<span class="number">-1</span>]+d[i<span class="number">-2</span>]+d[i<span class="number">-3</span>];<span class="comment">//递推式</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a)==l&amp;&amp;a)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,d[a]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递推基本方式：</p>
<ul>
<li>找出基本子情况</li>
<li>寻找出递推式</li>
</ul>
<h3 id="位数问题"><a href="#位数问题" class="headerlink" title="位数问题"></a><strong>位数问题</strong></h3><p>在所有的N位数中，有多少个数中有偶数个数字3？结果可能很大，需要输出这个答案对12345取余的值。</p>
<img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220117_135259_com.chaoxing.mobile_ed.jpg" class title="Screenshot_20220117_135259_com.chaoxing.mobile_ed">
<h3 id="数塔问题"><a href="#数塔问题" class="headerlink" title="数塔问题"></a>数塔问题</h3><img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220117_135433_com.chaoxing.mobile_ed.jpg" class title="![Screenshot_20220117_135433_com.chaoxing.mobile_ed">](蓝桥杯-2/Screenshot_20220117_135426_com.chaoxing.mobile_ed.jpg)

<img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220117_135433_com.chaoxing.mobile_ed-16424015413911.jpg" class title="Screenshot_20220117_135433_com.chaoxing.mobile_ed">
<h3 id="跳马问题"><a href="#跳马问题" class="headerlink" title="跳马问题"></a><strong>跳马问题</strong></h3><img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220117_135751_com.chaoxing.mobile_ed.jpg" class title="Screenshot_20220117_135751_com.chaoxing.mobile_ed">
<img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220117_140238_com.chaoxing.mobile_ed.jpg" class title="Screenshot_20220117_140238_com.chaoxing.mobile_ed">
<img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220117_140244_com.chaoxing.mobile_ed.jpg" class title="Screenshot_20220117_140244_com.chaoxing.mobile_ed">
<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归模型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">fun(<span class="number">1</span>) = <span class="number">1</span> <span class="comment">//递归出口</span></span><br><span class="line">fun(n) = x * fun(n<span class="number">-1</span>) <span class="comment">//递归体</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (fun(n<span class="number">-1</span>)*n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>];<span class="comment">//数列由小到大 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> bot,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> mid;</span><br><span class="line">	<span class="keyword">if</span>(bot &lt;= top)&#123;</span><br><span class="line">		mid=(top+bot)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(x==a[mid])<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;a[mid])search(x,bot,mid<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">else</span> search(x,mid+<span class="number">1</span>,top);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;no&quot;</span>&lt;&lt;<span class="built_in">endl</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出数字"><a href="#输出数字" class="headerlink" title="输出数字"></a>输出数字</h3><p>输入一个大于零的十进制数n的个数字位，如n =123，输出各数字为123。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(n) -&gt; 不做任何事 当n&#x3D;0时</span><br><span class="line">f(n) -&gt; f(n&#x2F;10); 输入n%10 其他情况</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">digits</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">        digits(n/<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//对a[i..n-1]个元素增值排序</span></span><br><span class="line">	<span class="keyword">int</span> j,k;</span><br><span class="line">    <span class="keyword">if</span>(i==n<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        k=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[k])k=j;</span><br><span class="line">        <span class="keyword">if</span>(k!=i)swap(a[i],a[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    SelectSort(a,n,i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">bool</span> exchange;</span><br><span class="line">    <span class="keyword">if</span>(i==n<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        exchange=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[j<span class="number">-1</span>])&#123;</span><br><span class="line">                swap(a[j],a[j<span class="number">-1</span>]);</span><br><span class="line">                exchange=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(exchange==<span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> BubbleSort(a,n,i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h3><img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220120_091215_com.chaoxing.mobile.jpg" class title="Screenshot_20220120_091215_com.chaoxing.mobile">
<img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220120_091221_com.chaoxing.mobile.jpg" class title="Screenshot_20220120_091221_com.chaoxing.mobile">
<img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220120_091227_com.chaoxing.mobile.jpg" class title="Screenshot_20220120_091227_com.chaoxing.mobile">
<h3 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h3><img src="/2022/01/20/%E8%93%9D%E6%A1%A5%E6%9D%AF-2/Screenshot_20220120_091439_com.chaoxing.mobile.jpg" class title="Screenshot_20220120_091439_com.chaoxing.mobile">
<h3 id="求最大公因数gcd"><a href="#求最大公因数gcd" class="headerlink" title="求最大公因数gcd"></a>求最大公因数gcd</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(m&lt;n)swap(m,n);</span><br><span class="line">    <span class="keyword">return</span> (m%n==<span class="number">0</span>)?n:gcd(n,m%n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯-5</title>
    <url>/2022/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF-5/</url>
    <content><![CDATA[<p>学习回溯法与剪枝</p>
<span id="more"></span>
<h1 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h1><h2 id="1-求子集问题"><a href="#1-求子集问题" class="headerlink" title="1.求子集问题"></a>1.求子集问题</h2><p><strong>有一个含n个整数的数组a，所有元素均不相同，设计一个算法求其所有子集（幂集）。</strong></p>
<p><strong>思路</strong>：解空间为子集树。</p>
<p>使用x[]表示解向量：</p>
<ul>
<li>不选择a[i]元素-&gt;下一个状态为(x[i]=0, i+1)</li>
<li>选择a[i]元素-&gt;下一个状态为(x[i]=1, i+1)</li>
</ul>
<p>深搜+回溯</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispasolution</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">if</span>(x[i]==<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> i,<span class="keyword">int</span> x[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;=n)</span><br><span class="line">		dispasolution(a,n,x);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		x[i]=<span class="number">0</span>;dfs(a,n,i+<span class="number">1</span>,x); <span class="comment">//不选择a[i] </span></span><br><span class="line">		x[i]=<span class="number">1</span>;dfs(a,n,i+<span class="number">1</span>,x); <span class="comment">//选择a[i] </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">int</span> x[MAXN];</span><br><span class="line">	<span class="built_in">memset</span>(x,<span class="number">0</span>,<span class="keyword">sizeof</span>(x));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;求解结果\n&quot;</span>);</span><br><span class="line">	dfs(a,n,<span class="number">0</span>,x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="2-符号插入凑整"><a href="#2-符号插入凑整" class="headerlink" title="2. 符号插入凑整"></a>2. 符号插入凑整</h2><p><strong>设计一个算法在1，2，…，9（顺序不能变）数字之间插入+或-或什么都</strong></p>
<p><strong>不插入，使得计算结果总是100的程序，并输出所有的可能性。</strong></p>
<p><strong>例如：1+2+34-5+67-8+9=100.</strong></p>
<p><strong>思路</strong>：</p>
<p>利用回溯法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 9</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> op[],<span class="keyword">int</span> sum,<span class="keyword">int</span> pre,<span class="keyword">int</span> a[],<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i==N)&#123;</span><br><span class="line">		<span class="keyword">if</span>(sum==<span class="number">100</span>)&#123;<span class="comment">//打印 </span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;N;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(op[j]!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,op[j]);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[j]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;=100\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;<span class="comment">//递归出口 </span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	op[i]=<span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">	sum+=a[i];</span><br><span class="line">	fun(op,sum,a[i],a,i+<span class="number">1</span>);</span><br><span class="line">	sum-=a[i];<span class="comment">//回溯 </span></span><br><span class="line">	</span><br><span class="line">	op[i]=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">	sum-=a[i];</span><br><span class="line">	fun(op,sum,a[i],a,i+<span class="number">1</span>);</span><br><span class="line">	sum+=a[i];<span class="comment">//回溯 </span></span><br><span class="line">	</span><br><span class="line">	op[i]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	sum-=pre;</span><br><span class="line">	<span class="keyword">int</span> tmp;</span><br><span class="line">	tmp = pre*<span class="number">10</span> + a[i];</span><br><span class="line">	sum+=tmp;</span><br><span class="line">	fun(op,sum,tmp,a,i+<span class="number">1</span>);</span><br><span class="line">	sum-=tmp;</span><br><span class="line">	sum+=pre;<span class="comment">//回溯 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[N]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span> op[N];</span><br><span class="line">	fun(op,a[<span class="number">0</span>],a[<span class="number">0</span>],a,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="3-全排列问题"><a href="#3-全排列问题" class="headerlink" title="3.全排列问题"></a>3.全排列问题</h2><p><strong>有一个含n个整数的数组a，所有元素均不相同，求其所有元素的全排列。例如，a[]={1,2,3}，得到结果是（1,2,3）、（1,3,2）、（2,3,1）、（2,3,1）</strong></p>
<p>思路：</p>
<img src="/2022/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF-5/image-20220211233428466.png" class title="image-20220211233428466">
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,a[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d)&quot;</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;=n)display(a,n);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">			swap(a[i],a[j]);</span><br><span class="line">			dfs(a,n,i+<span class="number">1</span>);</span><br><span class="line">			swap(a[i],a[j]);<span class="comment">//回溯恢复 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">	dfs(a,n,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="回溯法与深搜的异同"><a href="#回溯法与深搜的异同" class="headerlink" title="回溯法与深搜的异同"></a>回溯法与深搜的异同</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ul>
<li>都遵循深度优先，即一步一步向前探索</li>
</ul>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul>
<li>访问序不同：深度优先遍历目的是遍历，本质无序；回溯法目的是求解过程，本质有序</li>
<li>访问次数不同：回溯法访问过的节点可能再次访问</li>
<li>剪值的不同：回溯算法可采用剪枝条件剪除不必要的分枝以提高效能</li>
</ul>
<h1 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0/1背包问题"></a>0/1背包问题</h1><p><strong>有n个重量分别为<code>&#123;w1,w2,...wn&#125;</code>的物品，它们的价值分别为{v1,v2,…vn}，给定一个容量为W的背包。设计从这些物品中选取一部分物品放入该背包的方案，每个物品要么选中要么不选中，要求选中的物品不仅能够放在背包中，而且满足重量限制具有最大的价值。</strong></p>
<p>思路：</p>
<img src="/2022/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF-5/image-20220212092938883.png" class title="image-20220212092938883">
<p><strong>考虑装入背包中物品重量和恰好为W：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 5</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">4</span>;<span class="comment">//四件物品</span></span><br><span class="line"><span class="keyword">int</span> W=<span class="number">6</span>;<span class="comment">//书包最大总重量</span></span><br><span class="line"><span class="keyword">int</span> w[]=&#123;<span class="number">0</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> x[MAXN];<span class="comment">//存放最终解 </span></span><br><span class="line"><span class="keyword">int</span> maxv;<span class="comment">//存放最有解的总价值 </span></span><br><span class="line"><span class="comment">//int maxw;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> tw,<span class="keyword">int</span> tv,<span class="keyword">int</span> op[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tw==W&amp;&amp;tv&gt;maxv)&#123;</span><br><span class="line">			maxv=tv;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">				x[j]=op[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		op[i]=<span class="number">1</span>;</span><br><span class="line">		dfs(i+<span class="number">1</span>,tw+w[i],tv+v[i],op);</span><br><span class="line">		</span><br><span class="line">		op[i]=<span class="number">0</span>;</span><br><span class="line">		dfs(i+<span class="number">1</span>,tw,tv,op);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> op[<span class="number">5</span>];</span><br><span class="line">	dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,op);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;maxv&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i!=n)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;x[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;x[i]&lt;&lt;<span class="built_in">endl</span>;	</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>改进1</strong></p>
<p>左剪枝：</p>
<p>仅仅扩展满足<code>tw+w[i]&lt;=W</code>的节点</p>
<p><strong>改进2</strong></p>
<p>右剪枝：</p>
<p><code>rw=w[i]+w[i+1]+...+w[n]</code></p>
<p>仅仅扩展满足<code>tw+rw-w[i]&gt;=W</code>的节点p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> tw,<span class="keyword">int</span> tv,<span class="keyword">int</span> rw,<span class="keyword">int</span> op[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tw==W&amp;&amp;tv&gt;maxv)&#123;</span><br><span class="line">			maxv=tv;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">				x[j]=op[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tw+w[i]&lt;=W)&#123;<span class="comment">//进行左剪枝</span></span><br><span class="line">            op[i]=<span class="number">1</span>;</span><br><span class="line">			dfs(i+<span class="number">1</span>,tw+w[i],tv+v[i],rw-w[i],op);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">if</span>(tw+rw-w[i]&gt;=W)</span><br><span class="line">        &#123;</span><br><span class="line">         	op[i]=<span class="number">0</span>;</span><br><span class="line">			dfs(i+<span class="number">1</span>,tw,tv,rw-w[i],op);  </span><br><span class="line">        &#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>考虑装入背包中物品重量和不超过W：</strong></p>
<ul>
<li>左剪枝相同</li>
<li>右剪枝修改：</li>
</ul>
<p>上界函数<code>bound(i)=tv+r</code>表示沿着该方向选择得到物品的价值上界，r表示剩余物品的总价值。</p>
<p>若当前<code>bound(i)&lt;=maxv</code>，则右剪枝，否则继续扩展。</p>
<p>显然r越小，bound(i)也越小，剪枝越多，为了构造更小的r，将所有物品以单位重量价值递减排列。</p>
<img src="/2022/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF-5/image-20220212105923444.png" class title="image-20220212105923444">
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bound</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> tw,<span class="keyword">int</span> tv)</span><span class="comment">//求上界</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i++;<span class="comment">//从i+1开始</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n &amp;&amp; tw+A[i].w&lt;=W)&#123;<span class="comment">//若序号为i的物品可以整个放入</span></span><br><span class="line">        tw+=A[i].w;</span><br><span class="line">        tv+=A[i].v;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=n)</span><br><span class="line">        <span class="keyword">return</span> tv+(W-tw)*A[i].p;<span class="comment">//序号为i的物品不能整个放入</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> tv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>右剪枝：仅仅扩展<code>bound(i,tw,tv)&gt;maxv</code>的右孩子节点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> tw,<span class="keyword">int</span> tv,<span class="keyword">int</span> rw,<span class="keyword">int</span> op[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;n)</span><br><span class="line">	&#123;</span><br><span class="line">		maxv=tv;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			x[j]=op[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tw+A[i].w&lt;=W)&#123;<span class="comment">//进行左剪枝</span></span><br><span class="line">            op[i]=<span class="number">1</span>;</span><br><span class="line">			dfs(i+<span class="number">1</span>,tw+A[i].w,tv+A[i].v,op);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">if</span>(bound(i,tw,tv)&gt;maxv)<span class="comment">//进行右剪枝</span></span><br><span class="line">        &#123;</span><br><span class="line">         	op[i]=<span class="number">0</span>;</span><br><span class="line">			dfs(i+<span class="number">1</span>,tw,tv,op);  </span><br><span class="line">        &#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF-5/image-20220212112256424.png" class title="image-20220212112256424">
<h1 id="求解装载问题"><a href="#求解装载问题" class="headerlink" title="求解装载问题"></a>求解装载问题</h1><img src="/2022/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF-5/image-20220212112755793.png" class title="image-20220212112755793">
<img src="/2022/02/12/%E8%93%9D%E6%A1%A5%E6%9D%AF-5/image-20220212112801976.png" class title="image-20220212112801976">
]]></content>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯-4</title>
    <url>/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-4/</url>
    <content><![CDATA[<p>  学习图的广搜~</p>
<span id="more"></span>
<h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><p>邻接矩阵：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(MGragh g,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">    <span class="keyword">int</span> visited[MAXV];</span><br><span class="line">    <span class="keyword">int</span> w,i;</span><br><span class="line">    <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="keyword">sizeof</span>(visited));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,v);</span><br><span class="line">    visited[v]=<span class="number">1</span>;</span><br><span class="line">    qu.push(v);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        w=qu.front();qu.pop();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;g.n;i++)<span class="comment">//中出顶点w相邻的顶点</span></span><br><span class="line">            <span class="keyword">if</span>(g.edges[w][i]!=<span class="number">0</span>&amp;&amp;g.edges[w][i]!=INF&amp;&amp;visited[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,i);</span><br><span class="line">                visited[i]=<span class="number">1</span>;</span><br><span class="line">                qu.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>邻接表：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(ALGragh g,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">    <span class="keyword">int</span> visited[MAXV],w;</span><br><span class="line">    <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="keyword">sizeof</span>(visited));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,v);</span><br><span class="line">    visited[v]==<span class="number">1</span>;</span><br><span class="line">    qu.push(v);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        w=qu.front();</span><br><span class="line">        qu.pop();</span><br><span class="line">        p=G-&gt;adjlist[w].firstarc;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[p-&gt;adjvex]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;3d&quot;</span>,p-&gt;adjvex);</span><br><span class="line">                visited[p-&gt;adjvex]=<span class="number">1</span>;</span><br><span class="line">                qu.push(p-&gt;adjvex);</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>栗子：</p>
<ol>
<li>假设图G采用邻接表存储，设计一个算法，求不带权无向连通图G中从顶点u到顶点v的一条最短路径。</li>
</ol>
<img src="/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-4/6BCAD322B32CB9CBE03763E0842FB60A.jpg" class title="img">
<p>这里注意要使用一个数组记录父节点便于路径回溯</p>
<img src="/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-4/3D8C8887755CFF53BB74DDE35CA78EFB.jpg" class title="img">
<ol>
<li>最优配餐问题</li>
</ol>
<img src="/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-4/E46462D4057B27DC77AD5D9749FA8E93.jpg" class title="img">
<img src="/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-4/FB9CC75562AD60FBC49DA128D8ACAB05.jpg" class title="img">
<p>遍历方式：广度优先遍历</p>
<p>​    方案1：从每个分店搜索最近送餐客户（×）</p>
<p>​    方案2：从每个客户搜索最近送餐分店（√）</p>
<img src="/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-4/F25C019B3064CF0E87B3C00DCD0C6ABD.jpg" class title="img">
<img src="/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-4/AEDFE67724E782935DA1BDDF2086DEDA.jpg" class title="img">
<img src="/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-4/8A515AFD2518E6DEF5E8EB6BB4036353.jpg" class title="img">
]]></content>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构模式分析</title>
    <url>/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ul>
<li>了解软件架构模型概念</li>
<li>学习常见的架构模式</li>
<li>熟悉架构模式应用方法</li>
</ul>
<span id="more"></span>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630224639965.png" class title="image-20220630224639965">
<h1 id="架构模式概念"><a href="#架构模式概念" class="headerlink" title="架构模式概念"></a>架构模式概念</h1><p>（一切交流靠接口）</p>
<h3 id="架构的定义"><a href="#架构的定义" class="headerlink" title="架构的定义"></a>架构的定义</h3><p>架构是构成一个系统的<strong>基础组织结构</strong>，包括系统的<strong>组件</strong>构成，组件间的相互<strong>关系</strong>、系统和其<strong>所在环境</strong>的关系、以及知道架构<strong>设计</strong>和演进的相关<strong>准则</strong></p>
<h3 id="架构的特征"><a href="#架构的特征" class="headerlink" title="架构的特征"></a>架构的特征</h3><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630230127539.png" class title="image-20220630230127539">
<h3 id="架构风格"><a href="#架构风格" class="headerlink" title="架构风格"></a>架构风格</h3><p>架构风格是以结构组织模式定义的一类系统族。一种软件体系结构风格刻划了一个具有类似结构和语义的系统家族。</p>
<p><strong>内容：</strong></p>
<ul>
<li>构件</li>
<li>交互关系</li>
<li>约束条件</li>
</ul>
<p><strong>举例：</strong></p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630230638417.png" class title="image-20220630230638417">
<p><strong>好处</strong></p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630230701411.png" class title="image-20220630230701411">
<h5 id="架构与框架的关系"><a href="#架构与框架的关系" class="headerlink" title="架构与框架的关系"></a><strong>架构与框架的关系</strong></h5><p>框架是软件，架构不是软件</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630231014120.png" class title="image-20220630231014120">
<ul>
<li>通过框架实现了架构的沉淀落地</li>
<li>框架的质量决定了系统整体架构的质量</li>
<li>对框架的验证，同时也验证了整个系统架构</li>
</ul>
<h3 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h3><p>定义：</p>
<ul>
<li>架构模式是对以往系统的<strong>架构抽象而形成的模板</strong></li>
<li>是对某个<strong>具体</strong>环境下<strong>问题的结构性解决方案</strong></li>
<li>内容包括<ul>
<li>提供一些实现定义好的子系统，指定他们的责任</li>
<li>给出把他们组织在一起的法则和指南</li>
</ul>
</li>
</ul>
<h5 id="架构风格与架构模式的关系"><a href="#架构风格与架构模式的关系" class="headerlink" title="架构风格与架构模式的关系"></a>架构风格与架构模式的关系</h5><ul>
<li>概念上通常<strong>可互用</strong></li>
<li>架构风格反映了系统遵循的某种模式，是一类系统的<strong>抽象总结</strong>描述</li>
<li>架构模式，是架构风格<strong>具体化的模板</strong>，可包含一种或多种结构风格，是为了实现某个目标，而形成的解决方案模板</li>
</ul>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>模式是表示<strong>上下文</strong>、<strong>系统目</strong>、<strong>解决方案</strong>三个方面关系的一个规则。</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630231844570.png" class title="image-20220630231844570">
<h3 id="模式的层次分类"><a href="#模式的层次分类" class="headerlink" title="模式的层次分类"></a>模式的层次分类</h3><ul>
<li><p>架构模式</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630232014816.png" class title="image-20220630232014816">
</li>
<li><p>设计模式</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630232036011.png" class title="image-20220630232036011">
</li>
<li><p>代码模式</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630232104968.png" class title="image-20220630232104968">
</li>
</ul>
<h3 id="软件架构模式具体实例"><a href="#软件架构模式具体实例" class="headerlink" title="软件架构模式具体实例"></a>软件架构模式具体实例</h3><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630233728653.png" class title="image-20220630233728653">
<h1 id="常见的架构模式"><a href="#常见的架构模式" class="headerlink" title="常见的架构模式"></a>常见的架构模式</h1><p>现状难处：</p>
<p>没有选择适合的架构模式-&gt;没有做好架构设计-&gt;代码耦合-&gt;需求不好改-&gt;架构大泥球化</p>
<h3 id="六种常见的架构模式"><a href="#六种常见的架构模式" class="headerlink" title="六种常见的架构模式"></a>六种常见的架构模式</h3><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220630235615354.png" class title="image-20220630235615354">
<h4 id="1-分层架构模型"><a href="#1-分层架构模型" class="headerlink" title="1. 分层架构模型"></a>1. 分层架构模型</h4><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701000144833.png" class title="image-20220701000144833">
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701000405106.png" class title="image-20220701000405106">
<p>分层架构反模式：层开放</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701000447248.png" class title="image-20220701000447248">
<h4 id="2-面向服务的架构-—-SOA架构"><a href="#2-面向服务的架构-—-SOA架构" class="headerlink" title="2. 面向服务的架构 — SOA架构"></a>2. 面向服务的架构 — SOA架构</h4><p>包括业务方法和IT技术架构两个方面</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701001257175.png" class title="image-20220701001257175">
<p>基本特征：</p>
<ul>
<li>服务的封装性</li>
<li>服务的重用</li>
<li>服务的互操作（既定的通信协议进行操作）</li>
<li>服务是自治的功能实体（强调实体的完全独立自主能力和自我管理、恢复能力）</li>
<li>服务之间的送耦合度</li>
<li>服务是位置透明的（设计和部署对用户完全透明）</li>
<li>明确定义的接口（WSDL标准化接口）</li>
</ul>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701001916226.png" class title="image-20220701001916226">
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701001931159.png" class title="image-20220701001931159">
<p>优缺点</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701002345929.png" class title="image-20220701002345929">
<h4 id="3-微服务架构模式"><a href="#3-微服务架构模式" class="headerlink" title="3. 微服务架构模式"></a>3. 微服务架构模式</h4><p>定义：</p>
<ul>
<li>微服务是一种架构模式，它提倡将<strong>单体应用（巨石应用）</strong>划分为<strong>一组小服务</strong></li>
<li>每个服务运行在其<strong>独立的进程</strong>中，服务与服务间采用<strong>轻量级的通信机制</strong>互相沟通（常见：基于HTTP的RESTful API）</li>
<li>这些服务基于<strong>业务功能目标</strong>构建，通过<strong>全自动部署的方式进行独立部署</strong></li>
<li>对这些服务采取<strong>最低限度的集中化管理</strong>，每个服务可采用不同<strong>开发语言</strong>、使用不同的<strong>数据存储方式</strong></li>
</ul>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701002553052.png" class title="image-20220701002553052">
<p><strong>微服务架构特征</strong></p>
<ul>
<li>通过服务实现组件<ul>
<li>组件：可被单独替换和升级的软件单元</li>
<li>库：被连接到一个程序并通过内存函数调用的组件，和程序在一个进程内（类库）</li>
<li>服务：服务进程外加载的组件，和调用它的程序是两个独立的进程</li>
<li>通过服务实现组件化：<ul>
<li>服务可独立部署</li>
<li>服务有更明确的组件接口</li>
</ul>
</li>
</ul>
</li>
<li>基于业务功能搭建团队<ul>
<li>每个业务团队，负责构建及运营其产品</li>
<li>传统根据技术层面-&gt;根据业务功能划分团队</li>
</ul>
</li>
<li>做产品而非项目<ul>
<li>团队负责产品的整个生命周期而非只限于开发上限</li>
</ul>
</li>
<li>智能化服务端点和哑管道<ul>
<li>基于服务源的HTTP API请求</li>
<li>轻量级异步消息机制（哑管道：值轻量级的消息总线，值具备信息路由能力）</li>
</ul>
</li>
<li>去中心化的数据管理<ul>
<li>通过Domain-Driven-Design进行区域划分</li>
<li>每个微服务管理自己的数据库</li>
<li>最终一致性+补偿机制</li>
</ul>
</li>
<li>离散式治理<ul>
<li>每个微服务团体可以通过工具用不同的方式实现标准化</li>
<li>Tolerant Reader、Consumer-Driven Contacts</li>
</ul>
</li>
</ul>
<p><strong>拓扑结构</strong></p>
<p>细粒度：</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701085515358.png" class title="image-20220701085515358">
<p>粗粒度：</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701085441403.png" class title="image-20220701085441403">
<p><strong>粒度拆分</strong></p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701090259187.png" class title="image-20220701090259187">
<h4 id="4-事件驱动架构模式"><a href="#4-事件驱动架构模式" class="headerlink" title="4. 事件驱动架构模式"></a>4. 事件驱动架构模式</h4><p>定义：</p>
<ul>
<li>异步开发</li>
<li>由高度解构、单一母的组件构成，负责异步事件的接受和处理</li>
<li>主要拓扑结构：中介拓扑结构、代理拓扑结构</li>
</ul>
<p>中介拓扑结构</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701091431440.png" class title="image-20220701091431440">
<p>代理拓扑结构</p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701091746717.png" class title="image-20220701091746717">
<h4 id="5-基于内存空间的架构（SBA）"><a href="#5-基于内存空间的架构（SBA）" class="headerlink" title="5. 基于内存空间的架构（SBA）"></a>5. 基于内存空间的架构（SBA）</h4><p>定义：</p>
<ul>
<li>源于元组空间概念，也就是分布式内存概念</li>
<li>通过冗余的内存数据，代替数据库来实现高伸缩性</li>
</ul>
<p>适用范围：</p>
<ul>
<li>解决高性能、高并发的伸缩性需求</li>
<li>不太适合使用传统大规模关系型数据库的应用</li>
</ul>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701092420618.png" class title="image-20220701092420618">
<h4 id="6-微内核架构"><a href="#6-微内核架构" class="headerlink" title="6. 微内核架构"></a>6. 微内核架构</h4><p>定义：</p>
<ul>
<li>即插即用</li>
<li>通过插件的形式添加额外属性到核心系统中</li>
<li>新特性和核心系统隔离</li>
</ul>
<p>架构特点：</p>
<ul>
<li>可嵌入到其他架构中</li>
<li>很好地支持了渐进式设计和增量开发</li>
</ul>
<p>适用场景：</p>
<ul>
<li>基于核心系统的外围应用</li>
<li>基于核心版本的分支版本扩展</li>
</ul>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701092930194.png" class title="image-20220701092930194">
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701092903624.png" class title="image-20220701092903624">
<h3 id="整体评估"><a href="#整体评估" class="headerlink" title="整体评估"></a>整体评估</h3><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701093023126.png" class title="image-20220701093023126">
<h1 id="架构模式应用方法"><a href="#架构模式应用方法" class="headerlink" title="架构模式应用方法"></a>架构模式应用方法</h1><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701093531229.png" class title="image-20220701093531229">
<h3 id="架构模型的选择"><a href="#架构模型的选择" class="headerlink" title="架构模型的选择"></a>架构模型的选择</h3><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701093749314.png" class title="image-20220701093749314">
<ul>
<li>架构模式的选择主要在于核心业务需求</li>
<li>架构模式的评估主要在于核心质量需求</li>
</ul>
<h3 id="混搭的架构模式"><a href="#混搭的架构模式" class="headerlink" title="混搭的架构模式"></a>混搭的架构模式</h3><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701094248972.png" class title="image-20220701094248972">
<h3 id="架构模式与技术专业委员会的关系"><a href="#架构模式与技术专业委员会的关系" class="headerlink" title="架构模式与技术专业委员会的关系"></a>架构模式与技术专业委员会的关系</h3><img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701094356714.png" class title="image-20220701094356714">
<p><em>practice:</em></p>
<img src="/2022/07/01/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/image-20220701094636435.png" class title="image-20220701094636435">
]]></content>
      <tags>
        <tag>思特奇培训课程</tag>
      </tags>
  </entry>
  <entry>
    <title>陈群教授论文笔记</title>
    <url>/2023/09/10/%E9%99%88%E7%BE%A4%E6%95%99%E6%8E%88%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>持续更新中~</p>
<span id="more"></span>
<p>陈群教授个人主页：<a href="https://chenbenben.org/">https://chenbenben.org/</a></p>
<p><strong>已读论文</strong></p>
<p><a href="https://chenbenben.org/paper/www2019hou.pdf">https://chenbenben.org/paper/www2019hou.pdf</a></p>
<p><a href="https://chenbenben.org/paper/tkde2020hou.pdf">https://chenbenben.org/paper/tkde2020hou.pdf</a></p>
<p><strong>在读论文</strong></p>
<p><a href="https://chenbenben.org/paper/attentionGML.pdf">https://chenbenben.org/paper/attentionGML.pdf</a>  </p>
<p><a href="https://chenbenben.org/paper/elsarticle-template.pdf">https://chenbenben.org/paper/elsarticle-template.pdf</a></p>
<p><strong>论文列表</strong></p>
<p>渐进机器学习：</p>
<ul>
<li><p>实体统一：</p>
<ul>
<li><p><a href="https://chenbenben.org/paper/www2019hou.pdf">https://chenbenben.org/paper/www2019hou.pdf</a>  （简短）</p>
</li>
<li><p><a href="https://chenbenben.org/paper/tkde2020hou.pdf">https://chenbenben.org/paper/tkde2020hou.pdf</a>  （长）</p>
</li>
<li><a href="https://chenbenben.org/paper/attentionGML.pdf">https://chenbenben.org/paper/attentionGML.pdf</a>  （注意力增强优化）</li>
</ul>
</li>
<li><p>情感分析：</p>
<ul>
<li><a href="https://chenbenben.org/paper/tkde2019wang.pdf">https://chenbenben.org/paper/tkde2019wang.pdf</a></li>
<li><a href="https://chenbenben.org/paper/GML_ALSA_clean.pdf">https://chenbenben.org/paper/GML_ALSA_clean.pdf</a></li>
<li><a href="https://chenbenben.org/paper/driven-DNN-GML.pdf">https://chenbenben.org/paper/driven-DNN-GML.pdf</a> （DNN-driven）</li>
<li><a href="https://chenbenben.org/paper/tacl-sgml.pdf">https://chenbenben.org/paper/tacl-sgml.pdf</a></li>
</ul>
</li>
<li><p>AL风险分析：</p>
<ul>
<li>…</li>
</ul>
</li>
</ul>
<p>框架笔记：</p>
<h1 id="渐进学习"><a href="#渐进学习" class="headerlink" title="渐进学习"></a>渐进学习</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>以一种逐步学习的思想，由易到难不断迭代的一种利用数据的方法。</p>
<p>两大特性：</p>
<ul>
<li>易实例与难实例可能存在分布偏差（即可不满足数据独立同分布的基本假设）</li>
<li>通过小阶段迭代去渐进学习和训练（可在无监督条件下自动执行）</li>
</ul>
<h2 id="基本任务"><a href="#基本任务" class="headerlink" title="基本任务"></a>基本任务</h2><p><strong>定义1</strong>：实体统一：给定一个由记录对组成的数据集$D = {d_1, d_2, …, d_n}$，entity resolution的任务就是针对数据集D给出一种标注方案S使得$f_1(D, S)$最大。</p>
<p>其中，使用$f_1(D, S)$这种F1分数的方式衡量方案质量：</p>
<script type="math/tex; mode=display">
f_1(D,S) = \frac{2}{\frac{1}{precision(D,S)} + \frac{1}{recall(D,S)}}</script><p>precision：精确度（判断为真的多少实际为真）；</p>
<p>recall：召回率（实际为真的多少判断为真）</p>
<p>F1分数为两者的综合考虑（调和平均）</p>
<h2 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h2><ul>
<li><p><strong>简单实例标记（Easy Instance Labeling）</strong></p>
<ul>
<li>这里简单实例指的是分类任务中相似度高的（更高可能性认为是一类）或相似度低的（更高可能性认为不是一类），而相似度中等的通常是难实例。（基于<strong>精度单调性假设</strong>）</li>
<li>简单实例可通过（1）用户指定规则；（2）现有无监督学习方法来搞定</li>
</ul>
</li>
<li><p><strong>特征提取和模型修正（Feature Extraction and Influence Modeling）</strong></p>
<ul>
<li>特征成为联系起简单实例和困难实例的媒介</li>
<li>尽可能多的抓取各种各样的特征信息</li>
<li>针对每个抓取的特征，需要修正相关实例的标签？？</li>
</ul>
<p>三种类型的<strong>特征</strong>：</p>
<ol>
<li><strong>属性值相似度</strong>（Attribute value similarity）</li>
<li>连续令牌的最大数量（Similarity based on the maximal number of common con-secutive tokens in string attributes）</li>
<li><strong>两个记录中均出现或只出现在其中一个记录的令牌信息</strong>（The tokens occurring in both records or in one and only one record）</li>
</ol>
<p>特征影响力计算公式（使用sigmoid调制）：</p>
<script type="math/tex; mode=display">
P_f(d) = \frac{1}{1 + e^{-\tau_f(x_f(d)-\alpha_f)}}</script><p>其中，f代表一个特征，d代表一组实例，$\alpha_f$表示函数对称中点，$\tau_f$衡量曲线陡率，$x_f(d)$表示d这组实例的f型特征值。</p>
</li>
</ul>
<ul>
<li><p><strong>渐进推理（Gradual Inference）</strong></p>
<ul>
<li>逐渐标注难度更高的样例</li>
<li>实现角度/评估依据：<strong>evidential certainty</strong></li>
<li>在每一次迭代循环中，选择最高evidential certainty的标签进行标注</li>
<li>在所有实例都被标注后停止</li>
<li>新被标记的实例会作为依据加入下一次迭代之中</li>
</ul>
</li>
</ul>
<p><strong>计算过程</strong>：</p>
<p>针对未标记实例，计算其各选出特征值$x_f(d)$，后根据如上公式计算确信度(evidential certainty)$P_f(d)$，其中$\tau_f$和$\alpha_f$是各特征的超参数，也是迭代训练的目标变量。根据计算得到的$P_f(d)$，通过以下公式计算得到分配的权重：</p>
<script type="math/tex; mode=display">
\omega_f(d) = \theta_f(d) \cdot log(\frac{P_f(d)}{1-P_f(d)}) = \theta_f(d) \cdot \tau_f(x_f(d)-\alpha_f)</script><p>其中，$\theta_f(d)$表示对该实例d的该特征f的置信度(confidence)。</p>
<p>得到特征值和权重后，可以计算出总体上的确信度(evidential probablity)：</p>
<script type="math/tex; mode=display">
P(d) = \frac{\prod \limits_{f \in F_d}e^{w_f(d)}}{1+\prod \limits_{f \in F_d}e^{w_f(d)}}</script><p>根据已标记公式与计算的P(d)，可以通过梯度下降来更新$\alpha$和$\tau$</p>
<script type="math/tex; mode=display">
(\hat{a},\hat{\tau}) = arg \min({\alpha, \tau}) - log\sum_{V_I} P_{\alpha, \tau}(Λ, V_I)</script><p>Λ表示已标记实例或易实例，$V_I$表示未标记实例或推理实例，由于已标记或未标记实例都相互独立，所以可以写到一起：</p>
<script type="math/tex; mode=display">
(\hat{a},\hat{\tau}) = arg \min({\alpha, \tau}) - log\sum_{d \in Λ \cup V_I} P_{\alpha, \tau}(d)</script><p>如果考虑到数据集中不匹配和匹配的数量差距较大的情况，我们可以添加超参数来调整模型的梯度下降公式：在样本集中动态记录不匹配的数量$n_-$和匹配的数量$n_+$，我们分别为不匹配实例和匹配实例设置权重为1和$\frac{n_-}{n_+}$（这里我认为可以理解为不匹配的信息量大于匹配信息量，所以给予更快的梯度下降程度）</p>
<script type="math/tex; mode=display">
(\hat{a},\hat{\tau}) = arg \min({\alpha, \tau}) - log\sum_{d \in Λ \cup V_I}t_d \cdot P_{\alpha, \tau}(d)</script><p>其中，如果d是不匹配实例则$t_d = 1$, 如果是匹配实例则$t_d = \frac{n_-}{n_+}$。</p>
<p><em>熵的计算公式（参考帖子：<a href="https://blog.csdn.net/zhang911007xing/article/details/106767072）">https://blog.csdn.net/zhang911007xing/article/details/106767072）</a></em></p>
<script type="math/tex; mode=display">
H(p) = -\sum_{i}p_ilog_2(p_i) = \sum_{i}p_ilog_2(1/p_i)</script><p><em>其中，i代表事件i，$p_i$代表该事件发生的概率。熵很好的衡量了事件的不确定性（如果H(p)=1，则该不确定事件变为确定事件）</em></p>
<p>这里针对一个实例d的evidential certainty计算采用熵的逆（熵越大，不确定性越大，evidential certainty越小）：</p>
<script type="math/tex; mode=display">
E(d)= \frac{1}{H(d)} = \frac{1}{-\sum_{1<=i<=l}P_i(d) \cdot log_2P_i(d)}</script><p>其中，$l$是一个标签种类集${L_1, L_2, …, L_l}$</p>
<p>针对ER任务场景，上述公式简化为二分类问题：</p>
<script type="math/tex; mode=display">
E(d) = \frac{1}{-(P(d) \cdot log_2P(d) + (1-P(d)) \cdot log_2(1 - P(d)))}</script><h2 id="知识性备注"><a href="#知识性备注" class="headerlink" title="知识性备注"></a>知识性备注</h2><p>给定两个集合A,B，<strong>Jaccard 系数</strong>定义为A与B交集的大小与A与B并集的大小的比值，定义如下：</p>
<script type="math/tex; mode=display">
J(A,B)=\frac{|A\bigcap B|}{|A\bigcup B|}</script><h2 id="已实现应用"><a href="#已实现应用" class="headerlink" title="已实现应用"></a>已实现应用</h2><ul>
<li><p>实体统一（Entity Resolution）</p>
</li>
<li><p>情感分析（Sentiment Analysis）</p>
</li>
</ul>
<p>作为一种通用范式，GML可以推广到各种<strong>分类</strong>任务中</p>
<p>开源项目：<a href="https://github.com/gml-explore/gml">https://github.com/gml-explore/gml</a></p>
<h2 id="实体统一介绍"><a href="#实体统一介绍" class="headerlink" title="实体统一介绍"></a>实体统一介绍</h2><p>问题定义：给定两个实体，判断是否是指向同一个实体</p>
<p>主要研究方向：</p>
<ul>
<li><p>无监督：设计不同的距离函数去测量成对相似度</p>
</li>
<li><p>监督方法：</p>
<ul>
<li><p>rules</p>
</li>
<li><p>probabilistic theory 概率论 / 可靠度理论</p>
</li>
<li><p>machine learning</p>
</li>
</ul>
</li>
</ul>
<p>经典的二分类问题</p>
<ul>
<li><p>基于两实体相似度sim(str1, str2)的方法</p>
<ul>
<li>例如：两字符串可量化为编辑距离（看至少需要多少次的处理才能将一个字符串变成另一个字符串 <em>删除、替换、添加</em>）</li>
</ul>
</li>
<li><p>基于规则的方法</p>
<p>设计规则将实体转变为原型（prototype）</p>
</li>
<li><p>在文本中应用、在图中应用</p>
</li>
</ul>
<h2 id="其他相关机器学习模型"><a href="#其他相关机器学习模型" class="headerlink" title="其他相关机器学习模型"></a>其他相关机器学习模型</h2><ul>
<li>Traditional supervised machine learning</li>
<li>Semi-supervised learning</li>
<li>self-supervised learning</li>
<li>Active learning</li>
<li>Online learning</li>
<li>incremental learning</li>
<li>Curriculum learning</li>
<li>self-paced learning</li>
<li>self-paced deep clustering</li>
<li>transfer learning </li>
<li>lifelong learning</li>
<li>multi-task learning</li>
</ul>
<p>当代学者关于ER的研究趋势：众包 crowd-sourcing</p>
<h2 id="实验验证方法学习"><a href="#实验验证方法学习" class="headerlink" title="实验验证方法学习"></a>实验验证方法学习</h2><ul>
<li>实验说明（建立方式）</li>
<li>对比研究（与其他模型对比）指标：F1分数</li>
<li>敏感性评估 对m和k的调整 纵向对比准确率</li>
<li>可扩展性分析 通过调整输入数据集大小判断运行速度</li>
</ul>
<h2 id="优化方式"><a href="#优化方式" class="headerlink" title="优化方式"></a>优化方式</h2><h3 id="scalable"><a href="#scalable" class="headerlink" title="scalable"></a>scalable</h3><p>优化方式：提高效率，做出决策</p>
<ul>
<li>measurement of evidential support</li>
<li>approximate estimation of inference probability</li>
<li>construction of inference subgraph</li>
</ul>
<p>ps：这段实在是悟性不够</p>
<h3 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h3><p>注意力增强 attention enhancement</p>
<p>AGML</p>
<h1 id="AI风险分析"><a href="#AI风险分析" class="headerlink" title="AI风险分析"></a>AI风险分析</h1><p>通过网络数据分析是否异常流量（NID）<em>Network Intrusion Detection</em> </p>
<p>步骤：</p>
<ul>
<li>风险特征生成</li>
<li>风险模型构建</li>
<li>风险模型训练</li>
</ul>
<p>机密性（Confidentiality）衡量信息的隐蔽性，完整性（Integrity）衡量信息的可信度，可用性（Availability）衡量使用所需信息的能力。</p>
<ul>
<li>基于LearnRisk框架</li>
<li>提取可解释的风险特征（风险特征生成）</li>
<li>通过学习排序目标训练风险模型（风险模型构建）</li>
<li>学习到的风险模型应用到根据错误预测风险对活动进行排序</li>
</ul>
<ol>
<li>我们提出了一种新的NID可解释风险分析方案。特别地，我们提出了一种风险特征生成技术，可以有效地融合各种入侵风险因素进行风险度量。</li>
<li>我们提出了一种新的NID自适应深度学习解决方案，该解决方案可以通过最小化错误预测风险，有效地将深度模型调整到目标工作负载。</li>
<li>通过对比研究，对所提出的解决方案在真实基准数据上的有效性进行了实证验证。我们的实验表明，所提出的风险分析方案可以识别出错误标记的活动。</li>
</ol>
<p>情感分析</p>
<p>词频分析</p>
]]></content>
      <tags>
        <tag>论文笔记</tag>
      </tags>
  </entry>
</search>
